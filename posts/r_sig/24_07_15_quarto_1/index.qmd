---
title: "Reproducable manuscripts with Quarto"
description: "R-SIG 15.07.2024"
author: 
  - name: Nicklas Hafiz
  - affiliation: PhD student at the IQB, Methods team
categories: [R, quarto]
date: 07-15-2024
bibliography: references.bib
bibliographystyle: apa
---

# Introduction

[Quarto](https://quarto.org/) is an open-source scientific and technical publishing system. It allows us to combine code and markdown text to produce reproducable manuscripts that can automatically incorporate and evaluate your code when rendering. You can also build slides and even websites (like the one you are currently on) with quarto.

# Components

## YAML header

Begin on top of document by writing `---`, and also end with `---`. It contains global options for your document:

```         
---
title: "Reproducable manuscripts with Quarto"
description: "R-SIG 15.07.2024"
author: 
  - name: Nicklas Hafiz
  - affiliation: PhD student at the IQB, Methods team
categories: [R, quarto]
date: 07-15-2024
format: pdf
---
```

An overview of possible YAML-fields can be found [here](https://quarto.org/docs/reference/formats/pdf.html).  
Note the `format` field, which lets you quickly convert your document between `pdf`, `word` and `html`.  

## Markdown text

Write your text in markdown language. Some expressions:

-   `#` for headers. Add as many `#` as you like for subheaders.
- `**bold**, *italic*, `code``
- Lists: `-` for bullet points, `1.` for numbered lists (beware: the line above the list has to be empty)
- Linebreaks: Two spaces at the end of a line. 
- Links: `[text](url)`

## Code chunks
We can run code in different languages (like R, Julia, Python ...) directly from our Quarto-file. Just write ````{r}` to start a R-chunk, and ``` to end the chunk. 


```{r}
#| echo: true

library(palmerpenguins)
library(tidyverse)
head(penguins)

```

We can tweak the output via different [execution options](https://quarto.org/docs/computations/execution-options.html), which are written on top of the chunk: 

```r
#| echo: false
#| message: false

library(palmerpenguins)
library(tidyverse)
head(penguins)

```
becomes: 

```{r}
#| echo: false
#| message: false

library(palmerpenguins)
library(tidyverse)
head(penguins)

```

## Tables
Tables can be a bit tricky. The great thing is: once you have styled them, they get updated automatically if some data changes. 
Also, there are a lot of different packages for building tables in markdown, here are some options: 

For some simple tables, the normal markdown syntax might be enough, see [here](https://quarto.org/docs/authoring/tables.html). 

```
| Column 1 | Column 2 | Column 3 |
|----------|----------|----------|
| A1       | B1       | C1       |
| A2       | B2       | C2       |

```
| Column 1 | Column 2 | Column 3 |
|----------|----------|----------|
| A1       | B1       | C1       |
| A2       | B2       | C2       |



With `knitr::kable()` you can build them programmatically from code chunks:

```{r}
#| echo: true

penguins_species <- penguins %>%
  group_by(species) %>%
  summarise(mean_flipper_length = mean(flipper_length_mm, na.rm = TRUE), 
            n = n()) 

knitr::kable(penguins_species)

```

For more complex tables, I've found the [rempsyc](https://rempsyc.remi-theriault.com/articles/table) package which helps in building APA tables, but there are other options like [flextable](https://davidgohel.github.io/flextable/) or [gt](https://gt.rstudio.com/)  as well:

```r
#| label: tbl-penguins
#| tbl-cap: Table with penguins species flipper length.

library(rempsyc)

nice_table(
  penguins_species
)
```

```{r}
#| echo: false
#| message: false
#| label: tbl-penguins
#| tbl-cap: Table with penguins species flipper length.

library(rempsyc)

nice_table(
  penguins_species
)
```


### Labels
Tables that are build programmatically can be labeled with `#| label: tbl-penguins` at the top of the chunk.
This will always put the correct number in the caption and also lets you cross-reference the table in you text: `See @tbl-penguins` becomes: See @tbl-penguins.  
The [apaquarto](https://github.com/wjschne/apaquarto) template will take care of correctly rendering it to APA-style.
Captions can be written with `#| tbl-cap: Table with penguins species flipper length.`.

### Formating model output
There are some packages out there that help you to format output of statistical models. 

## Citations
Citations are saved in `.bib` files. The `.bib` format can be chosen to download or copy on almost every website, often next to APA and others. It looks like this: 

```
@article{allport1936trait,
  title={Trait-names: A psycho-lexical study.},
  author={Allport, Gordon W and Odbert, Henry S},
  journal={Psychological monographs},
  volume={47},
  number={1},
  pages={i},
  year={1936},
  publisher={Psychological Review Company}
}

@book{darwin1859,
  added-at = {2008-05-27T04:02:47.000+0200},
  address = {London},
  author = {Darwin, Charles},
  biburl = {https://www.bibsonomy.org/bibtex/2d70d713c717fb28384fb073c9f6dfbc2/neilernst},
  citeulike-article-id = {2376343},
  interhash = {c738acbb887362be5b0e6abc51be42d3},
  intrahash = {d70d713c717fb28384fb073c9f6dfbc2},
  keywords = {evolution},
  note = { or the Preservation of Favored Races in the Struggle for Life},
  priority = {2},
  publisher = {Murray},
  timestamp = {2008-05-27T04:02:47.000+0200},
  title = {On the Origin of Species by Means of Natural Selection},
  year = 1859
}

```
The great thing is: from this format, you can generate all kinds of different citation styles. Just put `bibliographystyle:` with the wanted style into your YAML-header: `bibliographystyle: apa`

Of course, you should still check if the fields are filled in correctly.
If you have created a `references.bib` file in your project directory, you can include it in your quarto document by adding `bibliography: references.bib` to your YAML header.  
To cite a reference in you text, you can use an `@` in front of the tag like `@darwin1859`: @darwin1859.



# Templates & APA

## Own Templates
You can always create your [own template](https://quarto.org/docs/journals/templates.html) Luckily, some people have done a lot of the work for us, and therefore we can use templates provided for [specific journals](https://github.com/quarto-journals/). Oooor more generally, APA templates: 

## Papaja
There are some markdown templates that format your text in APA style. Most famously, the [`papaja`](https://github.com/crsh/papaja) package lets you write APA conform manuscripts. Sadly only in R Markdown, not in Quarto.   

## apaquarto
Alternatively, I've found (but not yet tested in a whole project) the [apaquarto](https://wjschne.github.io/apaquarto/) extension. You can install via:

```{r}
#| eval: false
#| echo: true

setwd("home/my_project") # Make sure the folder is empty

quarto::quarto_use_template("wjschne/apaquarto")
```

This will create the necessary files in your folder. Update the `.qmd` file with the same name as your folder. I'd suggest to also create a RStudio-project there, and maybe structure your files into multiple folders (data, R-Scripts ...).  
The template should label your tables and figures correctly, and format the bibliography as well as the whole document. 


# Exercises

0. Create a fresh, empty folder for this exercise.
1. Install the `apaquarto` template. 

::: {.callout-tip collapse="true"}
## Hint

- Make sure you have a current version of quarto installed. If not, download from [here](https://quarto.org/docs/download/) and install. Restart RStudio, it should find the new quarto installation automatically. 
- Make sure to set the working directory to an empty folder before installing: 

```{r}
#| eval: false
#| echo: true

setwd("home/my_project") # Make sure the folder is empty
quarto::quarto_use_template("wjschne/apaquarto")

```


:::

2. Create a RStudio project in your directory and open it. 
3. Open the `.qmd` document and fill it with a "mini"-analysis of the [`athletes`](https://github.com/nickhaf/r_tutorial/blob/main/raw_data/athletes.rds) dataset. So update the YAML and the text body for your own needs. The analysis should contain: 

- at least two chapters
<!-- - some sort of table. Make it as complex as you like to try and play around with different packages and table options.  -->
<!-- - some plot -->
- two own references (a book and an article)
<!-- - a linear regression with table. What kind? Maybe use the volleyball dataset instead? With a t-Test! -->

Everything should be in APA7 style.   


::: {.callout-caution collapse="true"}
## Solution

:::

5. Convert your manuscript into a PDF.

<!-- ```{r, message=FALSE} -->
<!-- #| echo: true -->

<!-- library(tidyverse) -->

<!-- athletes <- readRDS(file = here::here(  "raw_data", "athletes.rds")) %>% -->
<!--   mutate(Medal_bi = ifelse(is.na(Medal), 0, 1)) %>% -->
<!--   filter(Sport %in% c("Basketball", "Judo", "Beach Volleyball")) -->

<!-- ## Center height? Look into log-reg slides vÃ¶lkle. Also: how to interpret the regression weights? -->

<!-- ## This is not a course on logistic regression, use with care.  -->
<!-- model <- glm(Medal_bi ~ Height * Sex, data = athletes, family = binomial(link='logit')) -->
<!-- summary(model) -->

<!-- library(report) -->
<!-- report(model) -->
<!-- report_table(model) -->

<!-- library(broom) -->
<!-- library(rempsyc) -->
<!-- model_broom <- tidy(model) -->


<!-- nice_table(model_broom, broom = "glm") -->


<!-- ## Or just build the table yourself.  -->

<!-- ``` -->


<!-- ```{r} -->
<!-- ## Maybe plot predicitons, or at least data points with a line through it? -->

<!-- ``` -->

<!-- ::: -->

<!-- 4. Split up your document into multiple files. This is kind of a preference thing, however I find it easier to keep an overview if I split up my chapters and R code and don't have a huge `.qmd` file containing everything. So try it! Create a folder called `docs` or something similar.  -->

