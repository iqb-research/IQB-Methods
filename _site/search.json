[
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this site\n\n1 + 1\n\n[1] 2"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "IQB Methods Team",
    "section": "",
    "text": "Currently, this website hosts material for and from the R-SIG. It might be expanded later on to include general methods team related material."
  },
  {
    "objectID": "index.html#r-sig",
    "href": "index.html#r-sig",
    "title": "IQB Methods Team",
    "section": "R-SIG",
    "text": "R-SIG\n\n\n\n\n\n\nTip\n\n\n\nThe R-SIG meets each every two weeks on Monday from 13:00 - 14:00. The next meeting will be on 9.10.2023.\n\n\nIn this meeting we talk about all kind of topics related to scientific programming in R. Come along!"
  },
  {
    "objectID": "index.html#schedule",
    "href": "index.html#schedule",
    "title": "IQB Methods Team",
    "section": "Schedule",
    "text": "Schedule\n\n\n\n\n\n\n\nDate\nTopic\n\n\n\n\n9.10.2023\nImproving code: How to write clear and parsimonious code in R?"
  },
  {
    "objectID": "posts.html",
    "href": "posts.html",
    "title": "R-SIG",
    "section": "",
    "text": "for-loops\n\n\n\nR\n\n\nfor-loops\n\n\n\nR-SIG 20.03.2023\n\n\n\nNicklas Hafiz\n\n\nMar 20, 2023\n\n\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "docs/loops/for_loop.html#how-to-write-a-for-loop",
    "href": "docs/loops/for_loop.html#how-to-write-a-for-loop",
    "title": "for-loops",
    "section": "How to write a for-loop?",
    "text": "How to write a for-loop?"
  },
  {
    "objectID": "posts/23_03_20_forloops/index.html#how-to-write-a-for-loop",
    "href": "posts/23_03_20_forloops/index.html#how-to-write-a-for-loop",
    "title": "for-loops",
    "section": "How to write a for-loop",
    "text": "How to write a for-loop"
  },
  {
    "objectID": "posts/23_03_20_forloops/index.html#exercises",
    "href": "posts/23_03_20_forloops/index.html#exercises",
    "title": "for-loops",
    "section": "Exercises",
    "text": "Exercises"
  },
  {
    "objectID": "posts/23_03_20_forloops/index.html#motivation",
    "href": "posts/23_03_20_forloops/index.html#motivation",
    "title": "for-loops",
    "section": "Motivation",
    "text": "Motivation"
  },
  {
    "objectID": "posts/23_03_20_forloops/index.html",
    "href": "posts/23_03_20_forloops/index.html",
    "title": "for-loops",
    "section": "",
    "text": "1"
  },
  {
    "objectID": "posts/23_03_20_forloops/index.html#footnotes",
    "href": "posts/23_03_20_forloops/index.html#footnotes",
    "title": "for-loops",
    "section": "Footnotes",
    "text": "Footnotes\n\n\nImage by Tine Ivanic on Unsplash.↩︎"
  },
  {
    "objectID": "posts_r_sig.html",
    "href": "posts_r_sig.html",
    "title": "R-SIG",
    "section": "",
    "text": "Order By\n       Default\n         \n          Date - Oldest\n        \n         \n          Date - Newest\n        \n         \n          Title\n        \n         \n          Author\n        \n     \n  \n    \n      \n      \n    \n\n\n\n\n\n\n\n\nDate\n\n\nTitle\n\n\nAuthor\n\n\nReading Time\n\n\n\n\n\n\n\n\n\nJul 7, 2025\n\n\nThe apply family\n\n\nNicklas Hafiz\n\n\n4 min\n\n\n\n\n\n\n\nMar 20, 2023\n\n\nfor-loops\n\n\nNicklas Hafiz\n\n\n1 min\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "posts/r_sig/23_03_20_forloops/index.html",
    "href": "posts/r_sig/23_03_20_forloops/index.html",
    "title": "for-loops",
    "section": "",
    "text": "1"
  },
  {
    "objectID": "posts/r_sig/23_03_20_forloops/index.html#motivation",
    "href": "posts/r_sig/23_03_20_forloops/index.html#motivation",
    "title": "for-loops",
    "section": "Motivation",
    "text": "Motivation"
  },
  {
    "objectID": "posts/r_sig/23_03_20_forloops/index.html#how-to-write-a-for-loop",
    "href": "posts/r_sig/23_03_20_forloops/index.html#how-to-write-a-for-loop",
    "title": "for-loops",
    "section": "How to write a for-loop",
    "text": "How to write a for-loop"
  },
  {
    "objectID": "posts/r_sig/23_03_20_forloops/index.html#exercises",
    "href": "posts/r_sig/23_03_20_forloops/index.html#exercises",
    "title": "for-loops",
    "section": "Exercises",
    "text": "Exercises"
  },
  {
    "objectID": "posts/r_sig/23_03_20_forloops/index.html#footnotes",
    "href": "posts/r_sig/23_03_20_forloops/index.html#footnotes",
    "title": "for-loops",
    "section": "Footnotes",
    "text": "Footnotes\n\n\nImage by Tine Ivanic on Unsplash.↩︎"
  },
  {
    "objectID": "docs/material/material.html",
    "href": "docs/material/material.html",
    "title": "Advanced material",
    "section": "",
    "text": "A collection of basic commands in Base R can be found here."
  },
  {
    "objectID": "docs/material/material.html#cheat-sheets",
    "href": "docs/material/material.html#cheat-sheets",
    "title": "Advanced material",
    "section": "",
    "text": "A collection of basic commands in Base R can be found here."
  },
  {
    "objectID": "docs/material/material.html#quarto",
    "href": "docs/material/material.html#quarto",
    "title": "Advanced material",
    "section": "Quarto",
    "text": "Quarto\nA nice hands on tutorial on adding blog posts to an existing Quarto website can be found here, along with some additional tips on citations, footnotes etc."
  },
  {
    "objectID": "docs/workshops/workshops.html",
    "href": "docs/workshops/workshops.html",
    "title": "Workshops",
    "section": "",
    "text": "An introduction to R with hands on examples and exercises can be found in Introduction to R."
  },
  {
    "objectID": "docs/workshops/workshops.html#r-introduction",
    "href": "docs/workshops/workshops.html#r-introduction",
    "title": "Workshops",
    "section": "",
    "text": "An introduction to R with hands on examples and exercises can be found in Introduction to R."
  },
  {
    "objectID": "docs/workshops/workshops.html#git",
    "href": "docs/workshops/workshops.html#git",
    "title": "Workshops",
    "section": "Git",
    "text": "Git"
  },
  {
    "objectID": "docs/workshops/workshops.html#markdown",
    "href": "docs/workshops/workshops.html#markdown",
    "title": "Workshops",
    "section": "Markdown",
    "text": "Markdown"
  },
  {
    "objectID": "docs/workshops/workshops.html#quarto",
    "href": "docs/workshops/workshops.html#quarto",
    "title": "Workshops",
    "section": "Quarto",
    "text": "Quarto"
  },
  {
    "objectID": "posts_newsletter.html",
    "href": "posts_newsletter.html",
    "title": "Newsletter",
    "section": "",
    "text": "09-08-2023\n\n\nNewsletter\n\n\n\nBenjamin Becker\n\n\nSep 8, 2023\n\n\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "posts/newsletter/23_08_09/index.html",
    "href": "posts/newsletter/23_08_09/index.html",
    "title": "09-08-2023",
    "section": "",
    "text": "eatGADS\nDie Funktion insertVariable() wurde in relocateVariable() umbenannt. Die Funktion erlaubt die Einsortierung einer Variable innerhalb eines GADSdat-Ojekts, nun auch ganz an den Anfang eines Datensatzes.\nEine neue Funktion, recodeNA2missing(), erlaubt es NAs (in SPSS auch Sysmis genannt) automatisch in spezifische Missing Codes umzuwandeln (z.B. -99 = \"Missing By Design\").\nDie Funktion emptyTheseVariables() erlaubt es nun, mehrere Variablen gleichzeitig zu leeren (= auf NA zu setzen), was z.B. aus Datenschutzgründen relevant sein kann.\nBesonders hervoheben möchten wir an dieser Stelle noch die Funktion fixEncoding(), die es erlaubt, automatisch Umlaute und Sonderzeichen aus Variablennamen, Variablen- und Wertelabeln, sowie Variablen an sich zu entfernen (z.B. “ü” wird zu “ue”).\nDie Dokumentation des Pakets ist nun übrigens leicht einsehbar hier zu finden.\nAlle Änderungen finden sich wie immer erst einmal in der Github-Version des Pakets."
  },
  {
    "objectID": "docs/eat packages/index.html",
    "href": "docs/eat packages/index.html",
    "title": "Overview",
    "section": "",
    "text": "see table down below and click on the links for more information on a package.\n\n\nUm die Auswertung der VERA-Pilotierungsstudien und des IQB-Bildungstrends zu vereinheitlichen und zu vereinfachen, werden eine Reihe von R-Paketen mit dem Präfix eat (“educational assessment tools”) kontinuierlich (weiter-)entwickelt. Aktuell werden folgende Pakete am IQB betreut:\n\n\n\nPaketname\nAnsprechpartner:in\nmehr Infos\n\n\n\n\neatPrep\nKaroline Sachse\nmore Info on eatPrep\n\n\neatModel\nSebastian Weirich\ntest\n\n\neatRep\nSebastian Weirich, Benjamin Becker\ntest\n\n\neatGADS\nBenjamin Becker\ntest\n\n\neatTools\nSebastian Weirich, Benjamin Becker, Karoline Sachse\ntest\n\n\neatAnalysis\nBenjamin Becker, Sebastian Weirich, Karoline Sachse\ntest\n\n\neatATA\nBenjamin Becker\ntest\n\n\neatFDZ\nBenjamin Becker\ntest\n\n\neatCodebook\nBenjamin Becker\ntest\n\n\neatRecode\nBenjamin Becker, Nicklas Hafiz\ntest\n\n\neatPlot\nNicklas Hafiz, Philipp Franikowski\ntest\n\n\n\n\n\n\n\n\nPaketname\nAnsprechparter:in\nmehr Infos zum Paket\n\n\n\n\neatPrep\nKaroline Sachse\neatPrep\n\n\neatModel\nSebastian Weirich\n-\n\n\neatRep\nSebastian Weirich , Benjamin Becker\n-\n\n\neatGADS\nBenjamin Becker\n-\n\n\neatTools\nSebastian Weirich , Benjamin Becker , Karoline Sachse\n-\n\n\neatAnalysis\nBenjamin Becker , Sebastian Weirich , Karoline Sachse\n-\n\n\neatATA\nBenjamin Becker\n-\n\n\neatFDZ\nBenjamin Becker\n-\n\n\neatCodebook\nBenjamin Becker\n-\n\n\neatRecode\nBenjamin Becker , Nicklas Hafiz\n-\n\n\neatPlot\nNicklas Hafiz , Philipp Franikowski\n-\n\n\n\n\n\n\n\n\nDetallierte Anleitungen zur Installation der R-Pakete finden sich unter: R-Pakete installieren\n\n\n\nDie meisten Teilpakete der “eat”-Familie sind nicht isoliert lauffähig, das bedeutet, ein Teilpaket ist i.d.R. auf ein anderes Teilpaket angewiesen, um lauffähig zu sein. Konkret bedeutet das:\n\n“eatTools” ist ein Paket mit Hilfsfunktionen, die von anderen Paketen benötigt werden. “eatTools” hängt nicht von anderen “eat”-Paketen ab.\n“eatPrep” benötigt “eatTools”\n“eatRep” benötigt “eatTools” und “eatGADS”\n“eatModel” benötigt “eatTools” und “eatRep” (und damit ebenfalls “eatGADS”). Das Paket greift für die Parameterschätzung optional auf das Computerprogramm Conquest oder das R-Paket “TAM” zu. Für Conquest genügt dabei die ausführbare Kommandozeilendatei (command line executable), z.B. “console_Feb2007.exe”; “TAM” wird beim Laden des Pakets mit installiert. “TAM” und Conquest basieren auf demselben statistischen Messmodell und überschneiden sich im Funktionsumfang stark.\n“eatGADS” benötigt “eatTools” und “eatDB”\n\nDie wechselseitige Abhängigkeit erstreckt sich auch auf Versionen. So sind bspw. alte Versionen von “eatRep” nicht immer kompatibel mit neuen Versionen von “eatTools” (und umgekehrt). Die jeweils aktuellen Paketversionen (siehe obenstehende Tabelle) sollten zueinander kompatibel sein. In der Regel (leider nicht immer) werden Versionskonflikte über eine Fehlermeldung ausgegeben. Es wird empfohlen, immer die jeweils aktuellen Paketversionen installiert zu haben.\nDa sich im Laufe der Paketentwicklung auch einzelne Funktionen teilweise substanziell geändert haben, können möglicherweise vergangene Analysen (bspw. aus dem Ländervergleich 2011) mit neuen Paketversionen und dem identischen Skript nicht mehr repliziert werden. In diesem Falle müsste das alte Skript entweder angepasst oder die zu dem damaligen Zeitpunkt verwendeten Paketversionen müssten wieder hergestellt werden."
  },
  {
    "objectID": "docs/eat packages/index.html#iqb-interne-r-pakete-aus-der-eat-familie",
    "href": "docs/eat packages/index.html#iqb-interne-r-pakete-aus-der-eat-familie",
    "title": "Overview",
    "section": "",
    "text": "Um die Auswertung der VERA-Pilotierungsstudien und des IQB-Bildungstrends zu vereinheitlichen und zu vereinfachen, werden eine Reihe von R-Paketen mit dem Präfix eat (“educational assessment tools”) kontinuierlich (weiter-)entwickelt. Aktuell werden folgende Pakete am IQB betreut:\n\n\n\nPaketname\nAnsprechpartner:in\nmehr Infos\n\n\n\n\neatPrep\nKaroline Sachse\nmore Info on eatPrep\n\n\neatModel\nSebastian Weirich\ntest\n\n\neatRep\nSebastian Weirich, Benjamin Becker\ntest\n\n\neatGADS\nBenjamin Becker\ntest\n\n\neatTools\nSebastian Weirich, Benjamin Becker, Karoline Sachse\ntest\n\n\neatAnalysis\nBenjamin Becker, Sebastian Weirich, Karoline Sachse\ntest\n\n\neatATA\nBenjamin Becker\ntest\n\n\neatFDZ\nBenjamin Becker\ntest\n\n\neatCodebook\nBenjamin Becker\ntest\n\n\neatRecode\nBenjamin Becker, Nicklas Hafiz\ntest\n\n\neatPlot\nNicklas Hafiz, Philipp Franikowski\ntest\n\n\n\n\n\n\n\n\nPaketname\nAnsprechparter:in\nmehr Infos zum Paket\n\n\n\n\neatPrep\nKaroline Sachse\neatPrep\n\n\neatModel\nSebastian Weirich\n-\n\n\neatRep\nSebastian Weirich , Benjamin Becker\n-\n\n\neatGADS\nBenjamin Becker\n-\n\n\neatTools\nSebastian Weirich , Benjamin Becker , Karoline Sachse\n-\n\n\neatAnalysis\nBenjamin Becker , Sebastian Weirich , Karoline Sachse\n-\n\n\neatATA\nBenjamin Becker\n-\n\n\neatFDZ\nBenjamin Becker\n-\n\n\neatCodebook\nBenjamin Becker\n-\n\n\neatRecode\nBenjamin Becker , Nicklas Hafiz\n-\n\n\neatPlot\nNicklas Hafiz , Philipp Franikowski\n-"
  },
  {
    "objectID": "docs/eat packages/index.html#installation-der-r-pakete",
    "href": "docs/eat packages/index.html#installation-der-r-pakete",
    "title": "Overview",
    "section": "",
    "text": "Detallierte Anleitungen zur Installation der R-Pakete finden sich unter: R-Pakete installieren"
  },
  {
    "objectID": "docs/eat packages/index.html#kompatibilität",
    "href": "docs/eat packages/index.html#kompatibilität",
    "title": "Overview",
    "section": "",
    "text": "Die meisten Teilpakete der “eat”-Familie sind nicht isoliert lauffähig, das bedeutet, ein Teilpaket ist i.d.R. auf ein anderes Teilpaket angewiesen, um lauffähig zu sein. Konkret bedeutet das:\n\n“eatTools” ist ein Paket mit Hilfsfunktionen, die von anderen Paketen benötigt werden. “eatTools” hängt nicht von anderen “eat”-Paketen ab.\n“eatPrep” benötigt “eatTools”\n“eatRep” benötigt “eatTools” und “eatGADS”\n“eatModel” benötigt “eatTools” und “eatRep” (und damit ebenfalls “eatGADS”). Das Paket greift für die Parameterschätzung optional auf das Computerprogramm Conquest oder das R-Paket “TAM” zu. Für Conquest genügt dabei die ausführbare Kommandozeilendatei (command line executable), z.B. “console_Feb2007.exe”; “TAM” wird beim Laden des Pakets mit installiert. “TAM” und Conquest basieren auf demselben statistischen Messmodell und überschneiden sich im Funktionsumfang stark.\n“eatGADS” benötigt “eatTools” und “eatDB”\n\nDie wechselseitige Abhängigkeit erstreckt sich auch auf Versionen. So sind bspw. alte Versionen von “eatRep” nicht immer kompatibel mit neuen Versionen von “eatTools” (und umgekehrt). Die jeweils aktuellen Paketversionen (siehe obenstehende Tabelle) sollten zueinander kompatibel sein. In der Regel (leider nicht immer) werden Versionskonflikte über eine Fehlermeldung ausgegeben. Es wird empfohlen, immer die jeweils aktuellen Paketversionen installiert zu haben.\nDa sich im Laufe der Paketentwicklung auch einzelne Funktionen teilweise substanziell geändert haben, können möglicherweise vergangene Analysen (bspw. aus dem Ländervergleich 2011) mit neuen Paketversionen und dem identischen Skript nicht mehr repliziert werden. In diesem Falle müsste das alte Skript entweder angepasst oder die zu dem damaligen Zeitpunkt verwendeten Paketversionen müssten wieder hergestellt werden."
  },
  {
    "objectID": "docs/eat packages/eatAnalysis.html",
    "href": "docs/eat packages/eatAnalysis.html",
    "title": "eatAnalysis",
    "section": "",
    "text": "eatAnalysis Info"
  },
  {
    "objectID": "docs/eat packages/eatATA.html",
    "href": "docs/eat packages/eatATA.html",
    "title": "eatATA",
    "section": "",
    "text": "eatATA Info"
  },
  {
    "objectID": "docs/eat packages/eatCodebook.html",
    "href": "docs/eat packages/eatCodebook.html",
    "title": "eatCodebook",
    "section": "",
    "text": "eatCodebook Info"
  },
  {
    "objectID": "docs/eat packages/eatFDZ.html",
    "href": "docs/eat packages/eatFDZ.html",
    "title": "eatFDZ",
    "section": "",
    "text": "eatFDZ Info"
  },
  {
    "objectID": "docs/eat packages/eatGADS.html",
    "href": "docs/eat packages/eatGADS.html",
    "title": "eatGADS",
    "section": "",
    "text": "eatGADS Info"
  },
  {
    "objectID": "docs/eat packages/eatModel.html",
    "href": "docs/eat packages/eatModel.html",
    "title": "eatModel",
    "section": "",
    "text": "eatModel Info"
  },
  {
    "objectID": "docs/eat packages/eatPlot.html",
    "href": "docs/eat packages/eatPlot.html",
    "title": "eatPlot",
    "section": "",
    "text": "eatPlot Info"
  },
  {
    "objectID": "docs/eat packages/eatPrep.html",
    "href": "docs/eat packages/eatPrep.html",
    "title": "eatPrep",
    "section": "",
    "text": "eatPrep Info\n\n\n\n\n\nAnsprechparter:in\naktuelle Version\nQuelle\n\n\n\n\nKaroline Sachse\naktuelle Version\ngithub, intern\n\n\n\n\n\n\nFunktionsbeschreibung\nAufbereitung von Datensätzen (Einlesen, Plausibilitätsprüfungen, Zusammenführen von Datensätzen, Missingbehandlung, Rekodieren, Aggregieren, Scoren und Schreiben von gelabelten SPSS-Datensätzen) unter Verwendung von in der IQB-Datenbank hinterlegten Informationen zu den Items und zum Testdesign. Diese werden mithilfe des ZKDaemon (siehe unten) aus der Datenbank extrahiert und in ein standardisiertes xlsx-Format geschrieben. Dieses xlsx-Format nutzt ‘eatPrep’, um die Informationen aus der Datenbank nach R zu übertragen.\nDokumentation: (intern)"
  },
  {
    "objectID": "docs/eat packages/eatRecode.html",
    "href": "docs/eat packages/eatRecode.html",
    "title": "eatRecode",
    "section": "",
    "text": "eatRecode Info"
  },
  {
    "objectID": "docs/eat packages/eatRep.html",
    "href": "docs/eat packages/eatRep.html",
    "title": "eatRep",
    "section": "",
    "text": "eatRep Info"
  },
  {
    "objectID": "docs/eat packages/eatTools.html",
    "href": "docs/eat packages/eatTools.html",
    "title": "eatTools",
    "section": "",
    "text": "eatTools Info"
  },
  {
    "objectID": "docs/quarto/index.html",
    "href": "docs/quarto/index.html",
    "title": "Quarto",
    "section": "",
    "text": "Quarto websites\nCreating a website with Quarto.\nA nice hands on tutorial on adding blog posts to an existing Quarto website can be found here, along with some additional tips on citations, footnotes etc."
  },
  {
    "objectID": "docs/R/index.html",
    "href": "docs/R/index.html",
    "title": "Material for learning R",
    "section": "",
    "text": "R Introduction\nAn introduction to R with hands on examples and exercises can be found in Introduction to R."
  },
  {
    "objectID": "docs/reproduce/renv.html",
    "href": "docs/reproduce/renv.html",
    "title": "The renv-Package",
    "section": "",
    "text": "Reproducibility\nProject repo for reproducibility research. Currently, we are working on making the BT21 reproducible by using the renv-Package in R.\n\n\nrenv\nThe renv-package is intended for simple project-local R dependency management. Here you’ll find a more thorough introduction.\n\n\nSetup\n\nCreate an RStudio Project in the working directory that should be made reproducible.\nIf another R-version should be used, switch to that version. On Windows, you can simply install multiple versions of R and switch between them in RStudio by going to Tools - Global Options - General. Maybe you will have to install renv for this version again.\nInitialise the project using renv::init(). This creates the basic infrastructure for the usage of renv.\n\n\nDependencies should be discovered automatically. It can take a while, if you’re doing this for the first time.\nIf you want to install specific package versions, you can use renv::intit(bare = TRUE).\n\nThis sets up the renv project without trying to find the used dependencies. Thus, you can install the specific versions manually afterwards.\n\nThe dependencies in the working directory can be obtained by renv::dependencies().\n\n\n\nIf you want specific package versions, you can use renv::install(packagename/@version-number). Local packages or packages from GitHub can be installed as well (see here).\nIn the end, packages should be installed in ./renv/library. A lockfile ./renv.lock is created, where the R version and the package versions are noted.\nNow you can work with the project. If you update dependencies, for example when you install and/or load new packages, you can save the state of the project library to the lockfile using renv::snapshot().\nIf you want to restore the state of the project library as noted in the lockfile, use renv::restore().\n\n\n\nProject usage\n\nFor maximal reproducibility, check the lockfile for the R-version before working with renv. If another R-version is documented in the lockfile, you can change the R-version before reproducing an analysis, see 2).\nAs the packages are directly installed into the project working directory, you should be able to simply work with the renv-project as saved by the last user without doing anything.\n\n\n\nNote on Package Versions\nMRAN can be used to get snapshots of R on any day back to 17.09.2014. Here, package versions on specific dates can be found, for example, when a script was finished on 06.05.22, the packages probably used can be obtained from here. Sometimes an error similar to this can occur:\nError: install of package 'tidyselect' failed [error code 1]\nIn this case it is possible to look up the package version on the respective date on MRAN and install this version manually. On 06.05.22, CRAN hosted Version 1.1.2 of tidyselect, so you install the version like so: renv::install(\"tidyselect@1.1.2\")."
  },
  {
    "objectID": "posts/r_sig/23_03_20_forloops/index.html#for-loops",
    "href": "posts/r_sig/23_03_20_forloops/index.html#for-loops",
    "title": "for-loops",
    "section": "For-loops",
    "text": "For-loops\nIn this session we talked about for-loops. Take a look here for the corresponding chapter in a workshop I’ve designed."
  },
  {
    "objectID": "posts/r_sig/23_31_07_apply/index.html",
    "href": "posts/r_sig/23_31_07_apply/index.html",
    "title": "The apply family",
    "section": "",
    "text": "I can highly recommend the according chapter in R for Data Science in case you want to dive deeper."
  },
  {
    "objectID": "posts/r_sig/23_31_07_apply/index.html#for-loops",
    "href": "posts/r_sig/23_31_07_apply/index.html#for-loops",
    "title": "The apply family",
    "section": "For-loops",
    "text": "For-loops\nIn the last SIG we talked about for-loops.\nWhile for is definitely the most flexible of the looping options, we suggest you avoid it wherever you can, for the following two reasons:\n\n\nIt is not very expressive, i.e. takes a lot of code to do what you want.\n\n\nIt permits you to write horrible code.\n\n\nLet’s consider this example:\n\nexample_list &lt;- list(\n  \"vec_1\" = c(1:10),\n  \"vec_2\" = c(100:400),\n  \"vec_3\" = c(80:97, NA)\n)\nstr(example_list)\n\nList of 3\n $ vec_1: int [1:10] 1 2 3 4 5 6 7 8 9 10\n $ vec_2: int [1:301] 100 101 102 103 104 105 106 107 108 109 ...\n $ vec_3: int [1:19] 80 81 82 83 84 85 86 87 88 89 ...\n\n\nHere we have a list consisting of three vectors. Our goal is to sum them an output the result into a new vector. We could use a for-loop to do that:\n\nvec_sum &lt;- c()\nfor(i in 1: length(example_list)){\n  vec_sum[i] &lt;- sum(example_list[[i]], na.rm = TRUE)\n}\nvec_sum\n\n[1]    55 75250  1593\n\n\nOkay, that doesn’t look that complicated. But still, we need to define an empty vector at the beginning so we can save our sums, we need to iterate from 1:length(example_list), and manually select the \\(i^{th}\\) from the input list. That is not very expressive, and can be solved a lot easier. Enter, the apply-family:"
  },
  {
    "objectID": "posts/r_sig/23_31_07_apply/index.html#the-apply-family",
    "href": "posts/r_sig/23_31_07_apply/index.html#the-apply-family",
    "title": "The apply family",
    "section": "The apply-family",
    "text": "The apply-family\nThe apply-functions apply a function to a vector, list, matrix … and also always return a vector, list matrix …, depending on the specific function. Let’s rewrite our for-loop with sapply():\n\nvec_sum &lt;- sapply(example_list, sum)\nvec_sum\n\nvec_1 vec_2 vec_3 \n   55 75250    NA \n\n\nA lot less code and easier to understand! We just go over every list element and calculate its sum.\nIf we want to add another function argument, we can do that as well:\n\nvec_sum &lt;- sapply(example_list, sum, na.rm = TRUE)\nvec_sum\n\nvec_1 vec_2 vec_3 \n   55 75250  1593 \n\n\nWe can also define our own function:\n\nvec_sum &lt;- sapply(example_list, function(x){\n  res_sum &lt;- sum(x, na.rm = TRUE)\n  print(res_sum)\n  return(res_sum)\n})\n\n[1] 55\n[1] 75250\n[1] 1593\n\n\nHere we calculate the sum of object x, and then print it.\nFinally, which makes for even nicer code, we can define the function externally, to give it a concise name:\n\nprint_sum &lt;- function(vec){\n  res_sum &lt;- sum(vec, na.rm = TRUE)\n  print(res_sum)\n  return(res_sum)\n}\n\nvec_sum &lt;- sapply(example_list, print_sum)\n\n[1] 55\n[1] 75250\n[1] 1593\n\nvec_sum\n\nvec_1 vec_2 vec_3 \n   55 75250  1593 \n\n\nDepending of the output we want, we can choose different apply-functions:\n\nsapply()\nsapply() simplifies the result, so, e.g., it will return a vector if possible:\n\nsapply(example_list, print_sum)\n\n[1] 55\n[1] 75250\n[1] 1593\n\n\nvec_1 vec_2 vec_3 \n   55 75250  1593 \n\n\n\n\nvapply()\nSimilar to sapply(), but we can pre-specify a return value, so it might be safer to use:\n\nvapply(example_list, print_sum, integer(1))\n\n[1] 55\n[1] 75250\n[1] 1593\n\n\nvec_1 vec_2 vec_3 \n   55 75250  1593 \n\n\nBecause the result is an integer vector, we don’t get an error, but if we write this:\n\nvapply(example_list, print_sum, character(1))\n\n[1] 55\n\n\nError in vapply(example_list, print_sum, character(1)): Werte müssen vom Typ 'character' sein,\nErgebnis von FUN(X[[1]]) ist aber Typ 'integer'\n\n\nThe function returns an error, because its output is an integer, and not a character vector.\n\n\nlapply()\nReturns a list:\n\nlapply(example_list, print_sum)\n\n[1] 55\n[1] 75250\n[1] 1593\n\n\n$vec_1\n[1] 55\n\n$vec_2\n[1] 75250\n\n$vec_3\n[1] 1593\n\n\n\n\n\n\n\n\nExercises\n\n\n\nWork with the iris data.frame (it is already included in Base R):\n\nExercise 1\nWrite a for-loop to determine the median of each column, if it is numeric. If not, return the column class with class(). Save the results in a character vector, so every element should be converted to character before saving it in the vector.\n\n\n\n\n\n\nCaution\n\n\n\n\n\n\nvec_median &lt;- c()\nfor(i in 1:ncol(iris)){\n  if(is.numeric(iris[, i])){\n    vec_median[i] &lt;- as.character(median(iris[, i], na.rm = TRUE))\n  } else{\n    vec_median[i] &lt;- class(iris[, i])\n  }\n}\n\nvec_median\n\n[1] \"5.8\"    \"3\"      \"4.35\"   \"1.3\"    \"factor\"\n\n\n\n\n\n\n\nExercise 2\n\nDefine the body of the for loop as its own function. This function should take a vector, and, if this vector is numeric, output the median as a character, otherwise the class of the vector.\n\n\n\n\n\n\n\nCaution\n\n\n\n\n\n\ncheck_median &lt;- function(vec){\n  if(is.numeric(vec)){\n    result &lt;- median(vec, na.rm = TRUE)\n  } else{\n    result &lt;- class(vec)\n  }\n  ## Convert to character, so our function always returns the correct type\n  result &lt;- as.character(result)\n  return(result)\n}\n\n## Check it:\ncheck_median(c(100, 1000))\n\n[1] \"550\"\n\ncheck_median(c(\"a\", \"b\"))\n\n[1] \"character\"\n\n\n\n\n\n\nUse it in the for-loop.\n\n\n\n\n\n\n\nCaution\n\n\n\n\n\n\nvec_median &lt;- c()\nfor(i in 1:ncol(iris)){\n  vec_median[i] &lt;- check_median(iris[, i])\n}\n\nvec_median\n\n[1] \"5.8\"    \"3\"      \"4.35\"   \"1.3\"    \"factor\"\n\n\n\n\n\n\n\nExercise 3\nRewrite the for-loop from Exercise 1 with functions from the apply-family, so it returns the following objects. Define the function that gets applied on every input element externally, so we have cleaner code.\n\nA vector.\n\n\n\n\n\n\n\nCaution\n\n\n\n\n\n\nsapply(iris, check_median)\n\nSepal.Length  Sepal.Width Petal.Length  Petal.Width      Species \n       \"5.8\"          \"3\"       \"4.35\"        \"1.3\"     \"factor\" \n\n\nOr, even better:\n\nvapply(iris, check_median, character(1))\n\nSepal.Length  Sepal.Width Petal.Length  Petal.Width      Species \n       \"5.8\"          \"3\"       \"4.35\"        \"1.3\"     \"factor\" \n\n\nWow, that’s pretty nice, we condensed our function to half a line by defining the function somewhere else, and not using a for-loop!\n\n\n\n\nA list.\n\n\n\n\n\n\n\nCaution\n\n\n\n\n\n\nlapply(iris, check_median)\n\n$Sepal.Length\n[1] \"5.8\"\n\n$Sepal.Width\n[1] \"3\"\n\n$Petal.Length\n[1] \"4.35\"\n\n$Petal.Width\n[1] \"1.3\"\n\n$Species\n[1] \"factor\""
  },
  {
    "objectID": "posts/r_sig/23_31_07_apply/index.html#exercise-2",
    "href": "posts/r_sig/23_31_07_apply/index.html#exercise-2",
    "title": "The apply family",
    "section": "Exercise 2",
    "text": "Exercise 2\n\nDefine the body of the for loop as its own function. This function should take a vector, and, if this vector is numeric, output the median as a character, otherwise the class of the vector.\n\n\n\n\n\n\n\nCaution\n\n\n\n\n\n\ncheck_median &lt;- function(vec){\n  if(is.numeric(vec)){\n    result &lt;- median(vec, na.rm = TRUE)\n  } else{\n    result &lt;- class(vec)\n  }\n  ## Convert to character, so our function always returns the correct type\n  result &lt;- as.character(result)\n  return(result)\n}\n\n## Check it:\ncheck_median(c(100, 1000))\n\n[1] \"550\"\n\ncheck_median(c(\"a\", \"b\"))\n\n[1] \"character\"\n\n\n\n\n\n\nUse it in the for-loop.\n\n\n\n\n\n\n\nCaution\n\n\n\n\n\n\nvec_median &lt;- c()\nfor(i in 1:ncol(iris)){\n  vec_median[i] &lt;- check_median(iris[, i])\n}\n\nvec_median\n\n[1] \"5.8\"    \"3\"      \"4.35\"   \"1.3\"    \"factor\""
  },
  {
    "objectID": "posts/r_sig/23_31_07_apply/index.html#exercise-3",
    "href": "posts/r_sig/23_31_07_apply/index.html#exercise-3",
    "title": "The apply family",
    "section": "Exercise 3",
    "text": "Exercise 3\nRewrite the for-loop from Exercise 1 with functions from the apply-family, so it returns the following objects. Define the function that gets applied on every input element externally, so we have cleaner code.\n\nA vector.\n\n\n\n\n\n\n\nCaution\n\n\n\n\n\n\nsapply(iris, check_median)\n\nSepal.Length  Sepal.Width Petal.Length  Petal.Width      Species \n       \"5.8\"          \"3\"       \"4.35\"        \"1.3\"     \"factor\" \n\n\nOr, even better:\n\nvapply(iris, check_median, character(1))\n\nSepal.Length  Sepal.Width Petal.Length  Petal.Width      Species \n       \"5.8\"          \"3\"       \"4.35\"        \"1.3\"     \"factor\" \n\n\nWow, that’s pretty nice, we condensed our function to half a line by defining the function somewhere else, and not using a for-loop!\n\n\n\n\nA list.\n\n\n\n\n\n\n\nCaution\n\n\n\n\n\n\nlapply(iris, check_median)\n\n$Sepal.Length\n[1] \"5.8\"\n\n$Sepal.Width\n[1] \"3\"\n\n$Petal.Length\n[1] \"4.35\"\n\n$Petal.Width\n[1] \"1.3\"\n\n$Species\n[1] \"factor\""
  }
]