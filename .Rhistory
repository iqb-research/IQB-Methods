where(is.numeric())),
.fns = standardize_var(),
.names = "{.col}_rank"
)
psych_stats_std <- psych_stats %>%
mutate(across(
.cols = where(is.numeric())),
.fns = standardize_var(),
.names = "{.col}_rank"
)
psych_stats_std <- psych_stats %>%
psych_stats_std <- psych_stats %>%
mutate(across(
.cols = where(is.numeric),
.fns = standardize_var(),
.names = "{.col}_rank"
))
psych_stats_std <- psych_stats %>%
mutate(
across(
.cols = where(is.numeric),
.fns = standardize_var,
.names = "{.col}_standardized"
)
)
psych_stats %>%
mutate(test = standardize_var(messy_neat))
psych_stats %>%
mutate(test = standardize_var(messy_neat))
psych_stats %>%
standardize_var(messy_neat)
psych_stats %>%
mutate(test = standardize_var(messy_neat)) %>%
str()
psych_stats %>%
standardize_var(messy_neat) %>%
str()
psych_stats %>%
standardize_var(messy_neat) %>%
mutate(psych_stats, test_col = .)
psych_stats %>%
mutate(test_col_2 = standardize_var(messy_neat))
psych_stats %>%
mutate(test_col_2 = standardize_var(. , messy_neat))
psych_stats %>%
mutate(test_col_2 = standardize_var(., messy_neat))
?across
psych_stats_std <- psych_stats %>%
mutate(
across(
.cols = where(is.numeric),
.fns = ~ standardize_var(var = .x),
.names = "{.col}_standardized"
)
)
psych_stats_std <- psych_stats %>%
mutate(
across(
.cols = where(is.numeric),
.fns = ~ standardize_var(dat = ., var = .x),
.names = "{.col}_standardized"
)
)
psych_stats_std <- psych_stats %>%
mutate(
across(
.cols = where(is.numeric),
.fns = ~ mean,
.names = "{.col}_mean"
)
)
psych_stats_std <- psych_stats %>%
mutate(
across(
.cols = where(is.numeric),
.fns = mean,
.names = "{.col}_mean"
)
)
psych_stats_std
str(mean)
?mean
standardize_var_2 <- function(vec){
(vec- mean(vec)/sd(vec))
}
psych_stats_std <- psych_stats %>%
mutate(
across(
.cols = where(is.numeric),
.fns = standardize_var_2,
.names = "{.col}_standardized"
)
)
colnames(psych_stats_std)
psych_stats_std$innocent_jaded_standardized
standardize_var_2 <- function(vec){
(vec- mean(vec))/sd(vec)
}
psych_stats_std <- psych_stats %>%
mutate(
across(
.cols = where(is.numeric),
.fns = standardize_var_2,
.names = "{.col}_standardized"
)
)
psych_stats_std$innocent_jaded_standardized
mean(psych_stats_std$innocent_jaded_standardized)
}
standardize_var_2 <- function(vec){
if(!is.numeric(vec)){stop(paste0("Please provide a numeric vector! Yours has the type '", typeof(vec), "'."))}
(vec- mean(vec))/sd(vec)
}
standardize_var_2(c(1,2,3))
standardize_var_2(c("a",2,3))
standardize_var_2 <- function(vec){
if(!is.numeric(vec)){stop(paste0("Please provide a numeric vector! Yours has the type '", typeof(vec), "'."))}
(vec- mean(vec))/sd(vec)
}
## Testing the function
standardize_var_2(c(1,2,3))
standardize_var_2(c("a",2,3))
mean(psych_stats_std$innocent_jaded_standardized)
psych_stats_std <- psych_stats %>%
mutate(
across(
.cols = where(is.numeric),
.fns = standardize_var_2,
.names = "{{.col}}_standardized"
)
)
psych_stats_std <- psych_stats %>%
mutate(
across(
.cols = where(is.numeric),
.fns = standardize_var_2,
.names = "{.col}_standardized"
)
)
mean(psych_stats_std$innocent_jaded_standardized)
psych_stats %>%
mutate("{{i}}_std" := standardized_col(., {{i}}))
for(i in colnames(psych_stats)[20:29]){
psych_stats %>%
mutate("{{i}}_std" := standardize_var(., {{i}}))
}
str(psych_stats)
colnamse(psych_stats)
colnames(psych_stats)
colnames(psych_stats)[20:29]
for(i in colnames(psych_stats)[20:29]){
psych_stats %>%
mutate("{{i}}_std" := standardize_var({{i}}))
}
for(i in colnames(psych_stats)[20:29]){
psych_stats %>%
mutate("{{i}}_std" := standardize_var_2({{i}}))
}
for(i in colnames(psych_stats)[20:29]){
psych_stats %>%
mutate("{{i}}_std" := standardize_var_2(.data[[i]]))
}
colnames(psych_stats)[20:29]
colnames(psych_stats)
for(i in colnames(psych_stats)[20:29]){
psych_stats_2 <- psych_stats %>%
mutate("{{i}}_std" := standardize_var_2(.data[[i]]))
}
str(psych_stats_2)
colnames(psych_stats_2)
for(i in colnames(psych_stats)[20:29]){
psych_stats <- psych_stats %>%
mutate("{{i}}_std" := standardize_var_2(.data[[i]]))
}
colnames(psych_stats)
for(i in colnames(psych_stats)[20:29]){
psych_stats <- psych_stats %>%
mutate("{i}_std" := standardize_var_2(.data[[i]]))
}
colnames(psych_stats)
for(i in c("Height", "Weight")){
athletes_2 <- athletes_2 %>%
mutate("{i}_char" := as.character({{i}}))
}
str(athletes_2)
athletes_2 <- athletes
for(i in c("Height", "Weight")){
athletes_2 <- athletes_2 %>%
mutate("{i}_char" := as.character({{i}}))
}
str(athletes_2)
for(i in c("Height", "Weight")){
athletes_2 <- athletes_2 %>%
mutate("{{i}}_char" := as.character({{i}}))
}
str(athletes_2)
for(i in c("Height", "Weight")){
athletes_2 <- athletes_2 %>%
mutate("{i}_char" := as.character({{i}}))
}
str(athletes_2)
athletes_2 <- athletes
for(i in c("Height", "Weight")){
athletes_2 <- athletes_2 %>%
mutate("{i}_char" := as.character({{i}}))
}
str(athletes_2)
for(i in c("Height", "Weight")){
athletes_2 <- athletes_2 %>%
mutate("{i}_char" := as.character({i}))
}
str(athletes_2)
for(i in c("Height", "Weight")){
athletes_2 <- athletes_2 %>%
mutate("{i}_char" := as.character({{i}}))
}
str(athletes_2)
athletes_2 <- athletes
for(i in c("Height", "Weight")){
athletes_2 <- athletes_2 %>%
mutate("{i}_char" := as.character({{i}}))
}
str(athletes_2)
athletes_2 <- athletes
for(i in c("Height", "Weight")){
athletes_2 <- athletes_2 %>%
mutate("{{i}}_char" := as.character({{i}}))
}
str(athletes_2)
for(i in c("Height", "Weight")){
athletes_2 <- athletes_2 %>%
mutate("{{i}}_char" := as.character(.data[[i]]))
}
str(athletes_2)
athletes_2 <- athletes
for(i in c("Height", "Weight")){
athletes_2 <- athletes_2 %>%
mutate("{{i}}_char" := as.character(.data[[i]]))
}
str(athletes_2)
athletes_2 <- athletes
athletes_2 <- athletes
for(i in c("Height", "Weight")){
athletes_2 <- athletes_2 %>%
mutate("{i}_char" := as.character(.data[[i]]))
}
str(athletes_2)
athletes_2 <- athletes
for(i in c("Height", "Weight")){
athletes_2 <- athletes_2 %>%
mutate("{i}_char" := as.character({{i}}))
}
str(athletes_2)
athletes_2 <- athletes
for(i in c("Height", "Weight")){
athletes_2 <- athletes_2 %>%
mutate({{i}} := as.character({{i}}))
}
str(athletes_2)
athletes_2 <- athletes
for(i in c("Height", "Weight")){
athletes_2 <- athletes_2 %>%
mutate({{i}} := as.character({{i}}))
}
str(athletes_2)
athletes_2 <- athletes
for(i in c("Height", "Weight")){
athletes_2 <- athletes_2 %>%
mutate("{i}_char" := as.character(.data[[i]]))
}
str(athletes_2)
## This doesn't work:
print_col <- function(dat, var){
print(dat %>% pull(var))
}
athletes %>%
print_col(Region)
## This works:
print_col <- function(dat, var){
print(dat %>% pull({{var}}))
}
athletes %>%
print_col(Region)
for(i in colnames(psych_stats)[20:29]){
psych_stats <- psych_stats %>%
mutate("{i}_std" := standardize_var_2(.data[[i]]))
}
colnames(psych_stats)
for(i in colnames(psych_stats)[20:29]){
psych_stats <- psych_stats %>%
mutate("{i}_std" := standardize_var_2(psych_stats, .data[[i]]))
}
for(i in colnames(psych_stats)[20:29]){
psych_stats <- psych_stats %>%
mutate("{i}_std" := standardize_var(psych_stats, .data[[i]]))
}
colnames(psych_stats)
# Chunk 1
source(here::here("output_hook.R"))
# Chunk 2
library(tidyverse)
athletes <- readRDS(file = here::here(  "raw_data", "athletes.rds"))
# Chunk 3
## Here we transform the Height and Weight columns to the type character:
athletes %>%
mutate(across(c(Height, Weight), as.character)) %>%
str
# Chunk 4
## And here we transform all numeric columns into character:
athletes %>%
mutate(across(where(is.numeric), as.character)) %>%
str()
# Chunk 5
standardize_column <- function(col){
(col - mean(col, na.rm = TRUE))/sd(col, na.rm = TRUE)
}
athletes %>%
mutate(across(where(is.numeric), standardize_column)) %>%
str()
# Chunk 7
athletes_2 <- athletes
for(i in c("Height", "Weight")){
athletes_2 <- athletes_2 %>%
mutate("{i}_char" := as.character(.data[[i]]))
}
str(athletes_2)
# Chunk 9
## This works:
print_col <- function(dat, var){
print(dat %>% pull({{var}}))
}
athletes %>%
print_col(Region)
# Chunk 10
athletes_2 <- athletes
for(i in c("Height", "Weight")){
athletes_2 <- athletes_2 %>%
mutate(!!sym(i) := as.character(!!sym(i)))
}
str(athletes_2)
# Chunk 11
characters <- readRDS(here::here(  "raw_data", "characters.rds"))
psych_stats <- read.csv(here::here(  "raw_data", "psych_stats.csv"), sep = ";")
# Chunk 12
standardize_var <- function(dat, var){
column <- dat %>%
pull({{var}})
column_std <- (column - mean(column)) / sd(column)
return(column_std)
}
standardized_col <- psych_stats %>% standardize_var(messy_neat)
mean(standardized_col) %>% round(5)
sd(standardized_col)
colnames(psych_stats)
for(i in colnames(psych_stats)[20:29]){
psych_stats <- psych_stats %>%
mutate("{i}_std" := standardize_var(psych_stats, .data[[i]]))
}
colnames(psych_stats)
mean(psych_stats$flexible_rigid_std)
sd(psych_stats$flexible_rigid_std)
athletes_2 <- athletes
for(i in c("Height", "Weight")){
athletes_2 <- athletes_2 %>%
mutate("{i}_char" := as.character(.[[i]]))
}
str(athletes_2)
athletes_2 <- athletes
for(i in c("Height", "Weight")){
athletes_2 <- athletes_2 %>%
mutate({{i}} := as.character(.[[i]]))
}
str(athletes_2)
str(athletes)
## This doesn't work:
print_col <- function(dat, var){
print(dat %>% pull(var))
}
athletes %>%
print_col(Region)
?across
psych_stats_std <- psych_stats %>%
mutate(
across(
.cols = where(is.numeric),
.fns = ~ standardize_var_2(psych_stats, .x),
.names = "{.col}_standardized"
)
)
3. Now build the same standardization function, but it should only take a numeric vector as input, not a whole `data.frame`.
styler:::style_active_file()
standardize_var <- function(dat, var){
column <- dat %>%
pull({{var}})
if(!is.numeric(column)){stop(paste0("Please provide a numeric vector! Yours has the type '", typeof(vec), "'."))}
column_std <- (column - mean(column)) / sd(column)
return(column_std)
}
standardized_col <- psych_stats %>%
standardize_var(messy_neat)
mean(standardized_col) %>% round(5)
sd(standardized_col)
str(athletes)
standardize_var_2(athletes, Region)
standardize_var <- function(dat, var){
column <- dat %>%
pull({{var}})
if(!is.numeric(column)){stop(paste0("Please provide a numeric vector! Yours has the type '", typeof(vec), "'."))}
column_std <- (column - mean(column)) / sd(column)
return(column_std)
}
## test the function:
standardize_var(athletes, Region)
standardize_var <- function(dat, var){
column <- dat %>%
pull({{var}})
if(!is.numeric(column)){stop(paste0("Please provide a numeric vector! Yours has the type '", typeof(column), "'."))}
column_std <- (column - mean(column)) / sd(column)
return(column_std)
}
## test the function:
standardize_var(athletes, Region)
# Chunk 1
source(here::here("output_hook.R"))
# Chunk 2
library(tidyverse)
athletes <- readRDS(file = here::here(  "raw_data", "athletes.rds"))
# Chunk 3
## Here we transform the Height and Weight columns to the type character:
athletes %>%
mutate(across(c(Height, Weight), as.character)) %>%
str
# Chunk 4
## And here we transform all numeric columns into character:
athletes %>%
mutate(across(where(is.numeric), as.character)) %>%
str()
for(i in c("Height", "Weight")){
athletes_2 <- athletes_2 %>%
mutate(i = as.character(.$i))
}
athletes_2 <- athletes_2 %>%
mutate("Height" = as.character(.$i))
athletes_2 <- athletes_2 %>%
mutate("Height" = as.character(.$"Height"))
## This throws an error:
athletes_2 <- athletes
athletes_2
athletes_2$Height
typeof(athletes_2$Height)
athletes_2 <- athletes
athletes_2 <- athletes_2 %>%
mutate("Height" = as.character(.$"Height"))
typeof(athletes_2$Height)
athletes_2 <- athletes
for(i in c("Height", "Weight")){
athletes_2 <- athletes_2 %>%
mutate(i = as.character(.$i))
}
print_col <- function(dat, var){
print(dat %>% pull(var))
}
athletes %>%
print_col(Region)
## This works:
print_col <- function(dat, var){
print(dat %>% pull({{var}}))
}
athletes %>%
print_col(Region)
athletes_2 <- athletes
for(i in c("Height", "Weight")){
athletes_2 <- athletes_2 %>%
mutate({{i}} := as.character({{i}}))
}
str(athletes_2)
athletes_2 <- athletes
str(athletes_2)
for(i in c("Height", "Weight")){
athletes_2 <- athletes_2 %>%
mutate({{i}} := as.character({{i}}))
}
for(i in c("Height", "Weight")){
athletes_2 <- athletes_2 %>%
mutate({{i}} := as.character({{i}}))
}
str(athletes_2)
library(tidyverse)
athletes <- readRDS(file = here::here(  "raw_data", "athletes.rds"))
best_by_sport <- athletes %>%
## Get all gold medalists
filter(Medal == "Gold") %>%
## Group them by sport and region
group_by(Sport, Region) %>%
## count the number of medals each country has per sport category
count(Medal) %>%
## Now only group by sport, so we can extract the maximum medal row by sport, and not by sport and country
group_by(Sport) %>%
## Extract the country with the most medals
slice(which.max(n))
head(best_by_sport)
nrow(best_by_sport)
world_coordinates <- readRDS(file = here::here("raw_data", "world_coordinates.rds"))
medal_counts <- athletes %>%
filter(Medal == "Gold") %>%
group_by(Region) %>%
count(Medal)
medal_countries <- world_coordinates %>%
rename("Region" = region) %>%
left_join(medal_counts)
quarto::quarto_use_template("wjschne/apaquarto")
quarto::quarto_use_template("wjschne/apaquarto")
