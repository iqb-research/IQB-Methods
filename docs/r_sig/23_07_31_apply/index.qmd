---
title: "The apply family"
description: "R-SIG 31.07.2023"
author: 
  - name: Nicklas Hafiz
  - affiliation: PhD student at the IQB, Methods team
date: 07-31-2023
categories: [R, loops]
---

I can highly recommend the according chapter in [R for Data Science](https://r4ds.had.co.nz/iteration.html#iteration) in case you want to dive deeper. 

## For-loops
In the [last SIG](../23_03_20_forloops/index.qmd) we talked about [for-loops](https://nickhaf.github.io/r_tutorial/qmd/loops/loops.html).  
While for is definitely the most flexible of the looping options, we suggest you avoid it wherever you can, for the following two reasons:

- 1. It is not very expressive, i.e. takes a lot of code to do what you want.
- 2. It permits you to write horrible code.

Let's consider this example:

```{r}
example_list <- list(
  "vec_1" = c(1:10),
  "vec_2" = c(100:400),
  "vec_3" = c(80:97, NA)
)
str(example_list)
```

Here we have a list consisting of three vectors. Our goal is to sum them an output the result into a new vector. We could use a for-loop to do that:

```{r}
vec_sum <- c()
for(i in 1: length(example_list)){
  vec_sum[i] <- sum(example_list[[i]], na.rm = TRUE)
}
vec_sum
```

Okay, that doesn't look that complicated. But still, we need to define an empty vector at the beginning so we can save our sums, we need to iterate from `1:length(example_list)`, and manually select the $i^{th}$ from the input list. That is not very expressive, and can be solved a lot easier. Enter, the apply-family: 

## The apply-family
The apply-functions *apply* a function to a vector, list, matrix ... and also always return a vector, list matrix ..., depending on the specific function. Let's rewrite our for-loop with `sapply()`:

```{r}
vec_sum <- sapply(example_list, sum)
vec_sum
```
A lot less code and easier to understand! We just go over every list element and calculate its sum. 

If we want to add another function argument, we can do that as well: 

```{r}
vec_sum <- sapply(example_list, sum, na.rm = TRUE)
vec_sum
```

We can also [define our own function](https://nickhaf.github.io/r_tutorial/qmd/functions/functions.html):

```{r}
vec_sum <- sapply(example_list, function(x){
  res_sum <- sum(x, na.rm = TRUE)
  print(res_sum)
  return(res_sum)
})
```

Here we calculate the sum of object `x`, and then print it.

Finally, which makes for even nicer code, we can define the function externally, to give it a concise name:

```{r}
print_sum <- function(vec){
  res_sum <- sum(vec, na.rm = TRUE)
  print(res_sum)
  return(res_sum)
}

vec_sum <- sapply(example_list, print_sum)
vec_sum
```

Depending of the output we want, we can choose different apply-functions:


### sapply()
`sapply()` simplifies the result, so, e.g., it will return a vector if possible:
```{r}
sapply(example_list, print_sum)
```


### vapply()
Similar to `sapply()`, but we can pre-specify a return value, so it might be safer to use:
```{r}
vapply(example_list, print_sum, integer(1))
```
Because the result is an integer vector, we don't get an error, but if we write this:
```{r, error=TRUE}
vapply(example_list, print_sum, character(1))
```
The function returns an error, because its output is an integer, and not a character vector.  

### lapply()
Returns a list:
```{r}
lapply(example_list, print_sum)
```

::: {.callout-note}
## Exercises
Work with the `iris` data.frame (it is already included in Base R):

### Exercise 1
Write a for-loop to determine the median of each column, if it is numeric. If not, return the column class with `class()`. Save the results in a character vector, so every element should be converted to character before saving it in the vector. 

::: {.callout-caution collapse="true"}
```{r}
vec_median <- c()
for(i in 1:ncol(iris)){
  if(is.numeric(iris[, i])){
    vec_median[i] <- as.character(median(iris[, i], na.rm = TRUE))
  } else{
    vec_median[i] <- class(iris[, i])
  }
}

vec_median
```

:::

## Exercise 2

1. Define the body of the for loop as its own [function](https://nickhaf.github.io/r_tutorial/qmd/functions/functions.html). This function should take a vector, and, if this vector is numeric, output the median as a character, otherwise the class of the vector. 

::: {.callout-caution collapse="true"}
```{r}
check_median <- function(vec){
  if(is.numeric(vec)){
    result <- median(vec, na.rm = TRUE)
  } else{
    result <- class(vec)
  }
  ## Convert to character, so our function always returns the correct type
  result <- as.character(result)
  return(result)
}

## Check it:
check_median(c(100, 1000))
check_median(c("a", "b"))
```

:::

2. Use it in the for-loop.

::: {.callout-caution collapse="true"}

```{r}
vec_median <- c()
for(i in 1:ncol(iris)){
  vec_median[i] <- check_median(iris[, i])
}

vec_median
```

:::

## Exercise 3
Rewrite the for-loop from Exercise 1 with functions from the apply-family, so it returns the following objects. Define the function that gets applied on every input element externally, so we have cleaner code. 

1. A vector.

::: {.callout-caution collapse="true"}
```{r}
sapply(iris, check_median)
```

Or, even better:

```{r}
vapply(iris, check_median, character(1))
```

Wow, that's pretty nice, we condensed our function to half a line by defining the function somewhere else, and not using a for-loop!
:::

2. A list.

::: {.callout-caution collapse="true"}
```{r}
lapply(iris, check_median)
```
:::

:::

[^1]: Taken from [R for Data Science](https://r4ds.had.co.nz/iteration.html#iteration).