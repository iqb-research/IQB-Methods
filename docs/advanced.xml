<?xml version="1.0" encoding="UTF-8"?>
<rss  xmlns:atom="http://www.w3.org/2005/Atom" 
      xmlns:media="http://search.yahoo.com/mrss/" 
      xmlns:content="http://purl.org/rss/1.0/modules/content/" 
      xmlns:dc="http://purl.org/dc/elements/1.1/" 
      version="2.0">
<channel>
<title>IQB Methods Team</title>
<link>https://iqb-research.github.io/IQB-Methods/docs/advanced.html</link>
<atom:link href="https://iqb-research.github.io/IQB-Methods/docs/advanced.xml" rel="self" type="application/rss+xml"/>
<description></description>
<generator>quarto-1.6.40</generator>
<lastBuildDate>Mon, 25 Nov 2024 00:00:00 GMT</lastBuildDate>
<item>
  <title>GitHub Copilot in R-Studio</title>
  <dc:creator>Nicklas Hafiz</dc:creator>
  <link>https://iqb-research.github.io/IQB-Methods/docs/git/copilot/copilot.html</link>
  <description><![CDATA[ 




<p>GitHub Copilot is an AI pair programmer that offers autocomplete-style suggestions as you code. It is possible to integrate GitHub Copilot into R-Studio to speed up annoying coding tasks and get suggestions for code snippets.</p>
<p><img src="https://iqb-research.github.io/IQB-Methods/docs/git/copilot/astronaut.jpg" class="img-fluid"><sup>1</sup></p>
<section id="setup" class="level2">
<h2 class="anchored" data-anchor-id="setup">Setup</h2>
<p>To make the Copilot available in RStudio, you either need to have a <a href="https://docs.github.com/en/billing/managing-billing-for-your-products/managing-billing-for-github-copilot/about-billing-for-github-copilot">subscription to GitHub Copilot</a>, or (recommended) a <a href="https://github.com/education">GitHub Education</a> account. It is free for students and faculty members. To get GitHub Education, you might need to upload a certificate showing that you are either a student, or affiliated with an university. For IQB-Members, it might be enough to upload a confirmation of your employment as researcher at the IQB, which you could request at IQB-Personal.<br>
After obtaining some sort of confirmation, you can follow <a href="https://docs.posit.co/ide/user/ide/guide/tools/copilot.html">this guide</a> or <a href="https://tilburg.ai/2023/12/github-copilot-for-r/">this guide</a> to connect GitHub Copilot with RStudio.</p>
</section>
<section id="usage" class="level2">
<h2 class="anchored" data-anchor-id="usage">Usage</h2>
<p>After installation, Copilot will make code suggestions, which you can accept by pressing <code>Tab</code>. <code>Enter/Return</code> will ignore the suggestion. If you want to give Copilot some additional instructions, you can just write them into a comment over the line you want the code suggestions in:</p>
<p><img src="https://iqb-research.github.io/IQB-Methods/docs/git/copilot/copilot_example.png" class="img-fluid"></p>
<p>Generally, the suggestions work best for smaller, compartimentalized problems.</p>


</section>


<div id="quarto-appendix" class="default"><section id="footnotes" class="footnotes footnotes-end-of-document"><h2 class="anchored quarto-appendix-heading">Footnotes</h2>

<ol>
<li id="fn1"><p>Image by <a href="https://unsplash.com/de/@nasa?utm_content=creditCopyText&amp;utm_medium=referral&amp;utm_source=unsplash">NASA</a> on <a href="https://unsplash.com/de/fotos/buzz-aldrin-Qu3xLeochLc?utm_content=creditCopyText&amp;utm_medium=referral&amp;utm_source=unsplash">Unsplash</a>.↩︎</p></li>
</ol>
</section></div> ]]></description>
  <category>R</category>
  <category>git</category>
  <category>tutorial</category>
  <category>intro</category>
  <guid>https://iqb-research.github.io/IQB-Methods/docs/git/copilot/copilot.html</guid>
  <pubDate>Mon, 25 Nov 2024 00:00:00 GMT</pubDate>
  <media:content url="https://iqb-research.github.io/IQB-Methods/docs/git/copilot/astronaut.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Reproducible manuscripts with Git</title>
  <dc:creator>Nicklas Hafiz</dc:creator>
  <link>https://iqb-research.github.io/IQB-Methods/docs/r_sig/24_09_09_quarto_git/</link>
  <description><![CDATA[ 




<p><img src="https://iqb-research.github.io/IQB-Methods/docs/r_sig/24_09_09_quarto_git/manuscript.jpg" class="img-fluid"><sup>1</sup></p>
<section id="motivation" class="level1">
<h1>Motivation</h1>
<p>We have already talked about <a href="https://iqb-research.github.io/IQB-Methods/docs/r_sig/24_07_15_quarto_1/">reproducible manuscripts with Quarto</a>. Now, one big plus of writing in a markdown language is that it is very easy to use with a version control systems like Git, enabling us to leverage the many advantages of version control.</p>
</section>
<section id="git" class="level1">
<h1>Git</h1>
<p>Git is a version control system. Some advantages:</p>
<ul>
<li><strong>History</strong>: You can see the history of your project, who did what and when. Changes in the project can be easily tracked.</li>
<li><strong>Collaboration</strong>: You can easily work together with others on the same project.</li>
<li><strong>Backup</strong>: Your project lies online, so you don’t have to worry about backing it up.</li>
</ul>
<p>Mainly it is used for working on code. However, markdown files are also text files, and can therefore be easily version controlled with Git. For this text I assume you are already kind of proficient in working with <a href="https://github.com/">GitHub</a>. If not, you can take a look at this <a href="https://docs.github.com/en/get-started/start-your-journey/hello-world">Getting Started Guide</a>.</p>
<div class="callout callout-style-default callout-tip callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Tip
</div>
</div>
<div class="callout-body-container callout-body">
<p>To make your project truly reproducible, you might want to also use <a href="https://iqb-research.github.io/IQB-Methods/docs/r_sig/23_11_06_renv/">renv</a>.<br>
If you want to dive even deeper into reproducible workflows, take a look at <span class="citation" data-cites="peikert2021reproducible">Peikert and Brandmaier (2021)</span>.</p>
</div>
</div>
</section>
<section id="quarto-git" class="level1">
<h1>Quarto + Git</h1>
<p>Generally, there isn’t much new stuff here, if you already work with GitHub. You set up your repo and track your R and Quarto files with Git. In light of reproducibility, this is as transparent as we can get. If we use GitHub throughout the whole project, and make the project public, everyone can track what we have done, which decisions we made and why.<br>
We can use Issues to discuss certain points with coauthors and can use Pull Requests and Reviews to discuss changes in the manuscript or analysis.</p>
</section>
<section id="github-actions" class="level1">
<h1>GitHub Actions</h1>
<p>It is considered bad practice to commit rendered documents like PDF or HTML to GitHub. Instead, build them with GitHub Actions. This way, it is always clear what the current version is, and how your code relates to the built output document. GitHub Actions are a way to automate your workflow. You can set up a workflow that runs every time you push to your repository. This can be used to check your code, run tests, or even build your manuscript. The setup is a bit more complex, the complete documentation can be found <a href="https://quarto.org/docs/publishing/github-pages.html">here</a>.<br>
In this section, I’ll present one possible workflow.</p>
<div class="callout callout-style-default callout-warning callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Warning
</div>
</div>
<div class="callout-body-container callout-body">
<p>Even if your repository is private, publishing a document like shown in this workflow will make it public, so in theory everyone can see it.</p>
</div>
</div>
<section id="renv" class="level3">
<h3 class="anchored" data-anchor-id="renv">1. <code>renv</code></h3>
<p>First, you have to <a href="https://iqb-research.github.io/IQB-Methods/docs/r_sig/23_11_06_renv/">setup <code>renv</code></a>.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1">renv<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">init</span>()</span></code></pre></div>
</div>
<p>This will create a <code>.LOCK</code> file containing the package versions and a folder in which your project specific packages are saved.</p>
</section>
<section id="render" class="level3">
<h3 class="anchored" data-anchor-id="render">2. render</h3>
<p>Now you can render your quarto project once, using the Terminal (not the Console):</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb2-1">quarto render</span></code></pre></div>
</div>
<p>Commit and push your changes!</p>
<div class="{callout-tip}">
<p>Don’t commit your output file, like html. You can exclude it from appearing in your git-interface by adding <code>*.html</code> to your <code>.gitignore</code> file.</p>
</div>
</section>
<section id="gh-pages-branch" class="level3">
<h3 class="anchored" data-anchor-id="gh-pages-branch">3. gh-pages branch</h3>
<p>After that, you have to set up a <code>gh-pages</code> branch (make sure you have commited all changes before building the branch), again in the Terminal:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb3-1">git checkout <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">--</span>orphan gh<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>pages</span>
<span id="cb3-2">git reset <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">--</span>hard <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># make sure all changes are committed before running this!</span></span>
<span id="cb3-3">git commit <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">--</span>allow<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>empty <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>m <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Initialising gh-pages branch"</span></span>
<span id="cb3-4">git push origin gh<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>pages</span></code></pre></div>
</div>
<p>Your published content will be build from this branch. You don’t have to touch it after setting it up, the Actions we’ll build will take care of that.</p>
</section>
<section id="publish" class="level3">
<h3 class="anchored" data-anchor-id="publish">4. publish</h3>
<p>Finally, you can publish your quarto document:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb4-1">quarto publish gh<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>pages documentname.qmd</span></code></pre></div>
</div>
</section>
<section id="action" class="level3">
<h3 class="anchored" data-anchor-id="action">5. Action</h3>
<p>To trigger this publishing everytime you push to your main branch on GitHub, build a new directory in your project called <code>.github/workflows</code>. Into this directory, you put a file <code>publish.yml</code> and fill it with the following code:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb5-1">on<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span></span>
<span id="cb5-2">  workflow_dispatch<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span></span>
<span id="cb5-3">  push<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span></span>
<span id="cb5-4">    branches<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> main</span>
<span id="cb5-5"></span>
<span id="cb5-6">name<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> Quarto Publish</span>
<span id="cb5-7"></span>
<span id="cb5-8">jobs<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span></span>
<span id="cb5-9">  build<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>deploy<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span></span>
<span id="cb5-10">    runs<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>on<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> ubuntu<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>latest</span>
<span id="cb5-11">    permissions<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span></span>
<span id="cb5-12">      contents<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> write</span>
<span id="cb5-13">    steps<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span></span>
<span id="cb5-14">      <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> name<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> Check out repository</span>
<span id="cb5-15">        uses<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> actions<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>checkout<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span>v4</span>
<span id="cb5-16"></span>
<span id="cb5-17">      <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> name<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> Set up Quarto</span>
<span id="cb5-18">        uses<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> quarto<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>dev<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>quarto<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>actions<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>setup<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span>v2</span>
<span id="cb5-19"></span>
<span id="cb5-20">      <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> name<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> Install R</span>
<span id="cb5-21">        uses<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> r<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>lib<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>actions<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>setup<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>r<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span>v2</span>
<span id="cb5-22">        with<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span></span>
<span id="cb5-23">          r<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>version<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'4.4.1'</span></span>
<span id="cb5-24"></span>
<span id="cb5-25">      <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> name<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> Install R Dependencies</span>
<span id="cb5-26">        uses<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> r<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>lib<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>actions<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>setup<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>renv<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span>v2</span>
<span id="cb5-27">        with<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span></span>
<span id="cb5-28">          cache<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>version<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb5-29"></span>
<span id="cb5-30">      <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> name<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> Render and Publish</span>
<span id="cb5-31">        uses<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> quarto<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>dev<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>quarto<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>actions<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>publish<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span>v2</span>
<span id="cb5-32">        with<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span></span>
<span id="cb5-33">          target<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> gh<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>pages</span>
<span id="cb5-34">        env<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span></span>
<span id="cb5-35">          GITHUB_TOKEN<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">$</span>{{ secrets.GITHUB_TOKEN }}</span></code></pre></div>
</div>
<div class="callout callout-style-default callout-important callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Important
</div>
</div>
<div class="callout-body-container callout-body">
<p>You need to check the Read and write permissions box under Workflow permissions in the Actions section of your repository Settings.</p>
</div>
</div>
<div class="callout callout-style-default callout-tip callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Tip
</div>
</div>
<div class="callout-body-container callout-body">
<p>You can find the link to the published site under <code>Settings - Pages</code>. Copy it to put in the <code>About</code> field of your repo.</p>
</div>
</div>
<div class="callout callout-style-default callout-note callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Note
</div>
</div>
<div class="callout-body-container callout-body">
<p>There are <a href="https://quarto.org/docs/publishing/github-pages.html#github-action">other workflows</a> available as well.</p>
</div>
</div>
</section>
</section>
<section id="caveats" class="level1">
<h1>Caveats</h1>
<p>Some words of warning: Everything is online. So you should be careful to upload sensitive data. Also, the fact that the whole process would be visible to everyone might feel weird. Still, even if you leave the Repo on private, it still is a great thing!</p>
</section>
<section id="exercises" class="level1">
<h1>Exercises</h1>
<ol type="1">
<li>Set up a GitHub repository for the quarto project you worked on in the last sessions. If you don’t upload your stuff to a cloud.</li>
<li>Make up some small Issue that you can write into the Issue section on GitHub.</li>
<li>Fix this Issue on <strong>a new branch</strong>. Commit the changes, using <code>closes #Issuenumber</code> in the commit message, push everything and open a pull request.</li>
<li>Assign someone from the group as reviewer.</li>
<li>Review a pull-request assigned to you.</li>
<li>Setup a actions workflow that automatically renders your document.</li>
</ol>



</section>


<div id="quarto-appendix" class="default"><section class="quarto-appendix-contents" id="quarto-bibliography"><h2 class="anchored quarto-appendix-heading">References</h2><div id="refs" class="references csl-bib-body hanging-indent" data-entry-spacing="0">
<div id="ref-peikert2021reproducible" class="csl-entry">
Peikert, Aaron, and Andreas M Brandmaier. 2021. <span>“A Reproducible Data Analysis Workflow with r Markdown, Git, Make, and Docker.”</span> <em>Quantitative and Computational Methods in Behavioral Sciences</em>, 1–27.
</div>
</div></section><section id="footnotes" class="footnotes footnotes-end-of-document"><h2 class="anchored quarto-appendix-heading">Footnotes</h2>

<ol>
<li id="fn1"><p>Image by <a href="https://unsplash.com/de/@towfiqu999999?utm_content=creditCopyText&amp;utm_medium=referral&amp;utm_source=unsplash">Towfiqu barbhuiya</a> on <a href="https://unsplash.com/de/fotos/eine-nahaufnahme-eines-papierstapels-auf-einem-tisch-KKHs1e2yiwc?utm_content=creditCopyText&amp;utm_medium=referral&amp;utm_source=unsplash">Unsplash</a>.↩︎</p></li>
</ol>
</section></div> ]]></description>
  <category>R</category>
  <category>quarto</category>
  <category>R-SIG</category>
  <category>Git</category>
  <category>intro</category>
  <category>tutorial</category>
  <guid>https://iqb-research.github.io/IQB-Methods/docs/r_sig/24_09_09_quarto_git/</guid>
  <pubDate>Mon, 09 Sep 2024 00:00:00 GMT</pubDate>
  <media:content url="https://iqb-research.github.io/IQB-Methods/docs/r_sig/24_09_09_quarto_git/manuscript.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Plotting with ggplot2</title>
  <dc:creator>Nicklas Hafiz</dc:creator>
  <link>https://iqb-research.github.io/IQB-Methods/docs/r_sig/24_06_03_ggplot2/</link>
  <description><![CDATA[ 




<p><img src="https://iqb-research.github.io/IQB-Methods/docs/r_sig/24_06_03_ggplot2/plotting.jpg" class="img-fluid"><sup>1</sup></p>
<p>A ggplot2-tutorial I’ve created can be found <a href="https://nickhaf.github.io/r_tutorial/qmd/plotting/plotting.html">here</a>.</p>




<div id="quarto-appendix" class="default"><section id="footnotes" class="footnotes footnotes-end-of-document"><h2 class="anchored quarto-appendix-heading">Footnotes</h2>

<ol>
<li id="fn1"><p>Image by <a href="https://www.bing.com/images/create/a-scientist-moulding-a-plot-of-data-by-hand/1-66587edc1e8f43589fdc865731f162f6?id=Pw2nhqhO37f3lXFK0VoYZQ%3D%3D&amp;view=detailv2&amp;idpp=genimg&amp;idpclose=1&amp;thid=OIG2.1wR3ZVvAOQy3uyh0hWET&amp;form=SYDBIC">Bing Copilot</a>.↩︎</p></li>
</ol>
</section></div> ]]></description>
  <category>R</category>
  <category>tidyverse</category>
  <category>plots</category>
  <category>R-SIG</category>
  <category>tutorial</category>
  <guid>https://iqb-research.github.io/IQB-Methods/docs/r_sig/24_06_03_ggplot2/</guid>
  <pubDate>Mon, 03 Jun 2024 00:00:00 GMT</pubDate>
  <media:content url="https://iqb-research.github.io/IQB-Methods/docs/r_sig/24_06_03_ggplot2/plotting.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Column-wise operations in the tidyverse</title>
  <dc:creator>Nicklas Hafiz</dc:creator>
  <link>https://iqb-research.github.io/IQB-Methods/docs/r_sig/24_04_08_tidyverse_column_wise/</link>
  <description><![CDATA[ 




<p><img src="https://iqb-research.github.io/IQB-Methods/docs/r_sig/24_04_08_tidyverse_column_wise/columns.jpg" class="img-fluid"><sup>1</sup></p>
<div class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(tidyverse)</span>
<span id="cb1-2"></span>
<span id="cb1-3">athletes <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">readRDS</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">file =</span> here<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">here</span>(  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"raw_data"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"athletes.rds"</span>))</span></code></pre></div>
</div>
<section id="column-wise-operations-with-across" class="level2">
<h2 class="anchored" data-anchor-id="column-wise-operations-with-across">Column-wise operations with <code>across()</code></h2>
<p>Instead of looping over columns with a <a href="https://iqb-research.github.io/IQB-Methods/posts/r_sig/23_03_20_forloops/">for-loop</a>, we can also use <code>across()</code> in combination with other <code>tidyverse</code> functions.</p>
<div class="callout callout-style-default callout-note callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
<code>mutate_...()</code>
</div>
</div>
<div class="callout-body-container callout-body">
<p>The functions <code>mutate_all()</code>, <code>mutate_at()</code>, and <code>mutate_if()</code> do the same, but are superseded. This means they still work, but the <code>tidyverse</code> team recommends to use <code>across()</code> instead.</p>
</div>
</div>
<p>Across can take column names and a function that should be applied to the selected columns:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb2-1"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## Here we transform the Height and Weight columns to the type character:</span></span>
<span id="cb2-2">athletes <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb2-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mutate</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">across</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(Height, Weight), as.character)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb2-4">  str</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>'data.frame':   270767 obs. of  16 variables:
 $ NOC   : chr  "AFG" "AFG" "AFG" "AFG" ...
 $ ID    : int  132181 87371 44977 502 109153 29626 1076 121376 80210 87374 ...
 $ Name  : chr  "Najam Yahya" "Ahmad Jahan Nuristani" "Mohammad Halilula" "Ahmad Shah Abouwi" ...
 $ Sex   : chr  "M" "M" "M" "M" ...
 $ Age   : int  NA NA 28 NA 24 28 28 NA NA NA ...
 $ Height: chr  NA NA "163" NA ...
 $ Weight: chr  NA NA "57" NA ...
 $ Team  : chr  "Afghanistan" "Afghanistan" "Afghanistan" "Afghanistan" ...
 $ Games : chr  "1956 Summer" "1948 Summer" "1980 Summer" "1956 Summer" ...
 $ Year  : int  1956 1948 1980 1956 1964 1960 1936 1956 1972 1956 ...
 $ Season: chr  "Summer" "Summer" "Summer" "Summer" ...
 $ City  : chr  "Melbourne" "London" "Moskva" "Melbourne" ...
 $ Sport : chr  "Hockey" "Hockey" "Wrestling" "Hockey" ...
 $ Event : chr  "Hockey Men's Hockey" "Hockey Men's Hockey" "Wrestling Men's Bantamweight, Freestyle" "Hockey Men's Hockey" ...
 $ Medal : chr  NA NA NA NA ...
 $ Region: chr  "Afghanistan" "Afghanistan" "Afghanistan" "Afghanistan" ...</code></pre>
</div>
</div>
<p>But it is also possible to select columns based on a selection function:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb4-1"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## And here we transform all numeric columns into character:</span></span>
<span id="cb4-2">athletes <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb4-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mutate</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">across</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">where</span>(is.numeric), as.character)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb4-4">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">str</span>()</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>'data.frame':   270767 obs. of  16 variables:
 $ NOC   : chr  "AFG" "AFG" "AFG" "AFG" ...
 $ ID    : chr  "132181" "87371" "44977" "502" ...
 $ Name  : chr  "Najam Yahya" "Ahmad Jahan Nuristani" "Mohammad Halilula" "Ahmad Shah Abouwi" ...
 $ Sex   : chr  "M" "M" "M" "M" ...
 $ Age   : chr  NA NA "28" NA ...
 $ Height: chr  NA NA "163" NA ...
 $ Weight: chr  NA NA "57" NA ...
 $ Team  : chr  "Afghanistan" "Afghanistan" "Afghanistan" "Afghanistan" ...
 $ Games : chr  "1956 Summer" "1948 Summer" "1980 Summer" "1956 Summer" ...
 $ Year  : chr  "1956" "1948" "1980" "1956" ...
 $ Season: chr  "Summer" "Summer" "Summer" "Summer" ...
 $ City  : chr  "Melbourne" "London" "Moskva" "Melbourne" ...
 $ Sport : chr  "Hockey" "Hockey" "Wrestling" "Hockey" ...
 $ Event : chr  "Hockey Men's Hockey" "Hockey Men's Hockey" "Wrestling Men's Bantamweight, Freestyle" "Hockey Men's Hockey" ...
 $ Medal : chr  NA NA NA NA ...
 $ Region: chr  "Afghanistan" "Afghanistan" "Afghanistan" "Afghanistan" ...</code></pre>
</div>
</div>
<p>We can also specify our own transformation function.</p>
</section>
<section id="using-tidyverse-functions-in-loops" class="level2">
<h2 class="anchored" data-anchor-id="using-tidyverse-functions-in-loops">Using tidyverse functions in loops</h2>
<p>When using tidyverse syntax within a loop, we might run into the problem that the tidyverse function can’t deal with our iteration counter like we are used to:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb6-1"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## Trying to transform the Height and Weight column to character using a for-loop.</span></span>
<span id="cb6-2"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## Note: Normally across() would be a better option in this case (and most of the time anyways).</span></span>
<span id="cb6-3"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##       But sometimes a good old fashioned for-loop might be easier to programm to get the job done, </span></span>
<span id="cb6-4"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##       in which case one should keep some specifics in mind: </span></span>
<span id="cb6-5"></span>
<span id="cb6-6"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## This throws an error: </span></span>
<span id="cb6-7">athletes_2 <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> athletes</span>
<span id="cb6-8"></span>
<span id="cb6-9"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span>(i <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Height"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Weight"</span>)){</span>
<span id="cb6-10">  athletes_2 <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> athletes_2 <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb6-11">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mutate</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">i =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">as.character</span>(.<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>i))</span>
<span id="cb6-12">}</span></code></pre></div>
</div>
<p>This doesn’t work, because we are trying to program a function using <a href="https://dplyr.tidyverse.org/articles/programming.html#data-masking">data masking</a>. Data masking just means that we don’t have to type <code>athletes$Height</code> in a <code>tidyverse</code> function, but simply <code>Height</code>, because the function knows this refers to a column in the current data.frame.</p>
<section id="loops" class="level3">
<h3 class="anchored" data-anchor-id="loops">Loops</h3>
<ul>
<li>In the case of <code>mutate()</code>, we have to use <strong>dynamic dots</strong>, which need to used if we want to create names programmatically: <code>:=</code> instead of <code>=</code>.</li>
<li>We need to <strong>embrace</strong> the changeable variable (either in a function or a loop) like this: <code>{var}</code>.</li>
<li>In <code>mutate()</code>, we can also simply write <code>"{var}_..."</code> to paste together a new column name.</li>
<li>If we just want to extract data, we can use the <code>.data</code> pronoun with <code>[[</code> (<a href="https://dplyr.tidyverse.org/articles/programming.html#indirection">see here</a>). <code>.data</code> helps to clear up ambiguity, it makes clear you want to extract a column from the current data.frame. This is something different than the <code>.</code>, which can be read like “data up to this point” and references the data that gets put into the function where the <code>.</code> is used. The <code>.</code> actually stands for a data.frame, while <code>.data</code> is used for symbol evaluation.</li>
</ul>
<div class="cell">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb7-1">athletes_2 <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> athletes</span>
<span id="cb7-2"></span>
<span id="cb7-3"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span>(i <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Height"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Weight"</span>)){</span>
<span id="cb7-4">  athletes_2 <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> athletes_2 <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb7-5">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mutate</span>({{i}} <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">as.character</span>(.[[i]]))</span>
<span id="cb7-6">}</span>
<span id="cb7-7"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">str</span>(athletes_2)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>'data.frame':   270767 obs. of  16 variables:
 $ NOC   : chr  "AFG" "AFG" "AFG" "AFG" ...
 $ ID    : int  132181 87371 44977 502 109153 29626 1076 121376 80210 87374 ...
 $ Name  : chr  "Najam Yahya" "Ahmad Jahan Nuristani" "Mohammad Halilula" "Ahmad Shah Abouwi" ...
 $ Sex   : chr  "M" "M" "M" "M" ...
 $ Age   : int  NA NA 28 NA 24 28 28 NA NA NA ...
 $ Height: chr  NA NA "163" NA ...
 $ Weight: chr  NA NA "57" NA ...
 $ Team  : chr  "Afghanistan" "Afghanistan" "Afghanistan" "Afghanistan" ...
 $ Games : chr  "1956 Summer" "1948 Summer" "1980 Summer" "1956 Summer" ...
 $ Year  : int  1956 1948 1980 1956 1964 1960 1936 1956 1972 1956 ...
 $ Season: chr  "Summer" "Summer" "Summer" "Summer" ...
 $ City  : chr  "Melbourne" "London" "Moskva" "Melbourne" ...
 $ Sport : chr  "Hockey" "Hockey" "Wrestling" "Hockey" ...
 $ Event : chr  "Hockey Men's Hockey" "Hockey Men's Hockey" "Wrestling Men's Bantamweight, Freestyle" "Hockey Men's Hockey" ...
 $ Medal : chr  NA NA NA NA ...
 $ Region: chr  "Afghanistan" "Afghanistan" "Afghanistan" "Afghanistan" ...</code></pre>
</div>
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb9-1"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span>(i <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Height"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Weight"</span>)){</span>
<span id="cb9-2">  athletes_2 <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> athletes_2 <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb9-3">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mutate</span>({{i}} <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">as.character</span>({{i}}))</span>
<span id="cb9-4">}</span>
<span id="cb9-5"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">str</span>(athletes_2)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>'data.frame':   270767 obs. of  16 variables:
 $ NOC   : chr  "AFG" "AFG" "AFG" "AFG" ...
 $ ID    : int  132181 87371 44977 502 109153 29626 1076 121376 80210 87374 ...
 $ Name  : chr  "Najam Yahya" "Ahmad Jahan Nuristani" "Mohammad Halilula" "Ahmad Shah Abouwi" ...
 $ Sex   : chr  "M" "M" "M" "M" ...
 $ Age   : int  NA NA 28 NA 24 28 28 NA NA NA ...
 $ Height: chr  "Height" "Height" "Height" "Height" ...
 $ Weight: chr  "Weight" "Weight" "Weight" "Weight" ...
 $ Team  : chr  "Afghanistan" "Afghanistan" "Afghanistan" "Afghanistan" ...
 $ Games : chr  "1956 Summer" "1948 Summer" "1980 Summer" "1956 Summer" ...
 $ Year  : int  1956 1948 1980 1956 1964 1960 1936 1956 1972 1956 ...
 $ Season: chr  "Summer" "Summer" "Summer" "Summer" ...
 $ City  : chr  "Melbourne" "London" "Moskva" "Melbourne" ...
 $ Sport : chr  "Hockey" "Hockey" "Wrestling" "Hockey" ...
 $ Event : chr  "Hockey Men's Hockey" "Hockey Men's Hockey" "Wrestling Men's Bantamweight, Freestyle" "Hockey Men's Hockey" ...
 $ Medal : chr  NA NA NA NA ...
 $ Region: chr  "Afghanistan" "Afghanistan" "Afghanistan" "Afghanistan" ...</code></pre>
</div>
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb11-1"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## With programmatically built new columns: </span></span>
<span id="cb11-2">athletes_3 <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> athletes</span>
<span id="cb11-3"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span>(i <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Height"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Weight"</span>)){</span>
<span id="cb11-4">  athletes_3 <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> athletes_3 <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb11-5">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mutate</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"{i}_char"</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">as.character</span>(.[[i]]))</span>
<span id="cb11-6">}</span>
<span id="cb11-7"></span>
<span id="cb11-8"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">str</span>(athletes_3)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>'data.frame':   270767 obs. of  18 variables:
 $ NOC        : chr  "AFG" "AFG" "AFG" "AFG" ...
 $ ID         : int  132181 87371 44977 502 109153 29626 1076 121376 80210 87374 ...
 $ Name       : chr  "Najam Yahya" "Ahmad Jahan Nuristani" "Mohammad Halilula" "Ahmad Shah Abouwi" ...
 $ Sex        : chr  "M" "M" "M" "M" ...
 $ Age        : int  NA NA 28 NA 24 28 28 NA NA NA ...
 $ Height     : int  NA NA 163 NA NA 168 NA NA NA NA ...
 $ Weight     : num  NA NA 57 NA 74 73 NA NA 57 NA ...
 $ Team       : chr  "Afghanistan" "Afghanistan" "Afghanistan" "Afghanistan" ...
 $ Games      : chr  "1956 Summer" "1948 Summer" "1980 Summer" "1956 Summer" ...
 $ Year       : int  1956 1948 1980 1956 1964 1960 1936 1956 1972 1956 ...
 $ Season     : chr  "Summer" "Summer" "Summer" "Summer" ...
 $ City       : chr  "Melbourne" "London" "Moskva" "Melbourne" ...
 $ Sport      : chr  "Hockey" "Hockey" "Wrestling" "Hockey" ...
 $ Event      : chr  "Hockey Men's Hockey" "Hockey Men's Hockey" "Wrestling Men's Bantamweight, Freestyle" "Hockey Men's Hockey" ...
 $ Medal      : chr  NA NA NA NA ...
 $ Region     : chr  "Afghanistan" "Afghanistan" "Afghanistan" "Afghanistan" ...
 $ Height_char: chr  NA NA "163" NA ...
 $ Weight_char: chr  NA NA "57" NA ...</code></pre>
</div>
</div>
<p>Beware of overwriting the same data.frame you put into <code>mutate()</code>! Otherwise the resulting data.frame will always be overwritten by the old one that always gets put into the function.</p>
</section>
<section id="functions" class="level3">
<h3 class="anchored" data-anchor-id="functions">Functions</h3>
<p>This also applies if we want to define a function with column names as arguments, using <code>tidyverse</code> inside. Here we need to embrace our variable as well to make it data masking friendly:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb13-1"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## This doesn't work:</span></span>
<span id="cb13-2">print_col <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(dat, var){</span>
<span id="cb13-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(dat <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">pull</span>(var))</span>
<span id="cb13-4">}</span>
<span id="cb13-5"></span>
<span id="cb13-6">athletes <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb13-7">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print_col</span>(Region)</span></code></pre></div>
</div>
<div class="cell" data-output.lines="4">
<div class="sourceCode cell-code" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb14-1"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## This works:</span></span>
<span id="cb14-2">print_col <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(dat, var){</span>
<span id="cb14-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(dat <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">pull</span>({{var}}))</span>
<span id="cb14-4">}</span>
<span id="cb14-5"></span>
<span id="cb14-6">athletes <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb14-7">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print_col</span>(Region)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>    [1] "Afghanistan"                      "Afghanistan"                     
    [3] "Afghanistan"                      "Afghanistan"                     
    [5] "Afghanistan"                      "Afghanistan"                     
    [7] "Afghanistan"                      "Afghanistan"                     
...</code></pre>
</div>
</div>
<div class="callout callout-style-default callout-note callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
!!sym()
</div>
</div>
<div class="callout-body-container callout-body">
<p>In previous SIG-Sessions we have used <code>!!sym()</code> for this, which also works, but is more to remember:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb16" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb16-1">athletes_2 <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> athletes</span>
<span id="cb16-2"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span>(i <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Height"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Weight"</span>)){</span>
<span id="cb16-3">  athletes_2 <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> athletes_2 <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb16-4">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mutate</span>(<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!!</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sym</span>(i) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">as.character</span>(<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!!</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sym</span>(i)))</span>
<span id="cb16-5">}</span>
<span id="cb16-6"></span>
<span id="cb16-7"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">str</span>(athletes_2)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>'data.frame':   270767 obs. of  16 variables:
 $ NOC   : chr  "AFG" "AFG" "AFG" "AFG" ...
 $ ID    : int  132181 87371 44977 502 109153 29626 1076 121376 80210 87374 ...
 $ Name  : chr  "Najam Yahya" "Ahmad Jahan Nuristani" "Mohammad Halilula" "Ahmad Shah Abouwi" ...
 $ Sex   : chr  "M" "M" "M" "M" ...
 $ Age   : int  NA NA 28 NA 24 28 28 NA NA NA ...
 $ Height: chr  NA NA "163" NA ...
 $ Weight: chr  NA NA "57" NA ...
 $ Team  : chr  "Afghanistan" "Afghanistan" "Afghanistan" "Afghanistan" ...
 $ Games : chr  "1956 Summer" "1948 Summer" "1980 Summer" "1956 Summer" ...
 $ Year  : int  1956 1948 1980 1956 1964 1960 1936 1956 1972 1956 ...
 $ Season: chr  "Summer" "Summer" "Summer" "Summer" ...
 $ City  : chr  "Melbourne" "London" "Moskva" "Melbourne" ...
 $ Sport : chr  "Hockey" "Hockey" "Wrestling" "Hockey" ...
 $ Event : chr  "Hockey Men's Hockey" "Hockey Men's Hockey" "Wrestling Men's Bantamweight, Freestyle" "Hockey Men's Hockey" ...
 $ Medal : chr  NA NA NA NA ...
 $ Region: chr  "Afghanistan" "Afghanistan" "Afghanistan" "Afghanistan" ...</code></pre>
</div>
</div>
</div>
</div>
</section>
</section>
<section id="exercise" class="level1">
<h1>Exercise</h1>
<ol start="0" type="1">
<li>Read the <code>characters.rds</code> and the <code>psych_stats.csv</code> into R (download <a href="https://github.com/iqb-research/IQB-Methods/tree/main/raw_data">here</a>).</li>
</ol>
<div class="callout callout-style-default callout-caution callout-titled">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-3-contents" aria-controls="callout-3" aria-expanded="false" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Solution
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-3" class="callout-3-contents callout-collapse collapse">
<div class="callout-body-container callout-body">
<div class="cell">
<div class="sourceCode cell-code" id="cb18" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb18-1">characters <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">readRDS</span>(here<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">here</span>(  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"raw_data"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"characters.rds"</span>))</span>
<span id="cb18-2">psych_stats <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">read.csv</span>(here<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">here</span>(  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"raw_data"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"psych_stats.csv"</span>), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">sep =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">";"</span>)</span></code></pre></div>
</div>
</div>
</div>
</div>
<ol type="1">
<li>Write a function that can standardize a numeric column. It should take a <code>data.frame</code> and a column as arguments. To standardize, the function should subtract the mean of the column from each of its raw values and then divide each difference by the standard deviation of the original variable.<br>
Finally, it should return a numeric vector containing the standardized values. Make the function work with data masking!</li>
</ol>
<div class="callout callout-style-default callout-tip callout-titled">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-4-contents" aria-controls="callout-4" aria-expanded="false" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Hint
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-4" class="callout-4-contents callout-collapse collapse">
<div class="callout-body-container callout-body">
<p>To extract a single column as a vector to do some operations on it you can use <code>pull()</code>.</p>
</div>
</div>
</div>
<div class="callout callout-style-default callout-caution callout-titled">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-5-contents" aria-controls="callout-5" aria-expanded="false" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Solution
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-5" class="callout-5-contents callout-collapse collapse">
<div class="callout-body-container callout-body">
<div class="cell">
<div class="sourceCode cell-code" id="cb19" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb19-1">standardize_var <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(dat, var){</span>
<span id="cb19-2">  column <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> dat <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb19-3">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">pull</span>({{var}}) </span>
<span id="cb19-4">  </span>
<span id="cb19-5"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span>(<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">is.numeric</span>(column)){<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">stop</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">paste0</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Please provide a numeric column! Yours has the type '"</span>, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">typeof</span>(column), <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"'."</span>))}</span>
<span id="cb19-6"></span>
<span id="cb19-7">  column_std <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> (column <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mean</span>(column, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">na.rm =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sd</span>(column, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">na.rm =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># automatically remove NAs</span></span>
<span id="cb19-8">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">return</span>(column_std)</span>
<span id="cb19-9">}</span>
<span id="cb19-10"></span>
<span id="cb19-11"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## test the function:</span></span>
<span id="cb19-12"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># standardize_var(athletes, Region)</span></span>
<span id="cb19-13"></span>
<span id="cb19-14">standardized_col <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> psych_stats <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span> </span>
<span id="cb19-15">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">standardize_var</span>(messy_neat)</span>
<span id="cb19-16"></span>
<span id="cb19-17"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mean</span>(standardized_col) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">round</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] 0</code></pre>
</div>
<div class="sourceCode cell-code" id="cb21" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb21-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sd</span>(standardized_col)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] 1</code></pre>
</div>
</div>
</div>
</div>
</div>
<ol start="2" type="1">
<li>Apply this function within a for-loop on 10 columns of your choice. Add the standardized columns as new columns to your data frame.</li>
</ol>
<div class="callout callout-style-default callout-tip callout-titled">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-6-contents" aria-controls="callout-6" aria-expanded="false" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Hint
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-6" class="callout-6-contents callout-collapse collapse">
<div class="callout-body-container callout-body">
<p>Always overwrite the same data.frame you put into the function.</p>
<p><code>for(i in c("col_1", "col_2"){dat_new &lt;- dat %&gt;% ...}</code> won’t work because we always overwrite the dat_new object, where our new column was added, with our old data.frame.</p>
</div>
</div>
</div>
<div class="callout callout-style-default callout-caution callout-titled">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-7-contents" aria-controls="callout-7" aria-expanded="false" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Solution
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-7" class="callout-7-contents callout-collapse collapse">
<div class="callout-body-container callout-body">
<div class="cell">
<div class="sourceCode cell-code" id="cb23" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb23-1"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span>(i <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">colnames</span>(psych_stats)[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">20</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">29</span>]){</span>
<span id="cb23-2"> psych_stats <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> psych_stats <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb23-3">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mutate</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"{i}_std"</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">standardize_var</span>(., .data[[i]])) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># The point means we use the object called before the last pipe, in this case psych_stats. </span></span>
<span id="cb23-4">}</span>
<span id="cb23-5"></span>
<span id="cb23-6"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mean</span>(psych_stats<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>flexible_rigid_std)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] -1.582513e-16</code></pre>
</div>
<div class="sourceCode cell-code" id="cb25" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb25-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sd</span>(psych_stats<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>flexible_rigid_std)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] 1</code></pre>
</div>
</div>
</div>
</div>
</div>
<ol start="3" type="1">
<li>Now build the same standardization function, but it should only take a numeric vector as input, not a whole <code>data.frame</code>.</li>
</ol>
<div class="callout callout-style-default callout-caution callout-titled">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-8-contents" aria-controls="callout-8" aria-expanded="false" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Solution
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-8" class="callout-8-contents callout-collapse collapse">
<div class="callout-body-container callout-body">
<div class="cell">
<div class="sourceCode cell-code" id="cb27" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb27-1">standardize_var_2 <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(vec){</span>
<span id="cb27-2">  <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span>(<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">is.numeric</span>(vec)){<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">stop</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">paste0</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Please provide a numeric vector! Yours has the type '"</span>, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">typeof</span>(vec), <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"'."</span>))}</span>
<span id="cb27-3">  (vec<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mean</span>(vec))<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sd</span>(vec)</span>
<span id="cb27-4">}</span>
<span id="cb27-5"></span>
<span id="cb27-6"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## Testing the function</span></span>
<span id="cb27-7"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">standardize_var_2</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] -1  0  1</code></pre>
</div>
<div class="sourceCode cell-code" id="cb29" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb29-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># standardize_var_2(c("a",2,3))</span></span></code></pre></div>
</div>
</div>
</div>
</div>
<ol start="4" type="1">
<li>Apply one of your two standardization functions onto the psych_stats <code>data.frame</code> using <code>across()</code>. The standardized columns should be added to the data frame. Think carefully about which one should be used in this context and why.<br>
This exercise is a little bit harder, so use google, StackOverflow and the help function <code>?</code> within R.</li>
</ol>
<div class="callout callout-style-default callout-tip callout-titled">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-9-contents" aria-controls="callout-9" aria-expanded="false" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Hint
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-9" class="callout-9-contents callout-collapse collapse">
<div class="callout-body-container callout-body">
<ul>
<li>Look at the documentation of <code>across()</code> to see how you can give new column names into <code>mutate()</code> from within <code>across()</code>.</li>
<li>It’s probably easier to use a function that only takes a vector, and not the whole data.frame within <code>across()</code>.</li>
</ul>
</div>
</div>
</div>
<div class="callout callout-style-default callout-caution callout-titled">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-10-contents" aria-controls="callout-10" aria-expanded="false" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Solution
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-10" class="callout-10-contents callout-collapse collapse">
<div class="callout-body-container callout-body">
<div class="cell">
<div class="sourceCode cell-code" id="cb30" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb30-1">psych_stats_std <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> psych_stats <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb30-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mutate</span>(</span>
<span id="cb30-3">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">across</span>(</span>
<span id="cb30-4">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.cols =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">where</span>(is.numeric), </span>
<span id="cb30-5">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.fns =</span> standardize_var_2, </span>
<span id="cb30-6">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.names =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"{.col}_standardized"</span></span>
<span id="cb30-7">    )</span>
<span id="cb30-8">  )</span>
<span id="cb30-9"></span>
<span id="cb30-10"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mean</span>(psych_stats_std<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>innocent_jaded_standardized)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] 4.127042e-18</code></pre>
</div>
</div>
<p>I used the function that only takes a vector: using it within <code>across()</code> made it possible to just provide the function, and not having to deal with the extra data argument. The only argument in my function is the vector, and it is more naturally for across to handle, because it already applies a function to a column, so the extraction is not necessary.</p>
</div>
</div>
</div>


</section>


<div id="quarto-appendix" class="default"><section id="footnotes" class="footnotes footnotes-end-of-document"><h2 class="anchored quarto-appendix-heading">Footnotes</h2>

<ol>
<li id="fn1"><p>Image by <a href="https://unsplash.com/de/@1188low?utm_content=creditCopyText&amp;utm_medium=referral&amp;utm_source=unsplash">Darryl Low</a> on <a href="https://unsplash.com/de/fotos/graustufenfoto-eines-gebaudes-pXqZs5TG2HU?utm_content=creditCopyText&amp;utm_medium=referral&amp;utm_source=unsplash">Unsplash</a>.↩︎</p></li>
</ol>
</section></div> ]]></description>
  <category>R</category>
  <category>tidyverse</category>
  <category>loops</category>
  <category>R-SIG</category>
  <category>tutorial</category>
  <guid>https://iqb-research.github.io/IQB-Methods/docs/r_sig/24_04_08_tidyverse_column_wise/</guid>
  <pubDate>Mon, 08 Apr 2024 00:00:00 GMT</pubDate>
  <media:content url="https://iqb-research.github.io/IQB-Methods/docs/r_sig/24_04_08_tidyverse_column_wise/columns.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Data wrangling in the tidyverse</title>
  <dc:creator>Nicklas Hafiz</dc:creator>
  <link>https://iqb-research.github.io/IQB-Methods/docs/r_sig/24_03_25_tidyverse_wrangling/</link>
  <description><![CDATA[ 




<p><img src="https://iqb-research.github.io/IQB-Methods/docs/r_sig/24_03_25_tidyverse_wrangling/data_wrangling.jpg" class="img-fluid"><sup>1</sup></p>
<div class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(tidyverse)</span></code></pre></div>
</div>
<p>The <a href="https://iqb-research.github.io/IQB-Methods/posts/r_sig/24_01_26_tidyverse_intro/"><code>tidyverse</code></a> provides many tools for wrangling data, from selecting, sorting or renaming columns over filtering specific rows according to complex conditions to building new columns according to values in other columns. Let’s take a look at the most important ones. We will use the (<code>athletes</code>)[] dataset in the examples:</p>
<div class="callout callout-style-default callout-caution no-icon callout-titled">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-1-contents" aria-controls="callout-1" aria-expanded="false" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon no-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Load the data
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-1" class="callout-1-contents callout-collapse collapse">
<div class="callout-body-container callout-body">
<div class="cell">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb2-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># install.packages("tidyverse")</span></span>
<span id="cb2-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># install.packages("here")</span></span>
<span id="cb2-3"></span>
<span id="cb2-4"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(tidyverse)</span>
<span id="cb2-5"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(here)</span>
<span id="cb2-6"></span>
<span id="cb2-7">athletes <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">readRDS</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">file =</span> here<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">here</span>(  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"raw_data"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"athletes.rds"</span>))</span></code></pre></div>
</div>
</div>
</div>
</div>
<section id="select-columns" class="level2" data-number="1">
<h2 data-number="1" class="anchored" data-anchor-id="select-columns"><span class="header-section-number">1</span> <code>select()</code> columns</h2>
<p>Selecting columns from a data.frame is pretty straight forward:</p>
<div class="cell" data-output.lines="4">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb3-1">athletes <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb3-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">select</span>(Year, Sport)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>      Year                     Sport
1     1956                    Hockey
2     1948                    Hockey
3     1980                 Wrestling
...</code></pre>
</div>
</div>
<p>Note how we don’t have to put the columns in <code>""</code>, and how we can simply seperate them by <code>,</code>.<br>
<code>select()</code> becomes especially useful when combined with <a href="https://dplyr.tidyverse.org/reference/select.html">selection helpers</a>:</p>
<div class="cell" data-output.lines="4">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb5-1"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## Select all columns starting with a Se</span></span>
<span id="cb5-2">athletes <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb5-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">select</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">starts_with</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Se"</span>))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>      Sex Season
1       M Summer
2       M Summer
3       M Summer
...</code></pre>
</div>
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb7-1"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## Select all columns containing the letters "ea"</span></span>
<span id="cb7-2">athletes <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb7-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">select</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">contains</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"ea"</span>))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>                                         Team Year Season
1                                 Afghanistan 1956 Summer
2                                 Afghanistan 1948 Summer
3                                 Afghanistan 1980 Summer
...</code></pre>
</div>
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb9-1"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## Or, we can combine them:</span></span>
<span id="cb9-2">athletes <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span> </span>
<span id="cb9-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">select</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ends_with</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"t"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">contains</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"igh"</span>))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>      Height Weight
1         NA     NA
2         NA     NA
3        163   57.0
...</code></pre>
</div>
</div>
</section>
<section id="filter-rows" class="level2" data-number="2">
<h2 data-number="2" class="anchored" data-anchor-id="filter-rows"><span class="header-section-number">2</span> <code>filter()</code> rows</h2>
<p>We can use <code>filter</code> to subset rows according to their values in specific columns:</p>
<div class="cell" data-output.lines="4">
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb11-1"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## All Volleyballers</span></span>
<span id="cb11-2">athletes <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb11-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">filter</span>(Sport <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Volleyball"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb11-4">  str</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>'data.frame':   3404 obs. of  16 variables:
 $ NOC   : chr  "ALG" "ALG" "ALG" "ALG" ...
 $ ID    : int  122168 73155 47642 74593 74593 117675 249 249 90117 90100 ...
 $ Name  : chr  "Faza Tsabet" "Narimne Madani" "Sehryne Hennaoui" "Nawal Mansouri" ...
...</code></pre>
</div>
<div class="sourceCode cell-code" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb13-1"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## All Judoka between 50 and 100 kg</span></span>
<span id="cb13-2">athletes <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb13-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">filter</span>(Sport <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Judo"</span>, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">between</span>(Weight, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">50</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb13-4">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">str</span>()</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>'data.frame':   2916 obs. of  16 variables:
 $ NOC   : chr  "AFG" "AFG" "AFG" "ALB" ...
 $ ID    : int  99303 33817 7050 58601 121096 9593 78883 5689 78882 9593 ...
 $ Name  : chr  "Friba Razayee" "Ajmal Faizzada" "Mohammad Tawfiq Bakhshi" "Majlinda Kelmendi" ...
...</code></pre>
</div>
<div class="sourceCode cell-code" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb15-1"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## All athletes with missing height</span></span>
<span id="cb15-2">athletes <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb15-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">filter</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">is.na</span>(Height)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb15-4">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">str</span>()</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>'data.frame':   60083 obs. of  16 variables:
 $ NOC   : chr  "AFG" "AFG" "AFG" "AFG" ...
 $ ID    : int  132181 87371 502 109153 1076 121376 80210 87374 6323 59344 ...
 $ Name  : chr  "Najam Yahya" "Ahmad Jahan Nuristani" "Ahmad Shah Abouwi" "Shakar Khan Shakar" ...
...</code></pre>
</div>
</div>
<p>Note how we can just write our conditions without connecting them with <code>&amp;</code> (<code>filter()</code> does that automatically for us). Also, we don’t have to put the column names into ““, because <code>filter()</code> knows that this are column names of the athletes data frame, which makes coding a bit more pleasant. Also, missing rows are automatically removed, which makes sense in many cases!</p>
</section>
<section id="pivot_...-longwide-format" class="level2" data-number="3">
<h2 data-number="3" class="anchored" data-anchor-id="pivot_...-longwide-format"><span class="header-section-number">3</span> <code>pivot_...()</code> long/wide format</h2>
<p>To reshape data.frames from long to wide or wide to long format we can use <code>pivot_wider()</code> and <code>pivot_longer()</code>:</p>
<p>Let’s define a simpler data.frame first:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb17-1">inhabitants_wide <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">data.frame</span>(</span>
<span id="cb17-2">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">country =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"China"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"India"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"USA"</span>),</span>
<span id="cb17-3">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">inhabitants_2021 =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1425893465</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1407563842</span>, <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NA</span>),</span>
<span id="cb17-4">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">inhabitants_2022 =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1425857720</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1420939232</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">338903174</span>)</span>
<span id="cb17-5">)</span>
<span id="cb17-6">inhabitants_wide</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>  country inhabitants_2021 inhabitants_2022
1   China       1425893465       1425857720
2   India       1407563842       1420939232
3     USA               NA        338903174</code></pre>
</div>
</div>
<div class="cell">
<div class="sourceCode cell-code" id="cb19" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb19-1">inhabitants_long <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> inhabitants_wide <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb19-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">pivot_longer</span>(</span>
<span id="cb19-3">    <span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## Select the columns we want to reshape:</span></span>
<span id="cb19-4">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">cols =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">starts_with</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"inhabitants"</span>),</span>
<span id="cb19-5">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">names_prefix =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"inhabitants_"</span>,</span>
<span id="cb19-6">    <span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## Define a new column where the column names will go to:</span></span>
<span id="cb19-7">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">names_to =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"year"</span>,</span>
<span id="cb19-8">    <span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## Define a new column where the values will go to:</span></span>
<span id="cb19-9">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">values_to =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"inhabitants"</span></span>
<span id="cb19-10">  )</span>
<span id="cb19-11"></span>
<span id="cb19-12"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">head</span>(inhabitants_long)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 6 × 3
  country year  inhabitants
  &lt;chr&gt;   &lt;chr&gt;       &lt;dbl&gt;
1 China   2021   1425893465
2 China   2022   1425857720
3 India   2021   1407563842
4 India   2022   1420939232
5 USA     2021           NA
6 USA     2022    338903174</code></pre>
</div>
</div>
<p>In other cases, it might happen that multiple variables are put into the same column, together with an identifier column:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb21" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb21-1">inhabitants_long_2</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>  country         variable      value
1   China             area    9597000
2   China inhabitants_2022 1425857720
3   India             area    3287000
4   India inhabitants_2022 1420939232
5     USA             area    9834000
6     USA inhabitants_2022  338903174</code></pre>
</div>
</div>
<p>In that case it can make sense to spread the the distinct variables into two columns:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb23" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb23-1">inhabitants_wide_2 <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> inhabitants_long_2 <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb23-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">pivot_wider</span>(</span>
<span id="cb23-3">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">id_cols =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"country"</span>,</span>
<span id="cb23-4">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">names_from =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"variable"</span>,</span>
<span id="cb23-5">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">values_from =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"value"</span></span>
<span id="cb23-6">  )</span>
<span id="cb23-7"></span>
<span id="cb23-8">inhabitants_wide_2</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 3 × 3
  country    area inhabitants_2022
  &lt;chr&gt;     &lt;dbl&gt;            &lt;dbl&gt;
1 China   9597000       1425857720
2 India   3287000       1420939232
3 USA     9834000        338903174</code></pre>
</div>
</div>
</section>
<section id="mutate" class="level2" data-number="4">
<h2 data-number="4" class="anchored" data-anchor-id="mutate"><span class="header-section-number">4</span> <code>mutate()</code></h2>
<p>With <code>mutate()</code> we can add new columns to a data.frame or edit existing ones:</p>
<div class="cell" data-output.lines="4">
<div class="sourceCode cell-code" id="cb25" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb25-1">athletes <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb25-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mutate</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">new_column =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NA</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb25-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mutate</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">ID =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">as.character</span>(ID)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb25-4">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">str</span>()</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>'data.frame':   270767 obs. of  17 variables:
 $ NOC       : chr  "AFG" "AFG" "AFG" "AFG" ...
 $ ID        : chr  "132181" "87371" "44977" "502" ...
 $ Name      : chr  "Najam Yahya" "Ahmad Jahan Nuristani" "Mohammad Halilula" "Ahmad Shah Abouwi" ...
...</code></pre>
</div>
</div>
<section id="useful-helpers" class="level3" data-number="4.1">
<h3 data-number="4.1" class="anchored" data-anchor-id="useful-helpers"><span class="header-section-number">4.1</span> Useful helpers</h3>
<p>Like <code>select()</code>, <code>mutate()</code> really starts to shine when helper functions are added. For example we can fill a new column according to values in other columns:</p>
<div class="cell" data-output.lines="10">
<div class="sourceCode cell-code" id="cb27" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb27-1"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## Build a new column indicating if this is a contact sport athlete</span></span>
<span id="cb27-2">athletes <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb27-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mutate</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">contact_sport =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ifelse</span>(Sport <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%in%</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Wrestling"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Boxing"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Judo"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Rugby"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Taekwondo"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Rugby Sevens"</span>), </span>
<span id="cb27-4">                                <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">yes =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>, </span>
<span id="cb27-5">                                <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">no =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">FALSE</span>)</span>
<span id="cb27-6">         ) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb27-7">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">select</span>(Name, Sport, contact_sport) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb27-8">  str</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>'data.frame':   270767 obs. of  3 variables:
 $ Name         : chr  "Najam Yahya" "Ahmad Jahan Nuristani" "Mohammad Halilula" "Ahmad Shah Abouwi" ...
 $ Sport        : chr  "Hockey" "Hockey" "Wrestling" "Hockey" ...
 $ contact_sport: logi  FALSE FALSE TRUE FALSE TRUE TRUE ...</code></pre>
</div>
</div>
<p>If we have to connect multiple <code>ifelse()</code> functions, it’s better to use <code>dplyrs</code> <a href="https://iqb-research.github.io/IQB-Methods/posts/r_sig/23_12_18_case_when/"><code>case_when()</code></a>:</p>
<div class="cell" data-output.lines="10">
<div class="sourceCode cell-code" id="cb29" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb29-1"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## This gets complicated pretty quickly:</span></span>
<span id="cb29-2">athletes <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb29-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mutate</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">judo_weightclass =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">if_else</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">str_detect</span>(Event, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Middleweight"</span>), </span>
<span id="cb29-4">                                  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">true =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Middleweight"</span>, </span>
<span id="cb29-5">                                  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">false =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">if_else</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">str_detect</span>(Event, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Half-Lightweight"</span>), </span>
<span id="cb29-6">                                        <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">true =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Half-Lightweight"</span>, </span>
<span id="cb29-7">                                        <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">false =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">if_else</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">str_detect</span>(Event, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Lightweight"</span>), </span>
<span id="cb29-8">                                                    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">true =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Lightweight"</span>, </span>
<span id="cb29-9">                                                    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">false =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NA</span>)</span>
<span id="cb29-10">                                        ) </span>
<span id="cb29-11">                                        )</span>
<span id="cb29-12">                                  ) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span> </span>
<span id="cb29-13">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">filter</span>(Sport <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Judo"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb29-14">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">select</span>(Name, Sport, Event, judo_weightclass) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb29-15">  str</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>'data.frame':   3799 obs. of  4 variables:
 $ Name            : chr  "Friba Razayee" "Ajmal Faizzada" "Mohammad Tawfiq Bakhshi" "Sergio Murray" ...
 $ Sport           : chr  "Judo" "Judo" "Judo" "Judo" ...
 $ Event           : chr  "Judo Women's Middleweight" "Judo Men's Half-Lightweight" "Judo Men's Half-Heavyweight" "Judo Men's Middleweight" ...
 $ judo_weightclass: chr  "Middleweight" "Half-Lightweight" NA "Middleweight" ...</code></pre>
</div>
<div class="sourceCode cell-code" id="cb31" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb31-1"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## so do this instead:</span></span>
<span id="cb31-2">athletes <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb31-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mutate</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">judo_weightclass =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">case_when</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">str_detect</span>(Event, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Middleweight"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Middleweight"</span>, </span>
<span id="cb31-4">                                      <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">str_detect</span>(Event, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Half-Lightweight"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Half-Lightweight"</span>, </span>
<span id="cb31-5">                                      <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">str_detect</span>(Event, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Lightweight"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Lightweight"</span>,</span>
<span id="cb31-6">                                      <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"other Weightclass"</span> )</span>
<span id="cb31-7">         ) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb31-8">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">filter</span>(Sport <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Judo"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb31-9">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">select</span>(Name, Sport, Event, judo_weightclass) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb31-10">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">str</span>()</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>'data.frame':   3799 obs. of  4 variables:
 $ Name            : chr  "Friba Razayee" "Ajmal Faizzada" "Mohammad Tawfiq Bakhshi" "Sergio Murray" ...
 $ Sport           : chr  "Judo" "Judo" "Judo" "Judo" ...
 $ Event           : chr  "Judo Women's Middleweight" "Judo Men's Half-Lightweight" "Judo Men's Half-Heavyweight" "Judo Men's Middleweight" ...
 $ judo_weightclass: chr  "Middleweight" "Half-Lightweight" "other Weightclass" "Middleweight" ...</code></pre>
</div>
</div>
</section>
<section id="programmatically-using-mutate" class="level3" data-number="4.2">
<h3 data-number="4.2" class="anchored" data-anchor-id="programmatically-using-mutate"><span class="header-section-number">4.2</span> Programmatically using <code>mutate()</code></h3>
<p>If you want to use <code>mutate()</code> programmatically within a loop or a function, take a look at <a href="https://iqb-research.github.io/IQB-Methods/posts/r_sig/24_04_08_tidyverse_column_wise/">Column-wise operations in the tidyverse</a></p>
</section>
</section>
<section id="replace_..." class="level2" data-number="5">
<h2 data-number="5" class="anchored" data-anchor-id="replace_..."><span class="header-section-number">5</span> <code>..._replace_...()</code></h2>
<p>We can easily replace values in a column using <code>str_replace()</code> or <code>replace_na()</code>:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb33" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb33-1">athletes <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb33-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mutate</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">Sex =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">str_replace</span>(Sex, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"M"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Male"</span>)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb33-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mutate</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">Sex =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">str_replace</span>(Sex, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"F"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Female"</span>)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb33-4">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mutate</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">Height =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">replace_na</span>(Height, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb33-5">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">select</span>(Sex, Height) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb33-6">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">str</span>()</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>'data.frame':   270767 obs. of  2 variables:
 $ Sex   : chr  "Male" "Male" "Male" "Male" ...
 $ Height: int  0 0 163 0 0 168 0 0 0 0 ...</code></pre>
</div>
</div>
</section>
<section id="group_by" class="level2" data-number="6">
<h2 data-number="6" class="anchored" data-anchor-id="group_by"><span class="header-section-number">6</span> <code>group_by()</code></h2>
<p>We can group our data by values in specific columns and perform some sort of operation on the groups. If we wanted to know the number of medals each region has won, we can for example group by region and medal type, and then <code>count()</code> (another <code>tidyverse</code> function) the number of cases in each group:</p>
<div class="cell" data-output.lines="10">
<div class="sourceCode cell-code" id="cb35" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb35-1">medal_counts <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> athletes <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb35-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">group_by</span>(Region, Medal) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb35-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">count</span>(Medal) </span>
<span id="cb35-4"></span>
<span id="cb35-5">medal_counts</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 533 × 3
# Groups:   Region, Medal [533]
   Region         Medal      n
   &lt;chr&gt;          &lt;chr&gt;  &lt;int&gt;
 1 Afghanistan    Bronze     2
 2 Afghanistan    &lt;NA&gt;     124
 3 Albania        &lt;NA&gt;      70
 4 Algeria        Bronze     8
 5 Algeria        Gold       5
 6 Algeria        Silver     4
...</code></pre>
</div>
</div>
<p>We can also <code>summarize()</code> data:</p>
<div class="cell" data-output.lines="10">
<div class="sourceCode cell-code" id="cb37" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb37-1"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## Let's see what the mean, min and max age of athletes was in each Region:</span></span>
<span id="cb37-2">athletes <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb37-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">group_by</span>(Region) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb37-4">      <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">summarize</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">mean_age =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mean</span>(Age, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">na.rm =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>), </span>
<span id="cb37-5">                <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">min_age =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">min</span>(Age, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">na.rm =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>), </span>
<span id="cb37-6">                <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">max_age =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">max</span>(Age, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">na.rm =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>)</span>
<span id="cb37-7">                )</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 206 × 4
   Region         mean_age min_age max_age
   &lt;chr&gt;             &lt;dbl&gt;   &lt;int&gt;   &lt;int&gt;
 1 Afghanistan        23.5      17      35
 2 Albania            25.3      16      46
 3 Algeria            24.4      14      38
 4 American Samoa     27.2      16      43
 5 Andorra            23.1      15      61
 6 Angola             24.9      13      51
 7 Antigua            23.2      14      38
...</code></pre>
</div>
</div>
</section>
<section id="join_..-data.frames" class="level2" data-number="7">
<h2 data-number="7" class="anchored" data-anchor-id="join_..-data.frames"><span class="header-section-number">7</span> <code>..._join_..()</code> data.frames</h2>
<p>We have multiple options for merging data.frames in the <code>tidyverse</code>. <code>left_join()</code> can be used if we want to keep all rows of the first data.frame and only adds the rows of the second data.frame that have an identifier in the first data.frame, <code>right_join()</code> keeps all rows of the second data frame, and <code>full_join()</code> keeps all rows of both data frames.</p>
<p>Let’s merge a world coordinate data set onto our medal counts. This can be helpful if we want to plot the number of won medals in each country later on:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb39" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb39-1">world_coordinates <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">readRDS</span>(here<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">here</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"raw_data"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"world_coordinates.rds"</span>))</span></code></pre></div>
</div>
<p>Only take gold medals into account:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb40" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb40-1">medal_counts <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> medal_counts <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">filter</span>(Medal <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Gold"</span>)</span></code></pre></div>
</div>
<p>To merge two data frames that include information that belongs together, we need a common column, on which we can combine them. In our case, this is the column containing the country. They are both named <code>region</code>, but one with an upper case <code>R</code>. This doesn’t pose a problem, as we can define which columns should be taken from which data frame for merging with <code>join_by()</code>. Let’s take a quick look before merging to check if there are any countries named differently in both data sets:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb41" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb41-1">medal_counts<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>Region[<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!</span>(medal_counts<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>Region <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%in%</span> world_coordinates<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>region)]</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "Individual Olympic Athletes"</code></pre>
</div>
</div>
<p>Looks like all of the countries in our <code>medal_countries</code> data frame can also be found in our <code>world_coordinates</code> frame. Only athletes without a country will be lost when merging, but that’s ok for now, as we are interested in the country specific gold medal counts. So let’s merge:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb43" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb43-1">medal_countries <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> world_coordinates <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb43-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">left_join</span>(medal_counts, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">join_by</span>(region <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> Region))</span>
<span id="cb43-3"></span>
<span id="cb43-4"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">head</span>(medal_countries)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>       long      lat group order region subregion Medal  n
1 -69.89912 12.45200     1     1  Aruba      &lt;NA&gt;  &lt;NA&gt; NA
2 -69.89571 12.42300     1     2  Aruba      &lt;NA&gt;  &lt;NA&gt; NA
3 -69.94219 12.43853     1     3  Aruba      &lt;NA&gt;  &lt;NA&gt; NA
4 -70.00415 12.50049     1     4  Aruba      &lt;NA&gt;  &lt;NA&gt; NA
5 -70.06612 12.54697     1     5  Aruba      &lt;NA&gt;  &lt;NA&gt; NA
6 -70.05088 12.59707     1     6  Aruba      &lt;NA&gt;  &lt;NA&gt; NA</code></pre>
</div>
</div>
</section>
<section id="exercise" class="level2" data-number="8">
<h2 data-number="8" class="anchored" data-anchor-id="exercise"><span class="header-section-number">8</span> Exercise</h2>
<ol start="0" type="1">
<li>Read the <code>characters.rds</code> and the <code>psych_stats.csv</code> into R (download <a href="https://github.com/iqb-research/IQB-Methods/tree/main/raw_data">here</a>).</li>
</ol>
<div class="callout callout-style-default callout-caution callout-titled">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-2-contents" aria-controls="callout-2" aria-expanded="false" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Solution
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-2" class="callout-2-contents callout-collapse collapse">
<div class="callout-body-container callout-body">
<div class="cell">
<div class="sourceCode cell-code" id="cb45" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb45-1">characters <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">readRDS</span>(here<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">here</span>(  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"raw_data"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"characters.rds"</span>))</span>
<span id="cb45-2">psych_stats <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">read.csv</span>(here<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">here</span>(  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"raw_data"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"psych_stats.csv"</span>), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">sep =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">";"</span>)</span></code></pre></div>
</div>
</div>
</div>
</div>
<ol type="1">
<li>Reshape the <code>psych_stats</code> data frame so there are only three columns in the data set: <code>char_id</code>, <code>question</code> and <code>rating</code>.</li>
</ol>
<div class="callout callout-style-default callout-tip callout-titled">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-3-contents" aria-controls="callout-3" aria-expanded="false" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Hint
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-3" class="callout-3-contents callout-collapse collapse">
<div class="callout-body-container callout-body">
<p>You can select multiple columns like this: <code>column_1:column_10</code>.</p>
</div>
</div>
</div>
<div class="callout callout-style-default callout-caution callout-titled">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-4-contents" aria-controls="callout-4" aria-expanded="false" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Solution
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-4" class="callout-4-contents callout-collapse collapse">
<div class="callout-body-container callout-body">
<div class="cell">
<div class="sourceCode cell-code" id="cb46" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb46-1">psych_stats_long <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> psych_stats <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb46-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">pivot_longer</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">cols =</span> messy_neat<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span>innocent_jaded, </span>
<span id="cb46-3">               <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">names_to =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"question"</span>, </span>
<span id="cb46-4">               <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">values_to =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"rating"</span>)</span>
<span id="cb46-5"></span>
<span id="cb46-6"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">head</span>(psych_stats_long)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 6 × 3
  char_id question                      rating
  &lt;chr&gt;   &lt;chr&gt;                          &lt;dbl&gt;
1 F2      messy_neat                     95.7 
2 F2      disorganized_self.disciplined  95.2 
3 F2      diligent_lazy                   6.10
4 F2      on.time_tardy                   6.2 
5 F2      competitive_cooperative         6.40
6 F2      scheduled_spontaneous           6.60</code></pre>
</div>
</div>
<p>Now we have multiple rows for every character, but all question ratings are nicely aligned in one column.</p>
</div>
</div>
</div>
<ol start="2" type="1">
<li>Merge the <code>characters</code> data frame and the <code>psych_stats_long</code> data frame on a common column.</li>
</ol>
<div class="callout callout-style-default callout-tip callout-titled">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-5-contents" aria-controls="callout-5" aria-expanded="false" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Hint
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-5" class="callout-5-contents callout-collapse collapse">
<div class="callout-body-container callout-body">
<p>Identify the common columns. Are they named the same in both data frames? Look at the documentation of <code>?join_by()</code> to see, how you can merge data frames that don’t have identically named columns.</p>
</div>
</div>
</div>
<div class="callout callout-style-default callout-caution callout-titled">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-6-contents" aria-controls="callout-6" aria-expanded="false" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Solution
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-6" class="callout-6-contents callout-collapse collapse">
<div class="callout-body-container callout-body">
<p>First, let’s take a look at both data sets again:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb48" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb48-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">str</span>(characters)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>'data.frame':   889 obs. of  7 variables:
 $ id        : chr  "F2" "F1" "F5" "F4" ...
 $ name      : chr  "Monica Geller" "Rachel Green" "Chandler Bing" "Joey Tribbiani" ...
 $ uni_id    : chr  "F" "F" "F" "F" ...
 $ uni_name  : chr  "Friends" "Friends" "Friends" "Friends" ...
 $ notability: num  79.7 76.7 74.4 74.3 72.6 51.6 86.5 84.2 82.6 65.6 ...
 $ link      : chr  "https://openpsychometrics.org/tests/characters/stats/F/2" "https://openpsychometrics.org/tests/characters/stats/F/1" "https://openpsychometrics.org/tests/characters/stats/F/5" "https://openpsychometrics.org/tests/characters/stats/F/4" ...
 $ image_link: chr  "https://openpsychometrics.org/tests/characters/test-resources/pics/F/2.jpg" "https://openpsychometrics.org/tests/characters/test-resources/pics/F/1.jpg" "https://openpsychometrics.org/tests/characters/test-resources/pics/F/5.jpg" "https://openpsychometrics.org/tests/characters/test-resources/pics/F/4.jpg" ...</code></pre>
</div>
<div class="sourceCode cell-code" id="cb50" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb50-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">str</span>(psych_stats)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>'data.frame':   889 obs. of  365 variables:
 $ char_id                                     : chr  "F2" "F1" "F5" "F4" ...
 $ messy_neat                                  : num  95.7 30.2 45.3 13 20.9 ...
 $ disorganized_self.disciplined               : num  95.2 25.9 42.4 11 20.9 75.6 10.4 31.9 39.6 31.1 ...
 $ diligent_lazy                               : num  6.1 51.8 52.2 78.1 45.2 ...
 $ on.time_tardy                               : num  6.2 77.9 57.1 84.1 74 20.6 85.7 68.3 73.6 58.2 ...
 $ competitive_cooperative                     : num  6.4 28.9 42.8 44.2 55.3 ...
 $ scheduled_spontaneous                       : num  6.6 72.3 54.9 91.3 94.9 ...
 $ ADHD_OCD                                    : num  92.9 31.8 26.7 10.4 12.8 70.1 35.5 30.1 51.8 39.2 ...
 $ chaotic_orderly                             : num  92.2 27 38.2 12.6 11.2 68.8 6.8 20.6 23.4 28.8 ...
 $ motivated_unmotivated                       : num  7.8 31.8 52.3 45.6 24.7 31.5 80.9 30.5 40.8 50.7 ...
 $ bossy_meek                                  : num  7.9 30.6 64.8 60.8 40.1 ...
 $ persistent_quitter                          : num  7.9 35.8 43.9 33.8 21.3 ...
 $ overachiever_underachiever                  : num  8.2 43.8 55.8 68.8 51.3 23.2 67.7 36.7 44.1 44.4 ...
 $ muddy_washed                                : num  91 80.2 58.7 42.7 48.1 64.6 27.6 62.4 70.1 69.2 ...
 $ beautiful_ugly                              : num  9.2 5.3 26.2 11 11.4 ...
 $ slacker_workaholic                          : num  90.8 45.9 53.4 17.6 32 81.5 23.8 30.1 33.2 34.6 ...
 $ driven_unambitious                          : num  9.5 30.3 49.8 49.4 43.4 22.7 58.5 34.1 32 47.4 ...
 $ outlaw_sheriff                              : num  90.3 39.3 46.7 23.8 16.1 85.4 21.4 22.7 27.3 30.1 ...
 $ precise_vague                               : num  9.9 64.7 53.2 78 78.1 25.4 68.4 60.1 47.3 61.7 ...
 $ bad.cook_good.cook                          : num  90 11.1 28.2 31.2 29.4 35.9 27.3 46.2 43.8 52.8 ...
 $ manicured_scruffy                           : num  10.6 7.7 45.6 47.6 62.5 20.5 81.3 37.3 20.3 20.9 ...
 $ lenient_strict                              : num  89.3 34.2 28.8 11 15.4 76.7 15.2 24.2 38.9 21.5 ...
 $ relaxed_tense                               : num  89 58.8 66.4 10.4 16.9 88.9 69.9 64.2 54.5 64.8 ...
 $ demanding_unchallenging                     : num  11 23.9 58.3 66.3 57.1 28.5 35.9 37.8 16.8 60.3 ...
 $ drop.out_valedictorian                      : num  88.9 32.5 47 14.9 22.1 87.7 12.5 29.6 36.5 51.2 ...
 $ go.getter_slugabed                          : num  11.7 31.3 52.6 48.1 27.6 41.8 62.6 33.9 27.3 51.1 ...
 $ competent_incompetent                       : num  11.9 47.1 37.1 77.2 53.6 37.8 51.9 41.1 35.2 56.1 ...
 $ aloof_obsessed                              : num  88.1 62.3 52.3 35.1 33.2 80.8 75.1 54.9 70.7 61.9 ...
 $ flexible_rigid                              : num  87.8 41.8 45.9 17.3 13.9 83.7 45.9 27.4 55 32.1 ...
 $ active_slothful                             : num  12.2 33.1 61.1 56.7 31.4 48.8 73.9 19.8 29.2 35.5 ...
 $ loose_tight                                 : num  87.4 43.2 44.3 14 15.3 82.5 28.1 26 44.8 43.6 ...
 $ pointed_random                              : num  12.8 49.9 67.1 86.2 87.4 36.7 65.4 53.1 36.9 56.2 ...
 $ fresh_stinky                                : num  12.9 14.6 31.9 44.3 39.2 44.3 64.4 30.2 18.2 24.6 ...
 $ dominant_submissive                         : num  13.6 41.6 73.7 40.2 30.9 69.5 43.5 52.6 36.9 77.9 ...
 $ anxious_calm                                : num  13.7 28.8 20 66.1 58 11.9 12 32.1 37.1 29.8 ...
 $ clean_perverted                             : num  13.7 42.5 56.8 77.5 59.4 44 53.1 51.2 61.9 50.6 ...
 $ neutral_opinionated                         : num  86.3 74.6 67.2 43.4 76.6 84.2 67.3 77.9 82.5 43.9 ...
 $ always.down_picky                           : num  85.9 72.6 49.8 27.1 35.2 71.9 23.6 36.2 71.8 36.2 ...
 $ hurried_leisurely                           : num  14.6 55.1 55.9 85.9 81 22.1 48.6 45.6 49 39.3 ...
 $ attractive_repulsive                        : num  14.7 9.4 28.5 15.7 18.2 ...
 $ devoted_unfaithful                          : num  14.8 29.1 22.6 41.5 19.6 47.5 34.1 55.7 42.7 48.2 ...
 $ helpless_resourceful                        : num  85 41.4 56.6 37.9 70.6 52.4 41.4 51.5 36.2 29.8 ...
 $ deliberate_spontaneous                      : num  15.1 71.7 56.5 89.1 92.9 20.9 78.6 88.3 64 60.9 ...
 $ plays.hard_works.hard                       : num  84.7 41.3 46.5 13.7 26 81.2 28.2 30 19.9 26.4 ...
 $ imaginative_practical                       : num  84.7 37.9 54.6 17 5.4 ...
 $ frenzied_sleepy                             : num  15.5 29.9 34.7 55.6 30 31.1 59.4 25.2 19 46 ...
 $ queer_straight                              : num  84.3 84.1 65.4 84.3 45.4 77.9 10.2 4.8 73.4 64.1 ...
 $ assertive_passive                           : num  15.8 40.4 66.3 44.3 39.3 60.9 45.1 45.8 23.4 63.3 ...
 $ fast.talking_slow.talking                   : num  15.9 20.8 18.3 42.2 21.7 49.6 69.5 34.3 32.5 44.5 ...
 $ astonishing_methodical                      : num  83.8 28 49.9 19.2 17.4 83 31.2 27.4 36 32.7 ...
 $ hoarder_unprepared                          : num  16.2 70 63.5 82 54.9 35.5 60.3 64.5 48.3 67.8 ...
 $ consistent_variable                         : num  16.6 60.2 46.3 63.1 79.3 39.5 72 65.3 69.7 62.3 ...
 $ involved_remote                             : num  16.7 26.3 42.7 30.2 36.7 36.6 62.2 39.3 26.4 38.7 ...
 $ backdoor_official                           : num  83.3 51.9 47.4 24.4 20.4 76.4 29.1 29.3 53.5 36.7 ...
 $ captain_first.mate                          : num  16.7 52.7 73.5 74.2 57.9 68.4 55.9 51 19 73.6 ...
 $ refined_rugged                              : num  17.3 18.9 48.4 74.4 69.9 24.4 81.6 48 31.4 40.7 ...
 $ accommodating_stubborn                      : num  82.7 77.2 48.2 43.9 48.3 78.5 78.1 69 85.9 41.5 ...
 $ barbaric_civilized                          : num  82.6 76.5 66.6 32.9 39.9 77 33.4 44.4 36.7 55.5 ...
 $ alpha_beta                                  : num  17.7 37.9 73.9 33.6 41.9 78.2 44.3 37.4 17.5 66.6 ...
 $ loyal_traitorous                            : num  17.8 32.3 20 15.3 14.5 40.3 29.2 43.1 47.2 33.2 ...
 $ trash_treasure                              : num  82 80.1 82.2 78.4 83.2 47.8 64.5 62.2 68.2 78.4 ...
 $ fast_slow                                   : num  18.1 43.7 38.1 69 55.3 60.4 57.8 29.4 30 54.5 ...
 $ perceptive_unobservant                      : num  18.3 59.5 41.5 80 41.1 48.6 21.6 33.3 28 49 ...
 $ goof.off_studious                           : num  81.4 33.2 20.7 7.4 16.6 ...
 $ feminist_sexist                             : num  18.6 23.3 43.9 62 10.5 ...
 $ desperate_high.standards                    : num  81.1 69.2 30.7 36.8 56.7 29.2 33.7 32.5 61.7 25.8 ...
 $ impatient_patient                           : num  18.9 21.9 34 25.7 39.1 25.8 23.8 35.1 18 57.2 ...
 $ preppy_punk.rock                            : num  18.9 16.4 41.5 49.5 73.2 14.4 87.7 74.4 26.4 18.2 ...
 $ naive_paranoid                              : num  80.7 35.5 66.6 22 39.7 71.6 69.6 45.6 50.7 32.1 ...
 $ important_irrelevant                        : num  19.3 22.3 24.6 24.7 26.4 47.4 12.5 14.8 16.4 33.4 ...
 $ apprentice_master                           : num  80.6 42.3 44.9 36.3 61.5 60.8 48 48 73 31.5 ...
 $ healthy_sickly                              : num  19.6 17.8 39.1 26.9 22.6 37 88.9 65.7 56.7 45.5 ...
 $ morning.lark_night.owl                      : num  19.6 69.9 58.3 80.4 61.9 23.2 90.6 81.9 90.1 78.3 ...
 $ alert_oblivious                             : num  19.6 70.7 55.5 87.6 78.9 57.1 54.7 48.9 38.3 67.4 ...
 $ f....the.police_tattle.tale                 : num  80 57.5 56.7 34.4 13.7 ...
 $ experimental_reliable                       : num  79.7 37.8 62 35 22.2 61.7 28 26.5 30.4 39.8 ...
 $ loud_quiet                                  : num  20.4 20.8 25 10.6 15.3 39.5 71.9 42.7 13.2 55.2 ...
 $ high.IQ_low.IQ                              : num  20.5 56.7 28.8 82.6 50.6 19.3 30.9 26.1 47.7 55.6 ...
 $ oppressed_privileged                        : num  79.2 85.4 67.2 66.5 42.1 84.3 22.4 19.6 59.9 63.4 ...
 $ animalistic_human                           : num  79.2 75.6 73.7 43.8 42.1 69.3 70.4 55.9 64.4 73.2 ...
 $ still_twitchy                               : num  79.2 68.6 79.9 76.9 83.6 81.9 77.9 67.4 60.1 58.4 ...
 $ thick_thin                                  : num  78.8 79.6 52.8 35.2 69.2 60.6 73.3 81.4 66.1 48.8 ...
 $ repetitive_varied                           : num  21.3 44.5 40.9 43.4 74.1 18.4 40.1 68.4 47.3 42.1 ...
 $ rational_whimsical                          : num  21.7 72.3 54.4 86.8 93 27.4 67 78.7 69.6 70.9 ...
 $ egalitarian_racist                          : num  21.7 27.8 24.7 24.3 10.7 ...
 $ disreputable_prestigious                    : num  78.2 66.2 47 32.5 36.7 68.2 21.2 42.5 65.2 45.8 ...
 $ ignorant_knowledgeable                      : num  78.2 37.7 66.9 22.2 59.9 68.5 60.8 68.1 44.2 42.6 ...
 $ hard.work_natural.talent                    : num  21.9 47.5 41.8 69.8 71.2 29.2 55.8 67.5 65.8 57.3 ...
 $ androgynous_gendered                        : num  78.1 89.4 68.5 82.5 60.1 78.1 32.6 43.4 88.3 87.9 ...
 $ dispassionate_romantic                      : num  77.9 80.5 64.7 69.6 74.9 67.2 61.5 64.8 59.1 82.3 ...
 $ eloquent_unpolished                         : num  22.1 32.1 56.1 79.8 69 33.7 76.3 45.2 35 42.9 ...
 $ permanent_transient                         : num  22.2 56.1 39 59.6 71.1 31.9 68.5 79.7 57.2 70.6 ...
 $ intense_lighthearted                        : num  22.2 50.8 73.8 79.8 64.2 28.2 22.4 34.7 18.2 44.3 ...
 $ mischievous_well.behaved                    : num  77.8 34.2 30.6 15.8 20.3 71.4 13.3 19.4 17.6 38.2 ...
 $ adventurous_stick.in.the.mud                : num  77.7 37.4 59.7 14.4 8 ...
 $ obedient_rebellious                         : num  22.3 69.2 42.9 72.9 86.2 16.5 92.3 87.1 84.2 38.1 ...
 $ authoritarian_democratic                    : num  22.4 55.2 70 72.1 75.4 41.6 68 67.4 21.8 68.9 ...
 $ city.slicker_country.bumpkin                : num  22.7 9 22.4 18.4 42.6 18.8 26.5 20.2 16.8 24 ...
 $ traditional_unorthodox                      : num  22.8 52.8 54.9 67.2 90 23.1 85.7 90.2 74.5 62.6 ...
  [list output truncated]</code></pre>
</div>
</div>
<p>It seems like both data frames have a column containing an ID for the character. We can use that column for merging:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb52" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb52-1">characters_stats <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> characters <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb52-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">right_join</span>(psych_stats_long, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">join_by</span>(id <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> char_id))</span>
<span id="cb52-3"></span>
<span id="cb52-4"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">str</span>(characters_stats)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>'data.frame':   323596 obs. of  9 variables:
 $ id        : chr  "F2" "F2" "F2" "F2" ...
 $ name      : chr  "Monica Geller" "Monica Geller" "Monica Geller" "Monica Geller" ...
 $ uni_id    : chr  "F" "F" "F" "F" ...
 $ uni_name  : chr  "Friends" "Friends" "Friends" "Friends" ...
 $ notability: num  79.7 79.7 79.7 79.7 79.7 79.7 79.7 79.7 79.7 79.7 ...
 $ link      : chr  "https://openpsychometrics.org/tests/characters/stats/F/2" "https://openpsychometrics.org/tests/characters/stats/F/2" "https://openpsychometrics.org/tests/characters/stats/F/2" "https://openpsychometrics.org/tests/characters/stats/F/2" ...
 $ image_link: chr  "https://openpsychometrics.org/tests/characters/test-resources/pics/F/2.jpg" "https://openpsychometrics.org/tests/characters/test-resources/pics/F/2.jpg" "https://openpsychometrics.org/tests/characters/test-resources/pics/F/2.jpg" "https://openpsychometrics.org/tests/characters/test-resources/pics/F/2.jpg" ...
 $ question  : chr  "messy_neat" "disorganized_self.disciplined" "diligent_lazy" "on.time_tardy" ...
 $ rating    : num  95.7 95.2 6.1 6.2 6.4 ...</code></pre>
</div>
</div>
</div>
</div>
</div>
<ol start="3" type="1">
<li>Remove all columns from your merged data frame that start with <code>"uni"</code>. Don’t overwrite your old data, this is just for exercise and won’t be worked with further on.</li>
</ol>
<div class="callout callout-style-default callout-tip callout-titled">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-7-contents" aria-controls="callout-7" aria-expanded="false" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Hint
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-7" class="callout-7-contents callout-collapse collapse">
<div class="callout-body-container callout-body">
<p>Take a look at the examples in <code>?select</code> to see how you can select all columns but those fulfilling a certain condition.</p>
</div>
</div>
</div>
<div class="callout callout-style-default callout-caution callout-titled">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-8-contents" aria-controls="callout-8" aria-expanded="false" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Caution
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-8" class="callout-8-contents callout-collapse collapse">
<div class="callout-body-container callout-body">
<div class="cell">
<div class="sourceCode cell-code" id="cb54" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb54-1">characters_stats <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb54-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">select</span>(<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">starts_with</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"uni"</span>)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb54-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">str</span>()</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>'data.frame':   323596 obs. of  7 variables:
 $ id        : chr  "F2" "F2" "F2" "F2" ...
 $ name      : chr  "Monica Geller" "Monica Geller" "Monica Geller" "Monica Geller" ...
 $ notability: num  79.7 79.7 79.7 79.7 79.7 79.7 79.7 79.7 79.7 79.7 ...
 $ link      : chr  "https://openpsychometrics.org/tests/characters/stats/F/2" "https://openpsychometrics.org/tests/characters/stats/F/2" "https://openpsychometrics.org/tests/characters/stats/F/2" "https://openpsychometrics.org/tests/characters/stats/F/2" ...
 $ image_link: chr  "https://openpsychometrics.org/tests/characters/test-resources/pics/F/2.jpg" "https://openpsychometrics.org/tests/characters/test-resources/pics/F/2.jpg" "https://openpsychometrics.org/tests/characters/test-resources/pics/F/2.jpg" "https://openpsychometrics.org/tests/characters/test-resources/pics/F/2.jpg" ...
 $ question  : chr  "messy_neat" "disorganized_self.disciplined" "diligent_lazy" "on.time_tardy" ...
 $ rating    : num  95.7 95.2 6.1 6.2 6.4 ...</code></pre>
</div>
</div>
</div>
</div>
</div>
<ol start="4" type="1">
<li>Calculate the mean rating of all characters by show and question, so you get the mean rating of all characters in a show on each item.</li>
</ol>
<div class="callout callout-style-default callout-tip callout-titled">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-9-contents" aria-controls="callout-9" aria-expanded="false" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Hint
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-9" class="callout-9-contents callout-collapse collapse">
<div class="callout-body-container callout-body">
<p>Use <code>group_by()</code> and <code>summarise()</code>.</p>
</div>
</div>
</div>
<div class="callout callout-style-default callout-caution callout-titled">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-10-contents" aria-controls="callout-10" aria-expanded="false" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Caution
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-10" class="callout-10-contents callout-collapse collapse">
<div class="callout-body-container callout-body">
<div class="cell">
<div class="sourceCode cell-code" id="cb56" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb56-1">characters_summary <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> characters_stats <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb56-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">group_by</span>(uni_name, question) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb56-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">summarise</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">mean_rating =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mean</span>(rating, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">na.rm =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>))</span></code></pre></div>
<div class="cell-output cell-output-stderr">
<pre><code>`summarise()` has grouped output by 'uni_name'. You can override using the
`.groups` argument.</code></pre>
</div>
</div>
</div>
</div>
</div>
<ol start="5" type="1">
<li>Choose two of your favorite shows. Build a data frame that has two mean_rating columns, one for each show.</li>
</ol>
<div class="callout callout-style-default callout-tip callout-titled">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-11-contents" aria-controls="callout-11" aria-expanded="false" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Hint
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-11" class="callout-11-contents callout-collapse collapse">
<div class="callout-body-container callout-body">
<p>You can get an overview of the used shows with <code>unique(characters_stats$uni_name)</code> First, filter your two shows from the <code>characters_stats</code> data.frame.<br>
Second, reshape this data.frame into long format.</p>
</div>
</div>
</div>
<div class="callout callout-style-default callout-caution callout-titled">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-12-contents" aria-controls="callout-12" aria-expanded="false" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Caution
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-12" class="callout-12-contents callout-collapse collapse">
<div class="callout-body-container callout-body">
<div class="cell">
<div class="sourceCode cell-code" id="cb58" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb58-1">compare_shows <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> characters_summary <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb58-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">filter</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">str_detect</span>(uni_name, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Friends|How I Met Your Mother"</span> ))) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb58-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">pivot_wider</span>(</span>
<span id="cb58-4">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">names_from =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"uni_name"</span>,</span>
<span id="cb58-5">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">values_from =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"mean_rating"</span>)</span>
<span id="cb58-6"></span>
<span id="cb58-7">compare_shows</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 364 × 3
   question               Friends `How I Met Your Mother`
   &lt;chr&gt;                    &lt;dbl&gt;                   &lt;dbl&gt;
 1 ADHD_OCD                  40.8                    46.6
 2 Coke_Pepsi                49.2                    48.1
 3 English_German            26.6                    31.3
 4 French_Russian            30.7                    38.7
 5 Greek_Roman               44.0                    47.9
 6 Italian_Swedish           39.2                    44.5
 7 abstract_concrete         46.0                    43.6
 8 accepting_judgemental     52.0                    53.4
 9 accommodating_stubborn    63.1                    63.6
10 active_slothful           40.6                    37.0
# ℹ 354 more rows</code></pre>
</div>
</div>
<p>Now we could look at specific questions. For example the How I Met Your Mother characters seem to be rated a bit more slothful than the Friends characters.</p>
</div>
</div>
</div>
<ol start="6" type="1">
<li>Now, add a column containing the difference in rating between both shows for each question to your new comparison data.frame. Then, sort the rows by descending size of difference between the ratings. So the row with the highest difference in mean rating between your two shows should be on top.</li>
</ol>
<div class="callout callout-style-default callout-tip callout-titled">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-13-contents" aria-controls="callout-13" aria-expanded="false" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Hint
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-13" class="callout-13-contents callout-collapse collapse">
<div class="callout-body-container callout-body">
<p>To work with columns within <code>mutate()</code> you could for example use <code>.$column_name</code>.</p>
</div>
</div>
</div>
<div class="callout callout-style-default callout-caution callout-titled">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-14-contents" aria-controls="callout-14" aria-expanded="false" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Caution
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-14" class="callout-14-contents callout-collapse collapse">
<div class="callout-body-container callout-body">
<div class="cell">
<div class="sourceCode cell-code" id="cb60" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb60-1">compare_shows <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb60-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mutate</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">diff_shows =</span> .<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>Friends <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> .<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"How I Met Your Mother"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb60-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">arrange</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">desc</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">abs</span>(diff_shows)))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 364 × 4
   question                            Friends How I Met Your Mothe…¹ diff_shows
   &lt;chr&gt;                                 &lt;dbl&gt;                  &lt;dbl&gt;      &lt;dbl&gt;
 1 cat.person_dog.person                  46.4                   65.1      -18.6
 2 musical_off.key                        61.5                   44.8       16.7
 3 nonpolitical_political                 40.2                   54.7      -14.5
 4 gamer_non.gamer                        58.6                   44.8       13.8
 5 focused.on.the.future_focused.on.t…    55.0                   41.8       13.2
 6 gatherer_hunter                        38.8                   51.2      -12.5
 7 captain_first.mate                     57.2                   44.9       12.3
 8 flower.child_goth                      21.5                   33.6      -12.1
 9 perceptive_unobservant                 48.2                   36.4       11.7
10 dunce_genius                           46.4                   57.9      -11.4
# ℹ 354 more rows
# ℹ abbreviated name: ¹​`How I Met Your Mother`</code></pre>
</div>
</div>
<p><code>desc()</code> means descending, so we go from the largest value to the smallest.<br>
<code>abs()</code> means absolute, so we get the absolute value instead of negative values in some cases.</p>
</div>
</div>
</div>


</section>


<div id="quarto-appendix" class="default"><section id="footnotes" class="footnotes footnotes-end-of-document"><h2 class="anchored quarto-appendix-heading">Footnotes</h2>

<ol>
<li id="fn1"><p>Image by <a href="https://www.bing.com/images/create/data-wrangling/1-65fd4161357e424ab4710052a455ae76?id=%2bsYYE%2fjAx45kPemp84oShA%3d%3d&amp;view=detailv2&amp;idpp=genimg&amp;idpclose=1&amp;thId=OIG1.63cnYyWZaAlWJaaaluAw&amp;FORM=SYDBIC">Bing Copilot</a>↩︎</p></li>
</ol>
</section></div> ]]></description>
  <category>R</category>
  <category>tidyverse</category>
  <category>R-SIG</category>
  <category>tutorial</category>
  <category>data manipulation</category>
  <guid>https://iqb-research.github.io/IQB-Methods/docs/r_sig/24_03_25_tidyverse_wrangling/</guid>
  <pubDate>Mon, 25 Mar 2024 00:00:00 GMT</pubDate>
  <media:content url="https://iqb-research.github.io/IQB-Methods/docs/r_sig/24_03_25_tidyverse_wrangling/data_wrangling.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Data sets</title>
  <dc:creator>Nicklas Hafiz</dc:creator>
  <link>https://iqb-research.github.io/IQB-Methods/docs/r_sig/24_03_22_datasets/</link>
  <description><![CDATA[ 




<p>We will use two data sets for some time in the R SIG now. One for the theory, and one for you to work on in the exercises.</p>
<section id="theory-olympic-athletes" class="level2" data-number="1">
<h2 data-number="1" class="anchored" data-anchor-id="theory-olympic-athletes"><span class="header-section-number">1</span> Theory: Olympic athletes</h2>
<p><img src="https://iqb-research.github.io/IQB-Methods/docs/r_sig/24_03_22_datasets/olympics.jpg" class="img-fluid"><sup>1</sup></p>
<p>For the theory part of the workshop, we will mainly work with the <a href="https://www.kaggle.com/datasets/heesoo37/120-years-of-olympic-history-athletes-and-results"><code>athletes</code></a> data set. It contains the Olympic athletes from 1896 to 2016, along with some basic stats, their sport and country, and the medals they won.</p>
<div class="callout callout-style-default callout-caution no-icon callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon no-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Goal
</div>
</div>
<div class="callout-body-container callout-body">
<p>Our goal for the theory part of this workshop is to find the best country in each sport (operationalized by the number of gold medal winners from this country).</p>
</div>
</div>
</section>
<section id="exercises-fictional-characters" class="level2" data-number="2">
<h2 data-number="2" class="anchored" data-anchor-id="exercises-fictional-characters"><span class="header-section-number">2</span> Exercises: Fictional characters</h2>
<p><img src="https://iqb-research.github.io/IQB-Methods/docs/r_sig/24_03_22_datasets/friends.jpg" class="img-fluid"><sup>2</sup></p>
<p>Over the course of this workshop, you can work on exercises to put the theoretical knowledge you acquired in the chapters to use. Most of these exercises will use the <a href="https://openpsychometrics.org/tests/characters/documentation/"><code>characters</code></a> data set, which contains psychometric ratings for different fictional characters, rated by a large number of people on a personality scale developed by the author of the questionnaire.</p>
<p>You will load the data, prepare it for analyses and also plot it in the end.</p>
<div class="callout callout-style-default callout-caution no-icon callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon no-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Goal
</div>
</div>
<div class="callout-body-container callout-body">
<p>The goal for the exercise part of this workshop is to build a character profile for a fictional universe of your choosing.</p>
</div>
</div>
<div class="callout callout-style-default callout-tip callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Tip
</div>
</div>
<div class="callout-body-container callout-body">
<p>We have looked at how to download these data sets in the <a href="https://nickhaf.github.io/r_tutorial/qmd/workflow/workflow_exercise.html#exercise-2-download-data">this exercise</a>.</p>
</div>
</div>


</section>


<div id="quarto-appendix" class="default"><section id="footnotes" class="footnotes footnotes-end-of-document"><h2 class="anchored quarto-appendix-heading">Footnotes</h2>

<ol>
<li id="fn1"><p>Image by <a href="https://unsplash.com/de/@floschmaezz?utm_source=unsplash&amp;utm_medium=referral&amp;utm_content=creditCopyText">Florian Schmetz</a> on <a href="https://unsplash.com/de/fotos/fbCtFV3FkfE?utm_source=unsplash&amp;utm_medium=referral&amp;utm_content=creditCopyText">Unsplash</a>.↩︎</p></li>
<li id="fn2"><p>Image by <a href="https://unsplash.com/de/@lgtts?utm_source=unsplash&amp;utm_medium=referral&amp;utm_content=creditCopyText">Ilse Orsen</a> on <a href="https://unsplash.com/de/fotos/fwPHQB4kGzA?utm_source=unsplash&amp;utm_medium=referral&amp;utm_content=creditCopyText">Unsplash</a>.↩︎</p></li>
</ol>
</section></div> ]]></description>
  <category>R</category>
  <category>tidyverse</category>
  <category>R-SIG</category>
  <category>data sets</category>
  <guid>https://iqb-research.github.io/IQB-Methods/docs/r_sig/24_03_22_datasets/</guid>
  <pubDate>Fri, 22 Mar 2024 00:00:00 GMT</pubDate>
  <media:content url="https://iqb-research.github.io/IQB-Methods/docs/r_sig/24_03_22_datasets/olympics.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Introduction to the tidyverse</title>
  <dc:creator>Nicklas Hafiz</dc:creator>
  <link>https://iqb-research.github.io/IQB-Methods/docs/r_sig/24_01_26_tidyverse_intro/</link>
  <description><![CDATA[ 




<p><img src="https://iqb-research.github.io/IQB-Methods/docs/r_sig/24_01_26_tidyverse_intro/preview_image.jpg" class="img-fluid"><sup>1</sup></p>
<div class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(tidyverse)</span></code></pre></div>
</div>
<section id="introduction" class="level2" data-number="1">
<h2 data-number="1" class="anchored" data-anchor-id="introduction"><span class="header-section-number">1</span> Introduction</h2>
<p><em>Tidy datasets are easy to manipulate, model and visualize, and have a specific structure: each variable is a column, each observation is a row, and each type of observational unit is a table.</em> (<a href="https://www.jstatsoft.org/article/view/v059i10">Wickham, 2014</a>).</p>
<p>The <code>tidyverse</code> is composed of multiple packages, all following a common philosophy, and facilitating many aspects of coding in R, for example data wrangling and plotting. It is not really necessary to learn the <code>tidyverse</code> syntax in order to be proficient in R. However, I find it easier to understand and write Code in, at least in most cases. In the end, it is a question of preference what you want to learn and use. Most code will probably be composed from <code>base R</code> functions and <code>tidyverse</code> functions.</p>
<p>You can find an overview of the included packages at the offical <a href="https://www.tidyverse.org/packages/">tidyverse documentation</a>.<br>
A more thorough introduction into the <code>tidyverse</code> can be found <a href="https://jhudatascience.org/tidyversecourse/index.html">here</a>.</p>
</section>
<section id="some-tidyverse-features" class="level2" data-number="2">
<h2 data-number="2" class="anchored" data-anchor-id="some-tidyverse-features"><span class="header-section-number">2</span> Some tidyverse features</h2>
<section id="tibbles" class="level3" data-number="2.1">
<h3 data-number="2.1" class="anchored" data-anchor-id="tibbles"><span class="header-section-number">2.1</span> Tibbles</h3>
<p>A special type of data frame are the so called <code>tibbles</code>. Tibbles are a modern version of data frames and the standard data frame type of the <code>tidyverse</code>, as they have some advantageous characteristics (e.g., note the more informative printing of the data frame). So don’t be confused if you run into them, in general they behave like data frames. Take a look at the <a href="https://iqb-research.github.io/IQB-Methods/posts/r_sig/24_01_26_tidyverse_intro/#exercise">Exercises</a>, or at a more thorough <a href="https://cran.r-project.org/web/packages/tibble/vignettes/tibble.html">Example</a> if you want to learn more.</p>
</section>
<section id="the-pipe-operator" class="level3" data-number="2.2">
<h3 data-number="2.2" class="anchored" data-anchor-id="the-pipe-operator"><span class="header-section-number">2.2</span> The Pipe Operator</h3>
<p><code>tidyverse</code> code is often written using the pipe operator <code>%&gt;%</code> (read as ‘<em>then do</em>’), which makes it easy to connect multiple function calls.</p>
<p>Some notes on the pipe syntax, also see <a href="https://iqb-research.github.io/IQB-Methods/posts/r_sig/24_01_26_tidyverse_intro/#exercise">Exercises</a>:</p>
<ol type="1">
<li>If we don’t have any additional arguments we want to put into the function, we can just write the function name without any brackets.</li>
<li>The pipe operator will give the result of the last function as input into the next function.</li>
<li>If we want to clearly state which of the function arguments should receive the input, we can write a <code>.</code>, which can be read as <em>output of the previous function call</em>.</li>
</ol>
</section>
</section>
<section id="workstation-organization" class="level2" data-number="3">
<h2 data-number="3" class="anchored" data-anchor-id="workstation-organization"><span class="header-section-number">3</span> Workstation organization</h2>
<section id="rstudio-projects" class="level3" data-number="3.1">
<h3 data-number="3.1" class="anchored" data-anchor-id="rstudio-projects"><span class="header-section-number">3.1</span> RStudio Projects</h3>
<p>Over time, it will become increasingly hard to organize all your files, working directories and workspaces in a sensible manner. A reasonable big project will consist of multiple script files, data, output and plots. To keep everything toghether, <a href="https://support.posit.co/hc/en-us/articles/200526207-Using-RStudio-Projects">RStudio Projects</a> can be used (highly recommended). Therefore, when starting a new project in R, the first thing you should do is to create a RStudio project.</p>
<p>You can create a new RStudio project by clicking on <code>File - New Project</code> in the RStudio window. You can either create a totally new directory, or choose an already existing folder for the project.</p>
</section>
<section id="code-organization" class="level3" data-number="3.2">
<h3 data-number="3.2" class="anchored" data-anchor-id="code-organization"><span class="header-section-number">3.2</span> Code organization</h3>
<p>Within your project folder, I would suggest that you create subfolders to save your Scripts, data, outputs … in. For example, you could create a folder named R, where all your R Scripts will go. You can do the same for data, plots etc. This will help you to structure your working directory and make it easier to find specific files.</p>
</section>
<section id="absolute-paths-vs.-relative-paths" class="level3" data-number="3.3">
<h3 data-number="3.3" class="anchored" data-anchor-id="absolute-paths-vs.-relative-paths"><span class="header-section-number">3.3</span> Absolute paths vs.&nbsp;relative paths</h3>
<p>I can head to a specific file by using the full path (<strong>absolute path</strong>): <code>"C:/Users/hafiznij/Documents/GitHub/IQB-Methods/posts/r_sig/24_01_26_tidyverse_intro/raw_data/winners.rda"</code>. This approach has some disadvantages: it will only work on <strong>my</strong> notebook. If I want to continue my project on another device, I will have to change the path. The same goes for other people who want to work with my project. So, to keep these paths more reproducable, we should always use <strong>relative paths</strong>: <code>"./raw_data/winners.rda"</code>. This will always work independently of the device I am working on, as long as I am in the correct <strong>working directory</strong>.</p>
<div class="callout callout-style-default callout-tip callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Network drives
</div>
</div>
<div class="callout-body-container callout-body">
<p>One exception might be paths to files on the IQB network drives, like <code>T:</code> … Because these are always the same for every one, absolute paths will work just fine for everything lying on here.</p>
</div>
</div>
<p>The working directory is the path R is currently working in. I can obtain it by typing:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb2-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">getwd</span>()</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "/home/runner/work/IQB-Methods/IQB-Methods/docs/r_sig/24_01_26_tidyverse_intro"</code></pre>
</div>
</div>
<p>Luckily, RStudio projects set the working directory automatically, so we don’t really have to deal with that.</p>
<p>Now take a look at the working directory and the relative path I used for loading the <code>winners.rda</code>. Notice something? Correct, both paths combined equal the <strong>absolute path</strong> to the file. So by splitting it up, we obtain a more reproducible path, that works independently of where the current working directory is.</p>
<div class="callout callout-style-default callout-tip callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
The <code>here</code> package
</div>
</div>
<div class="callout-body-container callout-body">
<p>Another great way to deal with the path confusion is to use the <code>here</code> package. It can build the paths relative to the directory where your R Studio project is saved in. For example, <code>"./raw_data/winners.rda"</code> becomes <code>here::here("raw_data", "winners.rda")</code>. This is not incredibly important right now, especially if you have all your files in the same folder. But it can become very valuable with increasing project complexity and file structure, so look into it if you want to get a head start! I also I have to use it sometimes during the tutorial because of the way I have organized my project, so don’t be confused! It is just another way to build file paths. Look <a href="https://here.r-lib.org/">here</a> (:D) if you want to learn more about the package.</p>
</div>
</div>
</section>
</section>
<section id="exercise" class="level2" data-number="4">
<h2 data-number="4" class="anchored" data-anchor-id="exercise"><span class="header-section-number">4</span> Exercise</h2>
<ol start="0" type="1">
<li><p>Create a new RStudio project. Create the folders <code>R</code>, <code>data</code> and <code>plots</code>. Create a new R-Script which lies in your <code>R</code> folder.</p></li>
<li><p>Write the following code using the pipe-operator from the <code>tidyverse</code>:</p></li>
</ol>
<div class="cell">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb4-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sum</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">seq</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">from =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">to =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mean</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">45</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">na.rm =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">by =</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.1</span>))</span></code></pre></div>
</div>
<div class="callout callout-style-default callout-caution callout-titled">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-3-contents" aria-controls="callout-3" aria-expanded="false" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Solution
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-3" class="callout-3-contents callout-collapse collapse">
<div class="callout-body-container callout-body">
<div class="cell">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb5-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(tidyverse)</span>
<span id="cb5-2"></span>
<span id="cb5-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">45</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb5-4">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mean</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">na.rm =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb5-5">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">seq</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">from =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">to =</span> ., <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">by =</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.1</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb5-6">  sum</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] 26313</code></pre>
</div>
</div>
<p>Much nicer to read, right?</p>
<ol type="1">
<li>If we don’t have any additional arguments we want to put into the function, we can just write the function name without any brackets, like we do at the end with <code>sum</code>.</li>
<li>The pipe operator will give the result of the last function as input into the next function. That’s why we don’t have to specify the vector within the <code>mean()</code> function.</li>
<li>If we want to clearly state which of the function arguments should receive the input, we can write a <code>.</code>, which can be read as <em>output of the previous function call</em>. That’s what we do in the <code>seq()</code> function. It calculates a sequence from <code>1</code> to the mean of <code>c(45:100)</code>.</li>
</ol>
</div>
</div>
</div>
<ol start="2" type="1">
<li>Install and load the <code>palmerpenguins</code> package.</li>
</ol>
<div class="callout callout-style-default callout-caution callout-titled">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-4-contents" aria-controls="callout-4" aria-expanded="false" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Solution
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-4" class="callout-4-contents callout-collapse collapse">
<div class="callout-body-container callout-body">
<div class="cell">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb7-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># install.packages("palmerpenguins")</span></span>
<span id="cb7-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(palmerpenguins)</span></code></pre></div>
</div>
</div>
</div>
</div>
<ol start="3" type="1">
<li>Transform the <code>penguins</code>-tibble (available after loading the package) into a <code>data.frame</code>.</li>
</ol>
<div class="callout callout-style-default callout-caution callout-titled">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-5-contents" aria-controls="callout-5" aria-expanded="false" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Solution
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-5" class="callout-5-contents callout-collapse collapse">
<div class="callout-body-container callout-body">
<div class="cell">
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb8-1">penguins_frame <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">as.data.frame</span>(penguins)</span></code></pre></div>
</div>
</div>
</div>
</div>
<ol start="4" type="1">
<li>Compare how both objects (tibble and data.frame) are printed into the console. Which differences can you see?</li>
</ol>
<div class="callout callout-style-default callout-caution callout-titled">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-6-contents" aria-controls="callout-6" aria-expanded="false" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Solution
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-6" class="callout-6-contents callout-collapse collapse">
<div class="callout-body-container callout-body">
<div class="cell">
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb9-1">penguins</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 344 × 8
   species island    bill_length_mm bill_depth_mm flipper_length_mm body_mass_g
   &lt;fct&gt;   &lt;fct&gt;              &lt;dbl&gt;         &lt;dbl&gt;             &lt;int&gt;       &lt;int&gt;
 1 Adelie  Torgersen           39.1          18.7               181        3750
 2 Adelie  Torgersen           39.5          17.4               186        3800
 3 Adelie  Torgersen           40.3          18                 195        3250
 4 Adelie  Torgersen           NA            NA                  NA          NA
 5 Adelie  Torgersen           36.7          19.3               193        3450
 6 Adelie  Torgersen           39.3          20.6               190        3650
 7 Adelie  Torgersen           38.9          17.8               181        3625
 8 Adelie  Torgersen           39.2          19.6               195        4675
 9 Adelie  Torgersen           34.1          18.1               193        3475
10 Adelie  Torgersen           42            20.2               190        4250
# ℹ 334 more rows
# ℹ 2 more variables: sex &lt;fct&gt;, year &lt;int&gt;</code></pre>
</div>
</div>
<div class="cell">
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb11-1">penguins_frame</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>      species    island bill_length_mm bill_depth_mm flipper_length_mm
1      Adelie Torgersen           39.1          18.7               181
2      Adelie Torgersen           39.5          17.4               186
3      Adelie Torgersen           40.3          18.0               195
4      Adelie Torgersen             NA            NA                NA
5      Adelie Torgersen           36.7          19.3               193
6      Adelie Torgersen           39.3          20.6               190
7      Adelie Torgersen           38.9          17.8               181
8      Adelie Torgersen           39.2          19.6               195
9      Adelie Torgersen           34.1          18.1               193
10     Adelie Torgersen           42.0          20.2               190
11     Adelie Torgersen           37.8          17.1               186
12     Adelie Torgersen           37.8          17.3               180
13     Adelie Torgersen           41.1          17.6               182
14     Adelie Torgersen           38.6          21.2               191
15     Adelie Torgersen           34.6          21.1               198
16     Adelie Torgersen           36.6          17.8               185
17     Adelie Torgersen           38.7          19.0               195
18     Adelie Torgersen           42.5          20.7               197
19     Adelie Torgersen           34.4          18.4               184
20     Adelie Torgersen           46.0          21.5               194
21     Adelie    Biscoe           37.8          18.3               174
22     Adelie    Biscoe           37.7          18.7               180
23     Adelie    Biscoe           35.9          19.2               189
24     Adelie    Biscoe           38.2          18.1               185
25     Adelie    Biscoe           38.8          17.2               180
26     Adelie    Biscoe           35.3          18.9               187
27     Adelie    Biscoe           40.6          18.6               183
28     Adelie    Biscoe           40.5          17.9               187
29     Adelie    Biscoe           37.9          18.6               172
30     Adelie    Biscoe           40.5          18.9               180
31     Adelie     Dream           39.5          16.7               178
32     Adelie     Dream           37.2          18.1               178
33     Adelie     Dream           39.5          17.8               188
34     Adelie     Dream           40.9          18.9               184
35     Adelie     Dream           36.4          17.0               195
36     Adelie     Dream           39.2          21.1               196
37     Adelie     Dream           38.8          20.0               190
38     Adelie     Dream           42.2          18.5               180
39     Adelie     Dream           37.6          19.3               181
40     Adelie     Dream           39.8          19.1               184
41     Adelie     Dream           36.5          18.0               182
42     Adelie     Dream           40.8          18.4               195
43     Adelie     Dream           36.0          18.5               186
44     Adelie     Dream           44.1          19.7               196
45     Adelie     Dream           37.0          16.9               185
46     Adelie     Dream           39.6          18.8               190
47     Adelie     Dream           41.1          19.0               182
48     Adelie     Dream           37.5          18.9               179
49     Adelie     Dream           36.0          17.9               190
50     Adelie     Dream           42.3          21.2               191
51     Adelie    Biscoe           39.6          17.7               186
52     Adelie    Biscoe           40.1          18.9               188
53     Adelie    Biscoe           35.0          17.9               190
54     Adelie    Biscoe           42.0          19.5               200
55     Adelie    Biscoe           34.5          18.1               187
56     Adelie    Biscoe           41.4          18.6               191
57     Adelie    Biscoe           39.0          17.5               186
58     Adelie    Biscoe           40.6          18.8               193
59     Adelie    Biscoe           36.5          16.6               181
60     Adelie    Biscoe           37.6          19.1               194
61     Adelie    Biscoe           35.7          16.9               185
62     Adelie    Biscoe           41.3          21.1               195
63     Adelie    Biscoe           37.6          17.0               185
64     Adelie    Biscoe           41.1          18.2               192
65     Adelie    Biscoe           36.4          17.1               184
66     Adelie    Biscoe           41.6          18.0               192
67     Adelie    Biscoe           35.5          16.2               195
68     Adelie    Biscoe           41.1          19.1               188
69     Adelie Torgersen           35.9          16.6               190
70     Adelie Torgersen           41.8          19.4               198
71     Adelie Torgersen           33.5          19.0               190
72     Adelie Torgersen           39.7          18.4               190
73     Adelie Torgersen           39.6          17.2               196
74     Adelie Torgersen           45.8          18.9               197
75     Adelie Torgersen           35.5          17.5               190
76     Adelie Torgersen           42.8          18.5               195
77     Adelie Torgersen           40.9          16.8               191
78     Adelie Torgersen           37.2          19.4               184
79     Adelie Torgersen           36.2          16.1               187
80     Adelie Torgersen           42.1          19.1               195
81     Adelie Torgersen           34.6          17.2               189
82     Adelie Torgersen           42.9          17.6               196
83     Adelie Torgersen           36.7          18.8               187
84     Adelie Torgersen           35.1          19.4               193
85     Adelie     Dream           37.3          17.8               191
86     Adelie     Dream           41.3          20.3               194
87     Adelie     Dream           36.3          19.5               190
88     Adelie     Dream           36.9          18.6               189
89     Adelie     Dream           38.3          19.2               189
90     Adelie     Dream           38.9          18.8               190
91     Adelie     Dream           35.7          18.0               202
92     Adelie     Dream           41.1          18.1               205
93     Adelie     Dream           34.0          17.1               185
94     Adelie     Dream           39.6          18.1               186
95     Adelie     Dream           36.2          17.3               187
96     Adelie     Dream           40.8          18.9               208
97     Adelie     Dream           38.1          18.6               190
98     Adelie     Dream           40.3          18.5               196
99     Adelie     Dream           33.1          16.1               178
100    Adelie     Dream           43.2          18.5               192
101    Adelie    Biscoe           35.0          17.9               192
102    Adelie    Biscoe           41.0          20.0               203
103    Adelie    Biscoe           37.7          16.0               183
104    Adelie    Biscoe           37.8          20.0               190
105    Adelie    Biscoe           37.9          18.6               193
106    Adelie    Biscoe           39.7          18.9               184
107    Adelie    Biscoe           38.6          17.2               199
108    Adelie    Biscoe           38.2          20.0               190
109    Adelie    Biscoe           38.1          17.0               181
110    Adelie    Biscoe           43.2          19.0               197
111    Adelie    Biscoe           38.1          16.5               198
112    Adelie    Biscoe           45.6          20.3               191
113    Adelie    Biscoe           39.7          17.7               193
114    Adelie    Biscoe           42.2          19.5               197
115    Adelie    Biscoe           39.6          20.7               191
116    Adelie    Biscoe           42.7          18.3               196
117    Adelie Torgersen           38.6          17.0               188
118    Adelie Torgersen           37.3          20.5               199
119    Adelie Torgersen           35.7          17.0               189
120    Adelie Torgersen           41.1          18.6               189
121    Adelie Torgersen           36.2          17.2               187
122    Adelie Torgersen           37.7          19.8               198
123    Adelie Torgersen           40.2          17.0               176
124    Adelie Torgersen           41.4          18.5               202
125    Adelie Torgersen           35.2          15.9               186
126    Adelie Torgersen           40.6          19.0               199
127    Adelie Torgersen           38.8          17.6               191
128    Adelie Torgersen           41.5          18.3               195
129    Adelie Torgersen           39.0          17.1               191
130    Adelie Torgersen           44.1          18.0               210
131    Adelie Torgersen           38.5          17.9               190
132    Adelie Torgersen           43.1          19.2               197
133    Adelie     Dream           36.8          18.5               193
134    Adelie     Dream           37.5          18.5               199
135    Adelie     Dream           38.1          17.6               187
136    Adelie     Dream           41.1          17.5               190
137    Adelie     Dream           35.6          17.5               191
138    Adelie     Dream           40.2          20.1               200
139    Adelie     Dream           37.0          16.5               185
140    Adelie     Dream           39.7          17.9               193
141    Adelie     Dream           40.2          17.1               193
142    Adelie     Dream           40.6          17.2               187
143    Adelie     Dream           32.1          15.5               188
144    Adelie     Dream           40.7          17.0               190
145    Adelie     Dream           37.3          16.8               192
146    Adelie     Dream           39.0          18.7               185
147    Adelie     Dream           39.2          18.6               190
148    Adelie     Dream           36.6          18.4               184
149    Adelie     Dream           36.0          17.8               195
150    Adelie     Dream           37.8          18.1               193
151    Adelie     Dream           36.0          17.1               187
152    Adelie     Dream           41.5          18.5               201
153    Gentoo    Biscoe           46.1          13.2               211
154    Gentoo    Biscoe           50.0          16.3               230
155    Gentoo    Biscoe           48.7          14.1               210
156    Gentoo    Biscoe           50.0          15.2               218
157    Gentoo    Biscoe           47.6          14.5               215
158    Gentoo    Biscoe           46.5          13.5               210
159    Gentoo    Biscoe           45.4          14.6               211
160    Gentoo    Biscoe           46.7          15.3               219
161    Gentoo    Biscoe           43.3          13.4               209
162    Gentoo    Biscoe           46.8          15.4               215
163    Gentoo    Biscoe           40.9          13.7               214
164    Gentoo    Biscoe           49.0          16.1               216
165    Gentoo    Biscoe           45.5          13.7               214
166    Gentoo    Biscoe           48.4          14.6               213
167    Gentoo    Biscoe           45.8          14.6               210
168    Gentoo    Biscoe           49.3          15.7               217
169    Gentoo    Biscoe           42.0          13.5               210
170    Gentoo    Biscoe           49.2          15.2               221
171    Gentoo    Biscoe           46.2          14.5               209
172    Gentoo    Biscoe           48.7          15.1               222
173    Gentoo    Biscoe           50.2          14.3               218
174    Gentoo    Biscoe           45.1          14.5               215
175    Gentoo    Biscoe           46.5          14.5               213
176    Gentoo    Biscoe           46.3          15.8               215
177    Gentoo    Biscoe           42.9          13.1               215
178    Gentoo    Biscoe           46.1          15.1               215
179    Gentoo    Biscoe           44.5          14.3               216
180    Gentoo    Biscoe           47.8          15.0               215
181    Gentoo    Biscoe           48.2          14.3               210
182    Gentoo    Biscoe           50.0          15.3               220
183    Gentoo    Biscoe           47.3          15.3               222
184    Gentoo    Biscoe           42.8          14.2               209
185    Gentoo    Biscoe           45.1          14.5               207
186    Gentoo    Biscoe           59.6          17.0               230
187    Gentoo    Biscoe           49.1          14.8               220
188    Gentoo    Biscoe           48.4          16.3               220
189    Gentoo    Biscoe           42.6          13.7               213
190    Gentoo    Biscoe           44.4          17.3               219
191    Gentoo    Biscoe           44.0          13.6               208
192    Gentoo    Biscoe           48.7          15.7               208
193    Gentoo    Biscoe           42.7          13.7               208
194    Gentoo    Biscoe           49.6          16.0               225
195    Gentoo    Biscoe           45.3          13.7               210
196    Gentoo    Biscoe           49.6          15.0               216
197    Gentoo    Biscoe           50.5          15.9               222
198    Gentoo    Biscoe           43.6          13.9               217
199    Gentoo    Biscoe           45.5          13.9               210
200    Gentoo    Biscoe           50.5          15.9               225
201    Gentoo    Biscoe           44.9          13.3               213
202    Gentoo    Biscoe           45.2          15.8               215
203    Gentoo    Biscoe           46.6          14.2               210
204    Gentoo    Biscoe           48.5          14.1               220
205    Gentoo    Biscoe           45.1          14.4               210
206    Gentoo    Biscoe           50.1          15.0               225
207    Gentoo    Biscoe           46.5          14.4               217
208    Gentoo    Biscoe           45.0          15.4               220
209    Gentoo    Biscoe           43.8          13.9               208
210    Gentoo    Biscoe           45.5          15.0               220
211    Gentoo    Biscoe           43.2          14.5               208
212    Gentoo    Biscoe           50.4          15.3               224
213    Gentoo    Biscoe           45.3          13.8               208
214    Gentoo    Biscoe           46.2          14.9               221
215    Gentoo    Biscoe           45.7          13.9               214
216    Gentoo    Biscoe           54.3          15.7               231
217    Gentoo    Biscoe           45.8          14.2               219
218    Gentoo    Biscoe           49.8          16.8               230
219    Gentoo    Biscoe           46.2          14.4               214
220    Gentoo    Biscoe           49.5          16.2               229
221    Gentoo    Biscoe           43.5          14.2               220
222    Gentoo    Biscoe           50.7          15.0               223
223    Gentoo    Biscoe           47.7          15.0               216
224    Gentoo    Biscoe           46.4          15.6               221
225    Gentoo    Biscoe           48.2          15.6               221
226    Gentoo    Biscoe           46.5          14.8               217
227    Gentoo    Biscoe           46.4          15.0               216
228    Gentoo    Biscoe           48.6          16.0               230
229    Gentoo    Biscoe           47.5          14.2               209
230    Gentoo    Biscoe           51.1          16.3               220
231    Gentoo    Biscoe           45.2          13.8               215
232    Gentoo    Biscoe           45.2          16.4               223
233    Gentoo    Biscoe           49.1          14.5               212
234    Gentoo    Biscoe           52.5          15.6               221
235    Gentoo    Biscoe           47.4          14.6               212
236    Gentoo    Biscoe           50.0          15.9               224
237    Gentoo    Biscoe           44.9          13.8               212
238    Gentoo    Biscoe           50.8          17.3               228
239    Gentoo    Biscoe           43.4          14.4               218
240    Gentoo    Biscoe           51.3          14.2               218
241    Gentoo    Biscoe           47.5          14.0               212
242    Gentoo    Biscoe           52.1          17.0               230
243    Gentoo    Biscoe           47.5          15.0               218
244    Gentoo    Biscoe           52.2          17.1               228
245    Gentoo    Biscoe           45.5          14.5               212
246    Gentoo    Biscoe           49.5          16.1               224
247    Gentoo    Biscoe           44.5          14.7               214
248    Gentoo    Biscoe           50.8          15.7               226
249    Gentoo    Biscoe           49.4          15.8               216
250    Gentoo    Biscoe           46.9          14.6               222
251    Gentoo    Biscoe           48.4          14.4               203
252    Gentoo    Biscoe           51.1          16.5               225
253    Gentoo    Biscoe           48.5          15.0               219
254    Gentoo    Biscoe           55.9          17.0               228
255    Gentoo    Biscoe           47.2          15.5               215
256    Gentoo    Biscoe           49.1          15.0               228
257    Gentoo    Biscoe           47.3          13.8               216
258    Gentoo    Biscoe           46.8          16.1               215
259    Gentoo    Biscoe           41.7          14.7               210
260    Gentoo    Biscoe           53.4          15.8               219
261    Gentoo    Biscoe           43.3          14.0               208
262    Gentoo    Biscoe           48.1          15.1               209
263    Gentoo    Biscoe           50.5          15.2               216
264    Gentoo    Biscoe           49.8          15.9               229
265    Gentoo    Biscoe           43.5          15.2               213
266    Gentoo    Biscoe           51.5          16.3               230
267    Gentoo    Biscoe           46.2          14.1               217
268    Gentoo    Biscoe           55.1          16.0               230
269    Gentoo    Biscoe           44.5          15.7               217
270    Gentoo    Biscoe           48.8          16.2               222
271    Gentoo    Biscoe           47.2          13.7               214
272    Gentoo    Biscoe             NA            NA                NA
273    Gentoo    Biscoe           46.8          14.3               215
274    Gentoo    Biscoe           50.4          15.7               222
275    Gentoo    Biscoe           45.2          14.8               212
276    Gentoo    Biscoe           49.9          16.1               213
277 Chinstrap     Dream           46.5          17.9               192
278 Chinstrap     Dream           50.0          19.5               196
279 Chinstrap     Dream           51.3          19.2               193
280 Chinstrap     Dream           45.4          18.7               188
281 Chinstrap     Dream           52.7          19.8               197
282 Chinstrap     Dream           45.2          17.8               198
283 Chinstrap     Dream           46.1          18.2               178
284 Chinstrap     Dream           51.3          18.2               197
285 Chinstrap     Dream           46.0          18.9               195
286 Chinstrap     Dream           51.3          19.9               198
287 Chinstrap     Dream           46.6          17.8               193
288 Chinstrap     Dream           51.7          20.3               194
289 Chinstrap     Dream           47.0          17.3               185
290 Chinstrap     Dream           52.0          18.1               201
291 Chinstrap     Dream           45.9          17.1               190
292 Chinstrap     Dream           50.5          19.6               201
293 Chinstrap     Dream           50.3          20.0               197
294 Chinstrap     Dream           58.0          17.8               181
295 Chinstrap     Dream           46.4          18.6               190
296 Chinstrap     Dream           49.2          18.2               195
297 Chinstrap     Dream           42.4          17.3               181
298 Chinstrap     Dream           48.5          17.5               191
299 Chinstrap     Dream           43.2          16.6               187
300 Chinstrap     Dream           50.6          19.4               193
301 Chinstrap     Dream           46.7          17.9               195
302 Chinstrap     Dream           52.0          19.0               197
303 Chinstrap     Dream           50.5          18.4               200
304 Chinstrap     Dream           49.5          19.0               200
305 Chinstrap     Dream           46.4          17.8               191
306 Chinstrap     Dream           52.8          20.0               205
307 Chinstrap     Dream           40.9          16.6               187
308 Chinstrap     Dream           54.2          20.8               201
309 Chinstrap     Dream           42.5          16.7               187
310 Chinstrap     Dream           51.0          18.8               203
311 Chinstrap     Dream           49.7          18.6               195
312 Chinstrap     Dream           47.5          16.8               199
313 Chinstrap     Dream           47.6          18.3               195
314 Chinstrap     Dream           52.0          20.7               210
315 Chinstrap     Dream           46.9          16.6               192
316 Chinstrap     Dream           53.5          19.9               205
317 Chinstrap     Dream           49.0          19.5               210
318 Chinstrap     Dream           46.2          17.5               187
319 Chinstrap     Dream           50.9          19.1               196
320 Chinstrap     Dream           45.5          17.0               196
321 Chinstrap     Dream           50.9          17.9               196
322 Chinstrap     Dream           50.8          18.5               201
323 Chinstrap     Dream           50.1          17.9               190
324 Chinstrap     Dream           49.0          19.6               212
325 Chinstrap     Dream           51.5          18.7               187
326 Chinstrap     Dream           49.8          17.3               198
327 Chinstrap     Dream           48.1          16.4               199
328 Chinstrap     Dream           51.4          19.0               201
329 Chinstrap     Dream           45.7          17.3               193
330 Chinstrap     Dream           50.7          19.7               203
331 Chinstrap     Dream           42.5          17.3               187
332 Chinstrap     Dream           52.2          18.8               197
333 Chinstrap     Dream           45.2          16.6               191
334 Chinstrap     Dream           49.3          19.9               203
335 Chinstrap     Dream           50.2          18.8               202
336 Chinstrap     Dream           45.6          19.4               194
337 Chinstrap     Dream           51.9          19.5               206
338 Chinstrap     Dream           46.8          16.5               189
339 Chinstrap     Dream           45.7          17.0               195
340 Chinstrap     Dream           55.8          19.8               207
341 Chinstrap     Dream           43.5          18.1               202
342 Chinstrap     Dream           49.6          18.2               193
343 Chinstrap     Dream           50.8          19.0               210
344 Chinstrap     Dream           50.2          18.7               198
    body_mass_g    sex year
1          3750   male 2007
2          3800 female 2007
3          3250 female 2007
4            NA   &lt;NA&gt; 2007
5          3450 female 2007
6          3650   male 2007
7          3625 female 2007
8          4675   male 2007
9          3475   &lt;NA&gt; 2007
10         4250   &lt;NA&gt; 2007
11         3300   &lt;NA&gt; 2007
12         3700   &lt;NA&gt; 2007
13         3200 female 2007
14         3800   male 2007
15         4400   male 2007
16         3700 female 2007
17         3450 female 2007
18         4500   male 2007
19         3325 female 2007
20         4200   male 2007
21         3400 female 2007
22         3600   male 2007
23         3800 female 2007
24         3950   male 2007
25         3800   male 2007
26         3800 female 2007
27         3550   male 2007
28         3200 female 2007
29         3150 female 2007
30         3950   male 2007
31         3250 female 2007
32         3900   male 2007
33         3300 female 2007
34         3900   male 2007
35         3325 female 2007
36         4150   male 2007
37         3950   male 2007
38         3550 female 2007
39         3300 female 2007
40         4650   male 2007
41         3150 female 2007
42         3900   male 2007
43         3100 female 2007
44         4400   male 2007
45         3000 female 2007
46         4600   male 2007
47         3425   male 2007
48         2975   &lt;NA&gt; 2007
49         3450 female 2007
50         4150   male 2007
51         3500 female 2008
52         4300   male 2008
53         3450 female 2008
54         4050   male 2008
55         2900 female 2008
56         3700   male 2008
57         3550 female 2008
58         3800   male 2008
59         2850 female 2008
60         3750   male 2008
61         3150 female 2008
62         4400   male 2008
63         3600 female 2008
64         4050   male 2008
65         2850 female 2008
66         3950   male 2008
67         3350 female 2008
68         4100   male 2008
69         3050 female 2008
70         4450   male 2008
71         3600 female 2008
72         3900   male 2008
73         3550 female 2008
74         4150   male 2008
75         3700 female 2008
76         4250   male 2008
77         3700 female 2008
78         3900   male 2008
79         3550 female 2008
80         4000   male 2008
81         3200 female 2008
82         4700   male 2008
83         3800 female 2008
84         4200   male 2008
85         3350 female 2008
86         3550   male 2008
87         3800   male 2008
88         3500 female 2008
89         3950   male 2008
90         3600 female 2008
91         3550 female 2008
92         4300   male 2008
93         3400 female 2008
94         4450   male 2008
95         3300 female 2008
96         4300   male 2008
97         3700 female 2008
98         4350   male 2008
99         2900 female 2008
100        4100   male 2008
101        3725 female 2009
102        4725   male 2009
103        3075 female 2009
104        4250   male 2009
105        2925 female 2009
106        3550   male 2009
107        3750 female 2009
108        3900   male 2009
109        3175 female 2009
110        4775   male 2009
111        3825 female 2009
112        4600   male 2009
113        3200 female 2009
114        4275   male 2009
115        3900 female 2009
116        4075   male 2009
117        2900 female 2009
118        3775   male 2009
119        3350 female 2009
120        3325   male 2009
121        3150 female 2009
122        3500   male 2009
123        3450 female 2009
124        3875   male 2009
125        3050 female 2009
126        4000   male 2009
127        3275 female 2009
128        4300   male 2009
129        3050 female 2009
130        4000   male 2009
131        3325 female 2009
132        3500   male 2009
133        3500 female 2009
134        4475   male 2009
135        3425 female 2009
136        3900   male 2009
137        3175 female 2009
138        3975   male 2009
139        3400 female 2009
140        4250   male 2009
141        3400 female 2009
142        3475   male 2009
143        3050 female 2009
144        3725   male 2009
145        3000 female 2009
146        3650   male 2009
147        4250   male 2009
148        3475 female 2009
149        3450 female 2009
150        3750   male 2009
151        3700 female 2009
152        4000   male 2009
153        4500 female 2007
154        5700   male 2007
155        4450 female 2007
156        5700   male 2007
157        5400   male 2007
158        4550 female 2007
159        4800 female 2007
160        5200   male 2007
161        4400 female 2007
162        5150   male 2007
163        4650 female 2007
164        5550   male 2007
165        4650 female 2007
166        5850   male 2007
167        4200 female 2007
168        5850   male 2007
169        4150 female 2007
170        6300   male 2007
171        4800 female 2007
172        5350   male 2007
173        5700   male 2007
174        5000 female 2007
175        4400 female 2007
176        5050   male 2007
177        5000 female 2007
178        5100   male 2007
179        4100   &lt;NA&gt; 2007
180        5650   male 2007
181        4600 female 2007
182        5550   male 2007
183        5250   male 2007
184        4700 female 2007
185        5050 female 2007
186        6050   male 2007
187        5150 female 2008
188        5400   male 2008
189        4950 female 2008
190        5250   male 2008
191        4350 female 2008
192        5350   male 2008
193        3950 female 2008
194        5700   male 2008
195        4300 female 2008
196        4750   male 2008
197        5550   male 2008
198        4900 female 2008
199        4200 female 2008
200        5400   male 2008
201        5100 female 2008
202        5300   male 2008
203        4850 female 2008
204        5300   male 2008
205        4400 female 2008
206        5000   male 2008
207        4900 female 2008
208        5050   male 2008
209        4300 female 2008
210        5000   male 2008
211        4450 female 2008
212        5550   male 2008
213        4200 female 2008
214        5300   male 2008
215        4400 female 2008
216        5650   male 2008
217        4700 female 2008
218        5700   male 2008
219        4650   &lt;NA&gt; 2008
220        5800   male 2008
221        4700 female 2008
222        5550   male 2008
223        4750 female 2008
224        5000   male 2008
225        5100   male 2008
226        5200 female 2008
227        4700 female 2008
228        5800   male 2008
229        4600 female 2008
230        6000   male 2008
231        4750 female 2008
232        5950   male 2008
233        4625 female 2009
234        5450   male 2009
235        4725 female 2009
236        5350   male 2009
237        4750 female 2009
238        5600   male 2009
239        4600 female 2009
240        5300   male 2009
241        4875 female 2009
242        5550   male 2009
243        4950 female 2009
244        5400   male 2009
245        4750 female 2009
246        5650   male 2009
247        4850 female 2009
248        5200   male 2009
249        4925   male 2009
250        4875 female 2009
251        4625 female 2009
252        5250   male 2009
253        4850 female 2009
254        5600   male 2009
255        4975 female 2009
256        5500   male 2009
257        4725   &lt;NA&gt; 2009
258        5500   male 2009
259        4700 female 2009
260        5500   male 2009
261        4575 female 2009
262        5500   male 2009
263        5000 female 2009
264        5950   male 2009
265        4650 female 2009
266        5500   male 2009
267        4375 female 2009
268        5850   male 2009
269        4875   &lt;NA&gt; 2009
270        6000   male 2009
271        4925 female 2009
272          NA   &lt;NA&gt; 2009
273        4850 female 2009
274        5750   male 2009
275        5200 female 2009
276        5400   male 2009
277        3500 female 2007
278        3900   male 2007
279        3650   male 2007
280        3525 female 2007
281        3725   male 2007
282        3950 female 2007
283        3250 female 2007
284        3750   male 2007
285        4150 female 2007
286        3700   male 2007
287        3800 female 2007
288        3775   male 2007
289        3700 female 2007
290        4050   male 2007
291        3575 female 2007
292        4050   male 2007
293        3300   male 2007
294        3700 female 2007
295        3450 female 2007
296        4400   male 2007
297        3600 female 2007
298        3400   male 2007
299        2900 female 2007
300        3800   male 2007
301        3300 female 2007
302        4150   male 2007
303        3400 female 2008
304        3800   male 2008
305        3700 female 2008
306        4550   male 2008
307        3200 female 2008
308        4300   male 2008
309        3350 female 2008
310        4100   male 2008
311        3600   male 2008
312        3900 female 2008
313        3850 female 2008
314        4800   male 2008
315        2700 female 2008
316        4500   male 2008
317        3950   male 2008
318        3650 female 2008
319        3550   male 2008
320        3500 female 2008
321        3675 female 2009
322        4450   male 2009
323        3400 female 2009
324        4300   male 2009
325        3250   male 2009
326        3675 female 2009
327        3325 female 2009
328        3950   male 2009
329        3600 female 2009
330        4050   male 2009
331        3350 female 2009
332        3450   male 2009
333        3250 female 2009
334        4050   male 2009
335        3800   male 2009
336        3525 female 2009
337        3950   male 2009
338        3650 female 2009
339        3650 female 2009
340        4000   male 2009
341        3400 female 2009
342        3775   male 2009
343        4100   male 2009
344        3775 female 2009</code></pre>
</div>
</div>
<ul>
<li><code>tibbles</code> only print 10 rows by default, data.frames a lot more.</li>
<li><code>tibbles</code> only print as many columns as possible in one row, which looks a lot cleaner.</li>
<li>On top, the <code>tibble</code> shows us how many rows and columns there are in our data.</li>
<li><code>NAs</code> are printed in red in <code>tibbles</code> (not in this output, but try it yourself).</li>
<li>The data-type of each column is printed on top of the column in <code>tibbles</code>.</li>
</ul>
</div>
</div>
</div>
<ol start="5" type="1">
<li>Save your penguins <code>data.frame</code> and your penguins <code>tibble</code> as <code>.RDS</code> files in a dedicated <code>data</code> folder in your R-project. Use relative paths!</li>
</ol>
<div class="callout callout-style-default callout-caution callout-titled">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-7-contents" aria-controls="callout-7" aria-expanded="false" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Solution
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-7" class="callout-7-contents callout-collapse collapse">
<div class="callout-body-container callout-body">
<div class="cell">
<div class="sourceCode cell-code" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb13-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">saveRDS</span>(penguins, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">file =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"./data/penguins.RDS"</span>)</span>
<span id="cb13-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">saveRDS</span>(penguins_frame, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">file =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"./data/penguins_frame.RDS"</span>)</span></code></pre></div>
</div>
</div>
</div>
</div>
<ol start="6" type="1">
<li>Load your penguins <code>data.frame</code> and your penguins <code>tibble</code> into R. Use the <code>here</code> package.</li>
</ol>
<div class="callout callout-style-default callout-caution callout-titled">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-8-contents" aria-controls="callout-8" aria-expanded="false" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Solution
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-8" class="callout-8-contents callout-collapse collapse">
<div class="callout-body-container callout-body">
<div class="cell">
<div class="sourceCode cell-code" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb14-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(here)</span>
<span id="cb14-2"></span>
<span id="cb14-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">readRDS</span>(here<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">here</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"data"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"penguins.RDS"</span>))</span>
<span id="cb14-4"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">readRDS</span>(here<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">here</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"data"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"penguins_frame.RDS"</span>))</span></code></pre></div>
</div>
</div>
</div>
</div>


</section>


<div id="quarto-appendix" class="default"><section id="footnotes" class="footnotes footnotes-end-of-document"><h2 class="anchored quarto-appendix-heading">Footnotes</h2>

<ol>
<li id="fn1"><p>Image by <a href="https://unsplash.com/de/@barnimages?utm_content=creditCopyText&amp;utm_medium=referral&amp;utm_source=unsplash">Barn Images</a> on <a href="https://unsplash.com/de/fotos/verschiedene-handwerkzeuge-im-werkzeugregal-t5YUoHW6zRo?utm_content=creditCopyText&amp;utm_medium=referral&amp;utm_source=unsplash">Unsplash</a>.↩︎</p></li>
</ol>
</section></div> ]]></description>
  <category>R</category>
  <category>tidyverse</category>
  <category>R-SIG</category>
  <category>intro</category>
  <guid>https://iqb-research.github.io/IQB-Methods/docs/r_sig/24_01_26_tidyverse_intro/</guid>
  <pubDate>Mon, 26 Feb 2024 00:00:00 GMT</pubDate>
  <media:content url="https://iqb-research.github.io/IQB-Methods/docs/r_sig/24_01_26_tidyverse_intro/preview_image.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Using Checkmate</title>
  <dc:creator>Edna Grewers</dc:creator>
  <link>https://iqb-research.github.io/IQB-Methods/docs/R_tutorials/checkmate.html</link>
  <description><![CDATA[ 




<p>With the checkmate package you can test, check and assert all kinds of arguments regarding type, length and much more. You can also write your own assert-functions.</p>
<p><img src="https://iqb-research.github.io/IQB-Methods/docs/R_tutorials/images/checkmate.jpg" class="img-fluid"><sup>1</sup></p>
<section id="intro" class="level1">
<h1>Intro</h1>
<p>In this Vignette you can get a broad understand how the package works, how the output looks like and some example functions. For more details and a complete overview go to <a href="https://cran.r-project.org/web/packages/checkmate/index.html">CRAN</a>, specifically the <a href="https://cran.r-project.org/web/packages/checkmate/checkmate.pdf">checkmate.pdf</a> or use the following line of code:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">lsf.str</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"package:checkmate"</span>)</span></code></pre></div>
</div>
<section id="setup" class="level2">
<h2 class="anchored" data-anchor-id="setup">Setup</h2>
<p>Install the package from <code>CRAN</code> with the following code. Then load it in your library.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb2-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">install.packages</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"checkmate"</span>)</span></code></pre></div>
</div>
<div class="cell">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb3-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(checkmate)</span></code></pre></div>
</div>
</section>
<section id="different-outputs" class="level2">
<h2 class="anchored" data-anchor-id="different-outputs">Different Outputs</h2>
<p>There are three main functions that we use: <code>test</code>, <code>check</code> and <code>assert</code>, which do similar things but produce different outputs. All functions have two ways to write them: <code>test_numeric()</code> with an underscore and <code>testNumeric()</code> with a capital Letter, but they both work the same. For simplicity we’ll just use one option.</p>
<p>To show the differences in outputs we check arguments for numeric input, as an example. See below to see checks for different types or attributes.</p>
<p><strong>Test</strong></p>
<p>Test-functions test whether an argument has certain attributes and gives you <code>TRUE</code> or <code>FALSE</code> output.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb4-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">test_numeric</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] TRUE</code></pre>
</div>
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb6-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">test_numeric</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"hallo"</span>) </span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] FALSE</code></pre>
</div>
</div>
<p><strong>Check</strong></p>
<p>Check-functions check whether an argument has certain attributes and gives you <code>TRUE</code> or a <code>string</code> containing an error message as an output. In the string you can see what kind of argument you should have given, and what you did wrong.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb8-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">check_numeric</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] TRUE</code></pre>
</div>
<div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb10-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">check_numeric</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"hallo"</span>) </span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "Must be of type 'numeric', not 'character'"</code></pre>
</div>
</div>
<p><strong>Assert</strong></p>
<p>Assert-functions assert whether an argument has certain attributes and throw an <code>error message</code> if you it doesn’t. When you did everything correct, it doesn’t create an output. The <code>error message</code> contains the <code>string</code> from the <code>check</code>-functions.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb12-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">assert_numeric</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>))</span>
<span id="cb12-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">assert_numeric</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"hallo"</span>)</span></code></pre></div>
<div class="cell-output cell-output-error">
<pre><code>Error: Assertion on '"hallo"' failed: Must be of type 'numeric', not 'character'.</code></pre>
</div>
</div>
<p>If you save an <code>assert_numeric()</code> object into a variable x, it will contain the original object that you asserted.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb14-1">x <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">assert_numeric</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>))</span>
<span id="cb14-2">x</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] 6 5 4 3 2 1 4</code></pre>
</div>
</div>
</section>
<section id="checking-for-type" class="level2">
<h2 class="anchored" data-anchor-id="checking-for-type">Checking for Type</h2>
<p>With <code>lsf.str()</code> you can see all functions of the package.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb16" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb16-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">lsf.str</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"package:checkmate"</span>)</span></code></pre></div>
</div>
<p>You can check for specific types of arguments e.g.&nbsp;<code>numeric</code>, <code>number</code>, <code>integer</code>, <code>double</code>, <code>character</code>, <code>string</code>, <code>logical</code>, <code>flag</code>, <code>missing</code>, or data structure e.g.&nbsp;<code>list</code>, <code>data_frame</code>, <code>array</code> and so on. You can also look for attributes e.g.&nbsp;<code>true</code>, <code>subset</code>, <code>named</code> or <code>atomic</code>, and much more.</p>
<p>Depending on what kind of output you want, you choose your function.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb17-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">check_list</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">list</span>())</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] TRUE</code></pre>
</div>
<div class="sourceCode cell-code" id="cb19" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb19-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">check_list</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">9</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "Must be of type 'list', not 'integer'"</code></pre>
</div>
</div>
<p>If you are looking for a specific function you can use:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb21" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb21-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ls</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"package:checkmate"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">pattern =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"atomic"</span>) </span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "assert_atomic"        "assert_atomic_vector" "check_atomic"        
[4] "check_atomic_vector"  "expect_atomic"        "expect_atomic_vector"
[7] "test_atomic"          "test_atomic_vector"  </code></pre>
</div>
</div>
<section id="checking-for-type-data-frames" class="level3">
<h3 class="anchored" data-anchor-id="checking-for-type-data-frames">Checking for Type: Data Frames</h3>
<p>If you want to check the types of elements of a more complex data structure like a <code>list</code> or a <code>data frame</code>, you have to look at the arguments of the functions. Both have the argument <code>types</code>.</p>
<p>First we create an example data frame with rows and columns named. It has numeric and character elements.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb23" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb23-1">df <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">data.frame</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">klein =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">mittel =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>, groß <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"7"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"8"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"9"</span>), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">row.names =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"A"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"B"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"C"</span>))</span>
<span id="cb23-2">df</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>  klein mittel groß
A     1      4    7
B     2      5    8
C     3      6    9</code></pre>
</div>
</div>
<p>Now we can check for the types of the elements using the <code>types</code> argument. You can look at the whole data frame with <code>df</code>, at single columns using <code>df[1]</code> or <code>df[klein]</code> or at single rows using <code>df[1,]</code>. The error message will tell you the first element that has a type you didn’t check for.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb25" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb25-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># checking the whole data frame</span></span>
<span id="cb25-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">check_data_frame</span>(df, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">types =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"numeric"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"character"</span>))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] TRUE</code></pre>
</div>
<div class="sourceCode cell-code" id="cb27" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb27-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">check_data_frame</span>(df, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">types =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"numeric"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "May only contain the following types: {numeric}, but element 3 has type 'character'"</code></pre>
</div>
<div class="sourceCode cell-code" id="cb29" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb29-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># checking individual columns</span></span>
<span id="cb29-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">check_data_frame</span>(df[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>], <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">types =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"numeric"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] TRUE</code></pre>
</div>
<div class="sourceCode cell-code" id="cb31" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb31-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">check_data_frame</span>(df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"klein"</span>], <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">types =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"numeric"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] TRUE</code></pre>
</div>
<div class="sourceCode cell-code" id="cb33" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb33-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">check_data_frame</span>(df[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>], <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">types =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"numeric"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "May only contain the following types: {numeric}, but element 1 has type 'character'"</code></pre>
</div>
<div class="sourceCode cell-code" id="cb35" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb35-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># checking for individual rows</span></span>
<span id="cb35-2">df[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,]</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>  klein mittel groß
A     1      4    7</code></pre>
</div>
<div class="sourceCode cell-code" id="cb37" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb37-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">check_data_frame</span>(df[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,], <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">types =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"numeric"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "May only contain the following types: {numeric}, but element 3 has type 'character'"</code></pre>
</div>
</div>
<p>You can also check the type of individual elements with <code>df[1,1]</code> or just the content of the columns by loosing the attributes of the data frame with <code>df$klein</code> or <code>df[,1]</code>. In this example they all have type <code>integer</code>. Now <code>check_data_frame()</code> doesn’t work anymore, because the data is no longer a data frame. You can use the normal checks from above.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb39" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb39-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">check_data_frame</span>(df<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>klein, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">types =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"numeric"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "Must be of type 'data.frame', not 'integer'"</code></pre>
</div>
<div class="sourceCode cell-code" id="cb41" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb41-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">check_integer</span>(df<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>klein)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] TRUE</code></pre>
</div>
<div class="sourceCode cell-code" id="cb43" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb43-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">check_numeric</span>(df[,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>])</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] TRUE</code></pre>
</div>
<div class="sourceCode cell-code" id="cb45" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb45-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">check_double</span>(df[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>])</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "Must be of type 'double', not 'integer'"</code></pre>
</div>
</div>
</section>
<section id="checking-for-type-lists" class="level3">
<h3 class="anchored" data-anchor-id="checking-for-type-lists">Checking for Type: Lists</h3>
<p>Lists work the same way. We create an example list a, with named elements of different types.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb47" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb47-1">a <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">list</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">zahlen =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">9</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">mon =</span> month.abb, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">creator =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"IQB"</span>)</span>
<span id="cb47-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">assert_list</span>(a, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">types =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"numeric"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"character"</span>))</span>
<span id="cb47-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">assert_character</span>(a<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>mon)</span></code></pre></div>
</div>
</section>
</section>
<section id="checking-for-length" class="level2">
<h2 class="anchored" data-anchor-id="checking-for-length">Checking for Length</h2>
<p>You can check if an argument is <code>scalar</code>, but you cannot check for arbitrary lengths this way.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb48" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb48-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">check_scalar</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] TRUE</code></pre>
</div>
<div class="sourceCode cell-code" id="cb50" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb50-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">check_scalar</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "Must have length 1"</code></pre>
</div>
<div class="sourceCode cell-code" id="cb52" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb52-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ls</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"package:checkmate"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">pattern =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"length"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>character(0)</code></pre>
</div>
</div>
<p>To check for arbitrary length of an argument, you have to use the <code>len</code> argument from the <code>test</code>, <code>check</code> or <code>assert</code> functions.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb54" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb54-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">check_character</span>(month.abb, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">len =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">12</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] TRUE</code></pre>
</div>
<div class="sourceCode cell-code" id="cb56" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb56-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">check_character</span>(month.abb, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">len =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">11</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "Must have length 11, but has length 12"</code></pre>
</div>
</div>
<p>There are some other attributes you can check like this, e.g.&nbsp;<code>min.len</code>, <code>max.len</code>, <code>unique</code> or the length of elements in character vectors using <code>n.chars</code>, <code>min.chars</code> or <code>max.chars</code>.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb58" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb58-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">check_character</span>(month.abb, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">n.chars =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">min.chars =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] TRUE</code></pre>
</div>
<div class="sourceCode cell-code" id="cb60" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb60-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">check_character</span>(month.abb, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">n.chars =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "All elements must have exactly 2 characters, but element 1 has 3 chararacters"</code></pre>
</div>
<div class="sourceCode cell-code" id="cb62" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb62-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">check_character</span>(month.abb, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">n.chars =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">max.chars =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "All elements must have at most 2 characters, but element 1 has 3 characters"</code></pre>
</div>
</div>
<p>For more info what arguments you can check, type <code>?check_character</code> in the console.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb64" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb64-1">?check_character</span></code></pre></div>
</div>
<p>You can also check the lengths of <strong>lists</strong> or the length of columns/rows of a <strong>data frame</strong> in a similar way by using our example objects from above.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb65" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb65-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">assert_list</span>(a, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">len =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">min.len =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">max.len =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>)</span>
<span id="cb65-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">assert_data_frame</span>(df, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">min.cols =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">max.cols =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">ncols =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>)</span></code></pre></div>
</div>
</section>
<section id="checking-names-via-subset" class="level2">
<h2 class="anchored" data-anchor-id="checking-names-via-subset">Checking Names via Subset</h2>
<p>You cannot check the names of complex objects directly. With the <strong>list</strong> or <strong>data_frame</strong> functions you can only check if the objects is named at all, or if the names are unique via the arguments <code>names</code> for lists and <code>col.names</code> or `<code>row.names</code> for data frames. Again using our example objects.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb66" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb66-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># a &lt;- list(zahlen = 1:9, mon = month.abb, creator = "IQB")</span></span>
<span id="cb66-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># df &lt;- data.frame(klein = 1:3, mittel = 4:6, groß = c("7", "8", "9"), row.names = c("A", "B", "C"))</span></span>
<span id="cb66-3"></span>
<span id="cb66-4"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">assert_list</span>(a, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">names =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"named"</span>)</span>
<span id="cb66-5"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">assert_data_frame</span>(df, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">col.names =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"unique"</span>)</span></code></pre></div>
</div>
<p>You can check for specific names by using the <code>subset</code> functions. You can check whether the object give the argument <code>choices</code> contains <code>x</code>. If <code>x</code> is not a subset of <code>choices</code> you’ll get an error message.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb67" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb67-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># lists</span></span>
<span id="cb67-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">check_subset</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"mon"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">choices =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">names</span>(a))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] TRUE</code></pre>
</div>
<div class="sourceCode cell-code" id="cb69" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb69-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># data frames</span></span>
<span id="cb69-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">check_subset</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"klein"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"mittel"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"groß"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"größer"</span>), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">choices =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">colnames</span>(df))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "Must be a subset of {'klein','mittel','groß'}, but has additional elements {'größer'}"</code></pre>
</div>
</div>
<p>You can also check for unique values or missings in a similar way. For more info see the help functions.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb71" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb71-1">?assert_list</span>
<span id="cb71-2">?assert_data_frame</span></code></pre></div>
</div>


</section>
</section>


<div id="quarto-appendix" class="default"><section id="footnotes" class="footnotes footnotes-end-of-document"><h2 class="anchored quarto-appendix-heading">Footnotes</h2>

<ol>
<li id="fn1"><p>Image by <a href="https://unsplash.com/de/@felix_mittermeier">Felix Mittermeier</a> on <a href="https://unsplash.com/de/fotos/schachfiguren-auf-dem-brett-nAjil1z3eLk">Unsplash</a>↩︎</p></li>
</ol>
</section></div> ]]></description>
  <category>R</category>
  <category>checkmate</category>
  <category>tutorial</category>
  <category>intro</category>
  <guid>https://iqb-research.github.io/IQB-Methods/docs/R_tutorials/checkmate.html</guid>
  <pubDate>Fri, 01 Dec 2023 00:00:00 GMT</pubDate>
  <media:content url="https://iqb-research.github.io/IQB-Methods/docs/R_tutorials/images/checkmate.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Reproducibility with renv</title>
  <dc:creator>Nicklas Hafiz</dc:creator>
  <link>https://iqb-research.github.io/IQB-Methods/docs/r_sig/23_11_06_renv/</link>
  <description><![CDATA[ 




<p><img src="https://iqb-research.github.io/IQB-Methods/docs/r_sig/23_11_06_renv/renv.jpg" class="img-fluid"><sup>1</sup></p>
<section id="motivation" class="level2">
<h2 class="anchored" data-anchor-id="motivation">Motivation</h2>
<p>Package versions will change over time. The same goes for R versions. As a consequence, they might work different in the future, which can make it difficult to reproduce your scripts. Therefore it is considered good practice to note down the package and R-versions you use. The package <a href="https://rstudio.github.io/renv/articles/renv.html">renv</a> can help you with that. Look <a href="https://rstudio.github.io/renv/articles/renv.html#getting-started">here</a> for the official getting started page.</p>
</section>
<section id="workflow" class="level2">
<h2 class="anchored" data-anchor-id="workflow">Workflow</h2>
<p>First, create an RStudio Project in the working directory that should be made reproducible (if you haven’t already).<br>
If another R-version should be used in your project, switch to that version. On Windows, you can simply install multiple versions of R and switch between them in RStudio by going to <code>Tools - Global Options - General</code>. Maybe you will have to install <code>renv</code> for this version again.</p>
<p>Then, initialize the project:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># install.packages(renv)</span></span>
<span id="cb1-2">renv<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">init</span>()</span></code></pre></div>
</div>
<p>This will create the basic infrastructure for the usage of <code>renv</code> mainly will do two things:</p>
<ol type="1">
<li>Create a project specific package library in the folder <code>renv</code> in your working directory, which contains all the packages currently used by the project. This means different projects can use different package versions, and even different R-Versions. Don’t be confused, the <code>renv</code> folder can get quite big and isn’t uploaded to GitHub by default.</li>
<li>A <code>.lock</code> file, where the R version and the package versions get documented. From this <code>.lock</code> file we can restore the used packages.</li>
</ol>
<p>By the way, it doesn’t matter if you do this in the beginning of your project, in between or at the end. <code>renv::init()</code> will automatically setup the project with all the packages you have used in the project.</p>
<p>The rest of your workflow is pretty similar to what you are used to: If you need a new package for you project, you install it like you normally would. You can also use <code>renv::install()</code> which has some additional features compared to <code>install.packages())</code>. For example, you can install specific package versions: <code>renv::install("dplyr@1.1.1")</code>. No matter which one you use: The package will be installed into a global cache, and a link to that package will be put into your project specific library. Then you load your package like you normally would with <code>library()</code>.</p>
<div class="callout callout-style-default callout-caution callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Caution
</div>
</div>
<div class="callout-body-container callout-body">
<p>In case you are using a <code>renv</code> project not locally but on the IQB-drive, the links won’t work, and <code>renv</code> will have to download and install the packages newly into your directory.</p>
</div>
</div>
<p>The next step is to write the package into your <code>.lock</code> file:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb2-1">renv<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">snapshot</span>()</span></code></pre></div>
</div>
<p>This will update the <code>.lock</code> file with your new package.</p>
<p>If on the other hand you want to restore the packages from the <code>.lock</code> file, use:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb3-1">renv<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">restore</span>()</span></code></pre></div>
</div>
<p>This will install all packages that are not already in your project specific library with the package version that is documented in the lock file into your project specific library.</p>
<p>You can update your dependencies to the latest version using:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb4-1">renv<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">update</span>()</span></code></pre></div>
</div>
</section>
<section id="package-versions" class="level2">
<h2 class="anchored" data-anchor-id="package-versions">Package Versions</h2>
<p>If you want to install specific package versions, you can use</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb5-1">renv<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">intit</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">bare =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>)</span></code></pre></div>
</div>
<p>in the beginning. This sets up the <code>renv</code> project without trying to find the used dependencies. Thus, you can install the specific versions manually afterward:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb6-1">renv<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">install</span>(packagename<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">@</span>version<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>number)</span></code></pre></div>
</div>
<p>For example:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb7-1">renv<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">install</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"tidyselect@1.1.2"</span>)</span></code></pre></div>
</div>
<p>Local packages or packages from GitHub can be installed as well (see <a href="https://rstudio.github.io/renv/reference/install.html">here</a>).</p>
<p><a href="https://packagemanager.posit.co/client/#/">Posit Public Package Manager</a> contains the CRAN history of CRAN packages back to 2014. Package version historys can be found here easily, for example, when a script was finished on 06.05.22, we can look up which package version was the current one on that day.</p>


</section>


<div id="quarto-appendix" class="default"><section id="footnotes" class="footnotes footnotes-end-of-document"><h2 class="anchored quarto-appendix-heading">Footnotes</h2>

<ol>
<li id="fn1"><p>Image by <a href="https://unsplash.com/de/@nagaranbasaran?utm_content=creditCopyText&amp;utm_medium=referral&amp;utm_source=unsplash">Nagara Oyodo</a> on <a href="https://unsplash.com/de/fotos/grune-pflanze-auf-grauem-fels-kE0o9syjDZQ">Unsplash</a>.↩︎</p></li>
</ol>
</section></div> ]]></description>
  <category>R</category>
  <category>renv</category>
  <category>R-SIG</category>
  <category>workflow</category>
  <category>tutorial</category>
  <guid>https://iqb-research.github.io/IQB-Methods/docs/r_sig/23_11_06_renv/</guid>
  <pubDate>Mon, 23 Oct 2023 00:00:00 GMT</pubDate>
  <media:content url="https://iqb-research.github.io/IQB-Methods/docs/r_sig/23_11_06_renv/renv.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Frage 1: \(R^2\) richtig poolen</title>
  <dc:creator>Sebastian Weirich</dc:creator>
  <link>https://iqb-research.github.io/IQB-Methods/docs/FAQ/FAQ1_Imputationen.html</link>
  <description><![CDATA[ 




<section id="a.-methode-nach-harel-2009" class="level3">
<h3 class="anchored" data-anchor-id="a.-methode-nach-harel-2009">a. Methode nach Harel (2009)</h3>
<p>Die von Harel (2009) vorgeschlagene Methode beinhaltet mehrere Schritte:<br>
1. Die Quadratwurzel aus <img src="https://latex.codecogs.com/png.latex?R%5E2"> ziehen<br>
2. eine Fisher <em>z</em>-Transformation durchführen, damit der Wertebereich auf alle reellen Zahlen ausgeweitet wird<br>
3. Rubins Regeln für metrische Variablen anwenden<br>
4. mit einer inversen <em>z</em>-Transformation den Wert wieder zurückrechnen und quadrieren</p>
<p>Harel, O. (2009). The estimation of R2 and adjusted R2 in incomplete data sets using multiple imputation. <em>Journal of Applied Statistics, 36</em>(10), 1109-1118.</p>
</section>
<section id="b.-pool.r2-aus-eatrep" class="level3">
<h3 class="anchored" data-anchor-id="b.-pool.r2-aus-eatrep">b. pool.R2() aus eatRep</h3>
<p>Im Paket eatRep kann das über die Funktion <code>pool.R2()</code> berechnet werden. Die Funktion wird momentan noch nicht auf den Namensraum (Namespace) des Pakets exportiert, was allerdings ab der nächsten Paketversion möglich sein wird.</p>
<p>Angenommen, aus einer Analyse multipel imputierter Daten resultieren 5 verschiedene (hier fiktive) <img src="https://latex.codecogs.com/png.latex?R%5E2">-Werte, dann kann der gepoolte <img src="https://latex.codecogs.com/png.latex?R%5E2">-Wert folgendermaßen bestimmt werden:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1">r2 <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.12</span>,<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.18</span>,<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.17</span>,<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.21</span>,<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.23</span>)</span>
<span id="cb1-2">eatRep<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">pool.R2</span>(r2)</span></code></pre></div>
</div>
</section>
<section id="section" class="level2">
<h2 class="anchored" data-anchor-id="section"></h2>
<p>Weitere Fragen und/oder deren Antworten können abgelegt und eingesehen werden unter: t:/SIG/SIG Methoden/Liste methodischer Fragen.docx</p>


</section>

 ]]></description>
  <category>statistics</category>
  <category>eatRep</category>
  <guid>https://iqb-research.github.io/IQB-Methods/docs/FAQ/FAQ1_Imputationen.html</guid>
  <pubDate>Fri, 14 Feb 2025 11:08:01 GMT</pubDate>
  <media:content url="https://iqb-research.github.io/IQB-Methods/docs/FAQ/images/eatRep.png" medium="image" type="image/png" height="144" width="144"/>
</item>
<item>
  <title>Frage 2: ‘estDif’ in Conquest/eatModel</title>
  <dc:creator>Karoline Sachse</dc:creator>
  <link>https://iqb-research.github.io/IQB-Methods/docs/FAQ/FAQ2_eatModel-Conquest.html</link>
  <description><![CDATA[ 




<p>In eatModel wird nur der erste Teil der zweiten Tabelle <img src="https://latex.codecogs.com/png.latex?%5Ctext%7Bitem%7D%5Ctimes%5Ctext%7B%5BDIFvariable%5D%7D"> aus Conquest übertragen. Das bedeutet, dass negative Werte in der eatModel-estDif-Spalte dafür stehen, dass die jeweiligen Items <strong>in der ersten Gruppe</strong> der <img src="https://latex.codecogs.com/png.latex?%5Ctext%7B%5BDIFvariable%5D%7D"> <strong>leichter</strong> sind. Die erste Gruppe ist die mit dem numerisch kleineren Gruppenindikatorwert. Zur Illustration ein Beispiel, das Daten aus dem TAM-Paket verwendet:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(kableExtra)</span>
<span id="cb1-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(eatTools)</span>
<span id="cb1-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(eatModel)</span>
<span id="cb1-4"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">data</span>(data.ex08, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">package=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"TAM"</span>)</span>
<span id="cb1-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Gesamtdatensatz bauen, der sowohl Personen-ID, DIF-Variable als auch responses enthaelt</span></span>
<span id="cb1-6">dat <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">data.frame</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">id =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">nrow</span>(data.ex08[[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"resp"</span>]]), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">female =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">unlist</span>(data.ex08[[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"facets"</span>]])<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, </span>
<span id="cb1-7">       data.ex08[[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"resp"</span>]])</span>
<span id="cb1-8">def <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">defineModel</span>(dat, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">items=</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">id=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"id"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">DIF.var =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"female"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">software=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"tam"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>14 subject(s) do not solve any item:
   115 (10 false), 613 (10 false), 979 (10 false) ... 
7 subject(s) solved each item: 119 (10 correct), 514 (10 correct), 774 (10 correct) ... 
Dataset is completely linked.
'gauss' has been chosen for estimation method. Number of nodes was not explicitly specified. Set nodes to 20.
Q matrix specifies 1 dimension(s).</code></pre>
</div>
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb3-1">run <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">runModel</span>(def)</span>
<span id="cb3-2">res <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">getResults</span>(run, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">verbose=</span><span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">FALSE</span>)</span>
<span id="cb3-3">item <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">itemFromRes</span>(res)</span></code></pre></div>
</div>
<p>Das einzige Item mit B-DIF entsprechend der ETS-Kriterien ist Item Nummer 6:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb4-1">item6 <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">subset</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">roundDF</span>(item,<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">digits =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>), item <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"I0006"</span>)</span>
<span id="cb4-2">cols  <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"item"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"itemP"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"est"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"estDif"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"absDif"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"difIndex"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"ETS"</span>)</span>
<span id="cb4-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># ausgewaehlte Spalten fuer Items 6 anzeigen lassen </span></span>
<span id="cb4-4"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">kbl</span>(item6[,cols], <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">row.names=</span><span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">FALSE</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span> </span>
<span id="cb4-5">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">kable_styling</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">bootstrap_options =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"striped"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">full_width =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">FALSE</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">position =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"center"</span>)</span></code></pre></div>
<div class="cell-output-display">
<table class="table table-striped caption-top table-sm small" data-quarto-postprocess="true">
<thead>
<tr class="header">
<th style="text-align: left;" data-quarto-table-cell-role="th">item</th>
<th style="text-align: right;" data-quarto-table-cell-role="th">itemP</th>
<th style="text-align: right;" data-quarto-table-cell-role="th">est</th>
<th style="text-align: right;" data-quarto-table-cell-role="th">estDif</th>
<th style="text-align: right;" data-quarto-table-cell-role="th">absDif</th>
<th style="text-align: right;" data-quarto-table-cell-role="th">difIndex</th>
<th style="text-align: left;" data-quarto-table-cell-role="th">ETS</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: left;">I0006</td>
<td style="text-align: right;">0.454</td>
<td style="text-align: right;">0.226</td>
<td style="text-align: right;">0.31</td>
<td style="text-align: right;">0.62</td>
<td style="text-align: right;">1</td>
<td style="text-align: left;">B</td>
</tr>
</tbody>
</table>


</div>
</div>
<p>Die allgemeine Lösungshäufigkeit des Items ist 45.4 Prozent. Der positive DIF-Wert von 0.31 bedeutet, dass das Item in der ersten Gruppe (also <code>female = 0</code>, die Gruppe der Jungen) schwerer ist. Die Lösungshäufigkeit sollte also für <code>female = 0</code> geringer sein, als für <code>female = 1</code>:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb5-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tapply</span>(dat[,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"I0006"</span>], dat[,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"female"</span>], mean)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>    0     1 
0.410 0.498 </code></pre>
</div>
</div>
<p>Die beiden Spalten “estDif” und “absDif” im Output unterscheiden dabei insofern, als dass für zwei Gruppen (hier: “male” und “female”) “absDif” immer doppelt so groß wie “estDif” und im Betrag positiv ist. Im DIF-Modell hat jedes Item zwei Parameter, einen Schwierigkeitsparameter “est” und einen DIF-Parameter “estDif”. Bei dichotomen, näherungsweise gleichverteilten Gruppen wie Geschlecht entspricht der “est”-Parameter in etwa dem Wert, den man erhalten würde, wenn ein einfaches Raschmodell ohne separate Betrachtung der Geschlechtergruppen modelliert werden würde. “estDif” ist nun der Wert, den man (näherungsweise) für die Referenzgruppe addieren und für die Fokusgruppe subtrahieren muss, um die Werte zu erhalten, die bei separater Modellierung der Gruppen resultieren würden. Da der Wert einmal addiert, einmal subtrahiert wird, ist die Differenz des Itemparameters in Referenz- und Fokusgruppe im Betrag doppelt so groß wie der DIF-Parameter “estDif”. Für unser Beispiel (Referenzgruppe = “male”) bedeutet das: Bei separater Modellierung würde ich für die Jungen einen Itemparameter 0.226 + 0.31 = 0.536 erwarten, und für die Mädchen 0.226 - 0.31 = -0.084. Das soll hier kurz veranschaulicht werden:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb7-1">spl <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">splitModels</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">person.groups =</span> dat[,<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"id"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"female"</span>)], <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">all.persons =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">FALSE</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">nCores =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>--------------------------------
splitModels: generating 2 models
..
see &lt;returned&gt;$models
number of cores: 1
--------------------------------</code></pre>
</div>
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb9-1">def <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">defineModel</span>(dat, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">id =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"id"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">items=</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">splittedModels =</span> spl, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">software=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"tam"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>
Specification of 'qMatrix' and 'person.groups' results in 2 model(s).


==================================
Model No. 1
    Model name:           female.0
    Number of items:      10
    Number of persons:    500
    Number of dimensions: 1
==================================

6 subject(s) do not solve any item:
   115 (10 false), 270 (10 false), 9 (10 false) ... 
4 subject(s) solved each item: 119 (10 correct), 139 (10 correct), 62 (10 correct) ... 
Dataset is completely linked.
'gauss' has been chosen for estimation method. Number of nodes was not explicitly specified. Set nodes to 20.
Q matrix specifies 1 dimension(s).


==================================
Model No. 2
    Model name:           female.1
    Number of items:      10
    Number of persons:    500
    Number of dimensions: 1
==================================

8 subject(s) do not solve any item:
   543 (10 false), 752 (10 false), 979 (10 false) ... 
3 subject(s) solved each item: 514 (10 correct), 569 (10 correct), 774 (10 correct) ... 
Dataset is completely linked.
'gauss' has been chosen for estimation method. Number of nodes was not explicitly specified. Set nodes to 20.
Q matrix specifies 1 dimension(s).</code></pre>
</div>
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb11-1">run <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">runModel</span>(def)</span>
<span id="cb11-2">res <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">getResults</span>(run, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">verbose=</span><span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">FALSE</span>)</span>
<span id="cb11-3">item<span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">itemFromRes</span>(res)</span>
<span id="cb11-4">cols<span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"model"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"item"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"itemP"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"est"</span>)</span>
<span id="cb11-5"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">kbl</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">roundDF</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">subset</span>(item, item <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"I0006"</span>)[,cols],<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">digits =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">row.names=</span><span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">FALSE</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span> </span>
<span id="cb11-6">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">kable_styling</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">bootstrap_options =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"striped"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">full_width =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">FALSE</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">position =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"center"</span>)</span></code></pre></div>
<div class="cell-output-display">
<table class="table table-striped caption-top table-sm small" data-quarto-postprocess="true">
<thead>
<tr class="header">
<th style="text-align: left;" data-quarto-table-cell-role="th">model</th>
<th style="text-align: left;" data-quarto-table-cell-role="th">item</th>
<th style="text-align: right;" data-quarto-table-cell-role="th">itemP</th>
<th style="text-align: right;" data-quarto-table-cell-role="th">est</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: left;">female.0</td>
<td style="text-align: left;">I0006</td>
<td style="text-align: right;">0.410</td>
<td style="text-align: right;">0.443</td>
</tr>
<tr class="even">
<td style="text-align: left;">female.1</td>
<td style="text-align: left;">I0006</td>
<td style="text-align: right;">0.498</td>
<td style="text-align: right;">0.006</td>
</tr>
</tbody>
</table>


</div>
</div>
<p>Linkt man nun die beiden separat modellierten Gruppen “male” und “female” aneinander, entspricht der DIF für das Item “I0006” näherungsweise dem zuvor in einem gemeinsamen DIF-Modell geschätzten DIF-Parameter:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb12-1">itemFokus <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">subset</span>(res, model <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"female.1"</span>)</span>
<span id="cb12-2">referenz  <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">subset</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">itemFromRes</span>(res), model <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"female.0"</span>)</span>
<span id="cb12-3">equating  <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">equat1pl</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">results =</span> itemFokus, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">prmNorm =</span> referenz[,<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"item"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"est"</span>)],  </span>
<span id="cb12-4">             <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">difBound =</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.6</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">iterativ =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Found 1 model(s).
   Equating is executed for each dimension in each model separately.

====================================================================================================
 
Model No. 1
    Model name:                female.1
    Number of dimension(s):    1
    Name(s) of dimension(s):   Dim1
    Number of linking items:   10
    Linking method:            Mean.Mean

Dimension 'Dim1': 1 of 10 items with linking |DIF| &gt; 0.6 identified.
   Iteration 1: Exclude item 'I0006'.

    method iter itemExcluded DIF.excluded linking.constant linkerror
1 iterativ    0                                     -0.182     0.096
2 iterativ    1        I0006       -0.603           -0.251     0.074</code></pre>
</div>
</div>
<section id="section" class="level2">
<h2 class="anchored" data-anchor-id="section"></h2>
<p>Weitere Fragen und/oder deren Antworten können abgelegt und eingesehen werden unter: t:/SIG/SIG Methoden/Liste methodischer Fragen.docx</p>


</section>

 ]]></description>
  <category>statistics</category>
  <category>eatModel</category>
  <guid>https://iqb-research.github.io/IQB-Methods/docs/FAQ/FAQ2_eatModel-Conquest.html</guid>
  <pubDate>Fri, 14 Feb 2025 11:08:01 GMT</pubDate>
  <media:content url="https://iqb-research.github.io/IQB-Methods/docs/FAQ/images/eatModel.png" medium="image" type="image/png" height="144" width="144"/>
</item>
<item>
  <title>Frage 3: Gesamt- vs. Gruppenmittelwert in Mehrebenenmodellen</title>
  <dc:creator>Karoline Sachse</dc:creator>
  <link>https://iqb-research.github.io/IQB-Methods/docs/FAQ/FAQ3_Mehrebenenmodelle.html</link>
  <description><![CDATA[ 




<p>Wenn in Mehrebenenmodellen Interaktionen geschätzt werden, hängt die Schätzung des Intercepts wie auch die der Haupteffekte von der gewählten Skala der Prädiktoren ab. Die Haupteffekte repräsentieren den Effekt eines Prädiktors an der Stelle, an der die anderen Prädiktoren null sind. Da die Null oftmals kein natürlicher Wert von Prädiktoren ist (z. B. ist die Interpretation eines Effekts an der Stelle Klassengröße = 0 i. d.&nbsp;R. nicht sehr sinnvoll), wird das Zentrieren der Prädiktoren empfohlen. Hier kommen zwei Varianten in Frage: Zentrierung am Gruppenmittelwert und Zentrierung am Gesamtmittelwert. Für einen Prädiktor <img src="https://latex.codecogs.com/png.latex?X">, der an Individuum <img src="https://latex.codecogs.com/png.latex?i"> (<img src="https://latex.codecogs.com/png.latex?%5Cforall%20i%20%5Cin%20%5C%7B1,%E2%80%A6,i,%E2%80%A6,n%5C%7D">) in Gruppe <img src="https://latex.codecogs.com/png.latex?j"> (<img src="https://latex.codecogs.com/png.latex?%5Cforall%20j%20%5Cin%20%5C%7B1,%E2%80%A6,j,%E2%80%A6,J%5C%7D">) erhoben wird, bedeutet eine Zentrierung am Gesamtmittelwert, dass man von diesem individuellen Wert <img src="https://latex.codecogs.com/png.latex?x_%7Bij%7D"> den Gesamtmittelwert <img src="https://latex.codecogs.com/png.latex?M_X"> abzieht, gemäß: <img src="https://latex.codecogs.com/png.latex?X_%7Bij%7D-M_X">. Eine Zentrierung am Gruppenmittelwert bedeutet, dass man vom individuellen Wert <img src="https://latex.codecogs.com/png.latex?x_%7Bij%7D"> den Mittelwert der jeweiligen Gruppe abzieht, gemäß: <img src="https://latex.codecogs.com/png.latex?X_%7Bij%7D-M_%7BX_j%7D"> Hier eine grafische Darstellung dieser Zentrierungsmöglichkeiten eines Prädiktors:</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://iqb-research.github.io/IQB-Methods/docs/FAQ/images/centering.jpeg" class="img-fluid figure-img"></p>
<figcaption>Zentrierungsmöglichkeiten</figcaption>
</figure>
</div>
<p>Hier ist derselbe Prädiktor in seinen drei Zentrierungsformen in Relation zu einem Outcome abgebildet:</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://iqb-research.github.io/IQB-Methods/docs/FAQ/images/centeringOverallRegression.jpeg" class="img-fluid figure-img"></p>
<figcaption>drei Zentrierungsformen in Relation zu einem Outcome</figcaption>
</figure>
</div>
<p>Wenn man nun eine einfache lineare Regression eines Outcomes auf den Prädiktor rechnet, kann man die Haupteffekte (Slopes) des unzentrierten Prädiktors und des Grand-Mean-zentrierten Prädiktors genau gleich interpretieren: Der Regressionskoeffizient beschreibt die Veränderung des Outcomes, wenn der Prädiktor um eine Einheit ansteigt. Dies gilt nicht für den Group-Mean-zentrierten Prädiktor: Dieser repräsentiert die erwartete Veränderung des Outcomes bei Zunahme des Prädiktors um eine durchschnittliche Einheit innerhalb der Gruppen.</p>
<section id="a.-zentrierung-um-den-gruppenmittelwert-schätzung-von-individual--und-aggregateffekten-unabhängig-voneinander." class="level3">
<h3 class="anchored" data-anchor-id="a.-zentrierung-um-den-gruppenmittelwert-schätzung-von-individual--und-aggregateffekten-unabhängig-voneinander.">a. Zentrierung um den Gruppenmittelwert: Schätzung von Individual- und Aggregateffekten unabhängig voneinander.</h3>
<p>Die Zentrierung um den Gruppenmittelwert ermöglicht die Trennung der individuellen Variation innerhalb der Gruppen von der Variation zwischen den Gruppen. Dadurch können sowohl die Effekte auf der Individualebene als auch die Effekte auf der Gruppenebene unabhängig voneinander geschätzt werden.</p>
<ul>
<li><strong>Interpretation von Level-1-Variablen-Interaktionen:</strong> Zeigt an, wie sich die lineare Beziehung zwischen Variablen innerhalb der Gruppen gestaltet.</li>
<li><strong>Interpretation von Level-2-Variablen-Interaktionen:</strong> Zeigt an, wie sich die lineare Beziehung der Variablen zwischen den Gruppen gestaltet – allerdings wird hier nicht voll kontrolliert für Level-1-Prädiktoren, sofern nicht zusätzlich noch die Gruppenmittelwerte der zu kontrollierenden Level-1-Variablen aufgenommen werden, sodass die Zentrierung um den Gruppenmittelwert für diesen Zweck von manchen Autor:innen als weniger sinnvoll erachtet wird (Algina &amp; Swaminathan, 2011).</li>
<li><strong>Interpretation von Cross-Level-Interaktionen:</strong> Bei der Untersuchung von Interaktionen zeigt ein Interaktionseffekt zwischen einer um den Gruppenmittelwert zentrierten individuellen Variablen (Level-1) und einer gruppenbezogenen Variablen (Level-2), inwiefern der Effekt der individuellen Variablen von der gruppenbezogenen Variablen abhängt: Hat eine höhere Ausprägung auf einer Level-1-Variablen relativ zum Gruppenmittelwert auf dieser Variablen einen anderen Effekt auf das Kriterium, wenn die Ausprägung einer Level-2-Variablen für die Gruppe höher ist? Der Koeffizient sollte sich gemäß Algina und Swaminathan (2011) nicht bedeutsam unterscheiden von dem, der durch Zentrierung um den Gesamtmittelwert geschätzt wird, aber falls doch, empfehlen die Autoren, diese Cross-Level-Interaktion aus dem Modell zu entfernen. Andere Autor:innen empfehlen nur Group-Mean-Centering der Level-1- und Grand-Mean-Centering der Level-2-Prädiktoren bei Untersuchung von Cross-Level-Interaktionen, da so die Interpretation der Haupteffekte erleichtert wird (z.B. Bauer &amp; Curran, 2005). Mehrere Autor:innen (z. B. Yaremych et al., 2023) plädieren bei Cross-Level-Interaktionen im Allgemeinen für diese Art der Zentrierung, da sie meistens den formulierten Cross-Level-Interaktions-Hypothesen entspricht.</li>
</ul>
</section>
<section id="b.-zentrierung-um-den-gesamtmittelwert-führt-zu-einfacher-interpretation-des-intercepts-aber-auch-zu-overall-regression." class="level3">
<h3 class="anchored" data-anchor-id="b.-zentrierung-um-den-gesamtmittelwert-führt-zu-einfacher-interpretation-des-intercepts-aber-auch-zu-overall-regression.">b. Zentrierung um den Gesamtmittelwert: Führt zu einfacher Interpretation des Intercepts, aber auch zu “Overall-Regression”.</h3>
<p>Die Zentrierung um den Gesamtmittelwert ermöglicht die Untersuchung der Effekte in Bezug auf den Mittelwert der gesamten Stichprobe. Das Intercept entspricht dem erwarteten Wert auf der Kriteriumsvariablen bei durchschnittlicher Ausprägung der Prädiktorvariablen. Die Effekte <em>zwischen</em> und <em>innerhalb</em> der Untersuchungseinheiten lassen sich nicht mehr getrennt interpretieren („Overall-Regression“).</p>
<ul>
<li><strong>Interpretation von Level-1-Variablen-Interaktionen:</strong> Zeigt an, wie sich die lineare Beziehung der Variablen über alle Gruppen hinweg gestaltet.</li>
<li><strong>Interpretation von Level-2-Variablen-Interaktionen:</strong> Zeigt an, wie sich die lineare Beziehung der Variablen zwischen den Gruppen gestaltet (ggf. vollständig kontrolliert für Level-1-Prädiktoren). Diese Form der Zentrierung wird zu solchem Zweck meist empfohlen (Algina &amp; Swaminathan, 2011).</li>
<li><strong>Interpretation von Cross-Level-Interaktionen:</strong> Bei der Untersuchung von Interaktionen zeigt ein Interaktionseffekt zwischen einer um den Gesamtmittelwert zentrierten individuellen Variablen (Level-1) und einer gruppenbezogenen Variablen (Level-2), wie der Effekt der individuellen Variablen über alle Gruppen hinweg von der gruppenbezogenen Variablen abhängt: Hat eine höhere absolute Ausprägung auf einer Level-1-Variablen einen anderen Effekt auf das Kriterium, wenn die Ausprägung einer Level-2-Variablen für die Gruppe höher ist? Algina und Swaminathan (2011) plädieren dafür, diese Cross-Level-Interaktion aus dem Modell zu entfernen, sollte sich der Effekt deutlich unterscheiden von der alternativen Schätzung nach Zentrierung um den Gruppenmittelwert.</li>
</ul>
</section>
<section id="c.-keine-zentrierung-ist-selten-sinnvoll-bei-interaktionen-im-modell.-vor-allem-dann-nicht-wenn-die-null-für-die-prädiktorvariablen-kein-sinnvoller-wert-ist." class="level3">
<h3 class="anchored" data-anchor-id="c.-keine-zentrierung-ist-selten-sinnvoll-bei-interaktionen-im-modell.-vor-allem-dann-nicht-wenn-die-null-für-die-prädiktorvariablen-kein-sinnvoller-wert-ist.">c.&nbsp;Keine Zentrierung: Ist selten sinnvoll bei Interaktionen im Modell. Vor allem dann nicht, wenn die Null für die Prädiktorvariablen kein sinnvoller Wert ist.</h3>
<p>Alle Empfehlungen gelten ebenso für kategoriale Prädiktoren, siehe z. B. Yaremych et al.&nbsp;(2023): “… we have demonstrated that centering guidelines for continuous predictors should be applied analogously to categorical predictors” (p.&nbsp;8). Hierbei wird ein <img src="https://latex.codecogs.com/png.latex?k-">stufiger Prädiktor stets durch <img src="https://latex.codecogs.com/png.latex?k-1"> “Coding-Variablen” repräsentiert. Ob diese durch Dummy-Kodierung, Effekt-Kodierung oder Kontrast-Kodierung gebildet werden, hängt von der intendierten Interpretation ab und liegt außerhalb des Fokus’ dieses Artikels.</p>
</section>
<section id="literatur" class="level3">
<h3 class="anchored" data-anchor-id="literatur">Literatur</h3>
<p>Algina, J., &amp; Swaminathan, H. (2011). Centering in two-level nested designs. In J. Hox &amp; K. Roberts (Eds.), <em>The handbook of advanced multilevel data analysis</em> (pp.&nbsp;285–312). Routledge.</p>
<p>Bauer, D.J., &amp; Curran, P.J. (2005). Probing interactions in fixed and multilevel regression: Inferential and graphical techniques. <em>Multivariate Behavioral Research, 40</em>, 373–400. https://doi.org/10.1207/s15327906mbr4003_5</p>
<p>Yaremych, H. E., Preacher, K. J., &amp; Hedeker, D. (2023). Centering categorical predictors in multilevel models: Best practices and interpretation. <em>Psychological Methods, 28</em>(3), 613–630. https://doi.org/10.1037/met0000434</p>
</section>
<section id="section" class="level2">
<h2 class="anchored" data-anchor-id="section"></h2>
<p>Weitere Fragen und/oder deren Antworten können abgelegt und eingesehen werden unter: t:/SIG/SIG Methoden/Liste methodischer Fragen.docx</p>


</section>

 ]]></description>
  <category>statistics</category>
  <guid>https://iqb-research.github.io/IQB-Methods/docs/FAQ/FAQ3_Mehrebenenmodelle.html</guid>
  <pubDate>Fri, 14 Feb 2025 11:08:01 GMT</pubDate>
  <media:content url="https://iqb-research.github.io/IQB-Methods/docs/FAQ/images/centering.jpeg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Frage 4: N pro Item</title>
  <dc:creator>Sebastian Weirich</dc:creator>
  <link>https://iqb-research.github.io/IQB-Methods/docs/FAQ/FAQ4_NproItem.html</link>
  <description><![CDATA[ 




<p>Grundsätzlich stellt sich die Frage des <em>N</em> pro Item in erster Linie bei Pilotierungsstudien, wo die Inferenz auf der Itemebene (anstatt der Personenebene) stattfindet. Einen festen Grenzwert gibt es hier nicht, wobei größer natürlich immer besser ist. Es gibt jedoch Daumenregeln und es hängt von den Analysen ab, die mit den gewonnenen Daten unternommen werden sollen. Als Minimalwert kann man sich an <img src="https://latex.codecogs.com/png.latex?N%3E100"> orientieren. Im Studiendesign versucht man dabei, auf ein <img src="https://latex.codecogs.com/png.latex?N=150"> zuzusteuern, damit selbst trotz unvorhergesehener Ausfälle bspw. aufgrund von Krankheit Einzelner die 100 niemals unterschritten wird. Konkret können die praktisch notwendigen Stichprobenzahlen aber auch größer ausfallen, zum Beispiel:</p>
<ul>
<li><strong>VERA-Pilotierung ohne DIF:</strong> hier wäre <img src="https://latex.codecogs.com/png.latex?N=150"> ein vertretbarer Richtwert.</li>
<li><strong>VERA-Pilotierung mit DIF-Analyse bzgl. Geschlecht:</strong> für eine verlässliche DIF-Analyse wäre <img src="https://latex.codecogs.com/png.latex?N=150"> <em>pro Geschlechtergruppe</em> anzustreben. Da Geschlecht einigermaßen gleichverteilt ist und erfahrungsgemäß nur wenige fehlende Werte aufweist, wäre hier <img src="https://latex.codecogs.com/png.latex?N=300"> ein Minimum, <img src="https://latex.codecogs.com/png.latex?N=400"> ein komfortabler Richtwert. So wird es auch in VERA häufig gehandhabt.</li>
<li><strong>Pilotierung mit DIF-Analyse bzgl. SPF:</strong> Das Besondere hierbei ist, dass die Gruppengrößen sehr ungleich verteilt sind. Für eine verlässliche DIF-Analyse wäre <img src="https://latex.codecogs.com/png.latex?N=150"> in der kleinsten Gruppe anzustreben, was bzgl. SPF aber oft nicht möglich ist. In Bildungstrendstudien mit Gesamtstichprobengrößen <img src="https://latex.codecogs.com/png.latex?N%3E20000"> ist das zwar möglich, aber in kleineren Erhebungen wie VERA-Pilotierungen wäre das komplett unrealistisch. Hier müsste man also ggf. ein Oversampling anstreben, also die anteilsmäßig kleine Gruppe durch zusätzliche Ziehungen “überrepräsentieren”.</li>
<li><strong>Analysen bzgl. Migrationshintergrund:</strong> Sollen in einer Erhebung bspw. Migrationshintergrund und Geschlecht erhoben werden, um etwa die Frage zu untersuchen, ob es Interaktionseffekte im Lernzuwachs von männlichen/weiblichen Personen mit oder ohne Migrationshintergrund gibt, handelt es sich nicht länger um eine Inferenz auf Item- sondern auf Personenebene. Nach dem <em>N</em> pro Item zu fragen, ergibt hier weniger Sinn. Eher wäre die Stichprobe so zu wählen, dass die Zellenbelegungen in der Kreuztabelle aus <img src="https://latex.codecogs.com/png.latex?%5Ctext%7BMigrationshintergrund%7D%5Ctimes%20%5Ctext%7BGeschlecht%7D"> hinreichend groß sind. Für eine solche Untersuchung müssten die verwendeten Items hinsichtlich ihrer Eignung bereits überprüft worden sein – es müsste also sichergestellt sein, dass sie kein DIF bezüglich Geschlecht oder Migrationshintergrund aufweisen.</li>
</ul>
<section id="section" class="level2">
<h2 class="anchored" data-anchor-id="section"></h2>
<p>Weitere Fragen und/oder deren Antworten können abgelegt und eingesehen werden unter: t:/SIG/SIG Methoden/Liste methodischer Fragen.docx</p>


</section>

 ]]></description>
  <category>statistics</category>
  <guid>https://iqb-research.github.io/IQB-Methods/docs/FAQ/FAQ4_NproItem.html</guid>
  <pubDate>Fri, 14 Feb 2025 11:08:01 GMT</pubDate>
  <media:content url="https://iqb-research.github.io/IQB-Methods/docs/FAQ/images/N.png" medium="image" type="image/png" height="125" width="144"/>
</item>
</channel>
</rss>
