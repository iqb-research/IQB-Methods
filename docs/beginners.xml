<?xml version="1.0" encoding="UTF-8"?>
<rss  xmlns:atom="http://www.w3.org/2005/Atom" 
      xmlns:media="http://search.yahoo.com/mrss/" 
      xmlns:content="http://purl.org/rss/1.0/modules/content/" 
      xmlns:dc="http://purl.org/dc/elements/1.1/" 
      version="2.0">
<channel>
<title>IQB Methods Team</title>
<link>https://iqb-research.github.io/IQB-Methods/docs/beginners.html</link>
<atom:link href="https://iqb-research.github.io/IQB-Methods/docs/beginners.xml" rel="self" type="application/rss+xml"/>
<description></description>
<image>
<url>https://iqb-research.github.io/IQB-Methods/./images/sapling.jpg</url>
<title>IQB Methods Team</title>
<link>https://iqb-research.github.io/IQB-Methods/docs/beginners.html</link>
</image>
<generator>quarto-1.6.42</generator>
<lastBuildDate>Mon, 26 Feb 2024 00:00:00 GMT</lastBuildDate>
<item>
  <title>Introduction to the tidyverse</title>
  <dc:creator>Nicklas Hafiz</dc:creator>
  <link>https://iqb-research.github.io/IQB-Methods/docs/r_sig/24_01_26_tidyverse_intro/</link>
  <description><![CDATA[ 




<p><img src="https://iqb-research.github.io/IQB-Methods/docs/r_sig/24_01_26_tidyverse_intro/preview_image.jpg" class="img-fluid"><sup>1</sup></p>
<div class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(tidyverse)</span></code></pre></div>
</div>
<section id="introduction" class="level2" data-number="1">
<h2 data-number="1" class="anchored" data-anchor-id="introduction"><span class="header-section-number">1</span> Introduction</h2>
<p><em>Tidy datasets are easy to manipulate, model and visualize, and have a specific structure: each variable is a column, each observation is a row, and each type of observational unit is a table.</em> (<a href="https://www.jstatsoft.org/article/view/v059i10">Wickham, 2014</a>).</p>
<p>The <code>tidyverse</code> is composed of multiple packages, all following a common philosophy, and facilitating many aspects of coding in R, for example data wrangling and plotting. It is not really necessary to learn the <code>tidyverse</code> syntax in order to be proficient in R. However, I find it easier to understand and write Code in, at least in most cases. In the end, it is a question of preference what you want to learn and use. Most code will probably be composed from <code>base R</code> functions and <code>tidyverse</code> functions.</p>
<p>You can find an overview of the included packages at the offical <a href="https://www.tidyverse.org/packages/">tidyverse documentation</a>.<br>
A more thorough introduction into the <code>tidyverse</code> can be found <a href="https://jhudatascience.org/tidyversecourse/index.html">here</a>.</p>
</section>
<section id="some-tidyverse-features" class="level2" data-number="2">
<h2 data-number="2" class="anchored" data-anchor-id="some-tidyverse-features"><span class="header-section-number">2</span> Some tidyverse features</h2>
<section id="tibbles" class="level3" data-number="2.1">
<h3 data-number="2.1" class="anchored" data-anchor-id="tibbles"><span class="header-section-number">2.1</span> Tibbles</h3>
<p>A special type of data frame are the so called <code>tibbles</code>. Tibbles are a modern version of data frames and the standard data frame type of the <code>tidyverse</code>, as they have some advantageous characteristics (e.g., note the more informative printing of the data frame). So don’t be confused if you run into them, in general they behave like data frames. Take a look at the <a href="https://iqb-research.github.io/IQB-Methods/posts/r_sig/24_01_26_tidyverse_intro/#exercise">Exercises</a>, or at a more thorough <a href="https://cran.r-project.org/web/packages/tibble/vignettes/tibble.html">Example</a> if you want to learn more.</p>
</section>
<section id="the-pipe-operator" class="level3" data-number="2.2">
<h3 data-number="2.2" class="anchored" data-anchor-id="the-pipe-operator"><span class="header-section-number">2.2</span> The Pipe Operator</h3>
<p><code>tidyverse</code> code is often written using the pipe operator <code>%&gt;%</code> (read as ‘<em>then do</em>’), which makes it easy to connect multiple function calls.</p>
<p>Some notes on the pipe syntax, also see <a href="https://iqb-research.github.io/IQB-Methods/posts/r_sig/24_01_26_tidyverse_intro/#exercise">Exercises</a>:</p>
<ol type="1">
<li>If we don’t have any additional arguments we want to put into the function, we can just write the function name without any brackets.</li>
<li>The pipe operator will give the result of the last function as input into the next function.</li>
<li>If we want to clearly state which of the function arguments should receive the input, we can write a <code>.</code>, which can be read as <em>output of the previous function call</em>.</li>
</ol>
</section>
</section>
<section id="workstation-organization" class="level2" data-number="3">
<h2 data-number="3" class="anchored" data-anchor-id="workstation-organization"><span class="header-section-number">3</span> Workstation organization</h2>
<section id="rstudio-projects" class="level3" data-number="3.1">
<h3 data-number="3.1" class="anchored" data-anchor-id="rstudio-projects"><span class="header-section-number">3.1</span> RStudio Projects</h3>
<p>Over time, it will become increasingly hard to organize all your files, working directories and workspaces in a sensible manner. A reasonable big project will consist of multiple script files, data, output and plots. To keep everything toghether, <a href="https://support.posit.co/hc/en-us/articles/200526207-Using-RStudio-Projects">RStudio Projects</a> can be used (highly recommended). Therefore, when starting a new project in R, the first thing you should do is to create a RStudio project.</p>
<p>You can create a new RStudio project by clicking on <code>File - New Project</code> in the RStudio window. You can either create a totally new directory, or choose an already existing folder for the project.</p>
</section>
<section id="code-organization" class="level3" data-number="3.2">
<h3 data-number="3.2" class="anchored" data-anchor-id="code-organization"><span class="header-section-number">3.2</span> Code organization</h3>
<p>Within your project folder, I would suggest that you create subfolders to save your Scripts, data, outputs … in. For example, you could create a folder named R, where all your R Scripts will go. You can do the same for data, plots etc. This will help you to structure your working directory and make it easier to find specific files.</p>
</section>
<section id="absolute-paths-vs.-relative-paths" class="level3" data-number="3.3">
<h3 data-number="3.3" class="anchored" data-anchor-id="absolute-paths-vs.-relative-paths"><span class="header-section-number">3.3</span> Absolute paths vs.&nbsp;relative paths</h3>
<p>I can head to a specific file by using the full path (<strong>absolute path</strong>): <code>"C:/Users/hafiznij/Documents/GitHub/IQB-Methods/posts/r_sig/24_01_26_tidyverse_intro/raw_data/winners.rda"</code>. This approach has some disadvantages: it will only work on <strong>my</strong> notebook. If I want to continue my project on another device, I will have to change the path. The same goes for other people who want to work with my project. So, to keep these paths more reproducable, we should always use <strong>relative paths</strong>: <code>"./raw_data/winners.rda"</code>. This will always work independently of the device I am working on, as long as I am in the correct <strong>working directory</strong>.</p>
<div class="callout callout-style-default callout-tip callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Network drives
</div>
</div>
<div class="callout-body-container callout-body">
<p>One exception might be paths to files on the IQB network drives, like <code>T:</code> … Because these are always the same for every one, absolute paths will work just fine for everything lying on here.</p>
</div>
</div>
<p>The working directory is the path R is currently working in. I can obtain it by typing:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb2-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">getwd</span>()</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "/home/runner/work/IQB-Methods/IQB-Methods/docs/r_sig/24_01_26_tidyverse_intro"</code></pre>
</div>
</div>
<p>Luckily, RStudio projects set the working directory automatically, so we don’t really have to deal with that.</p>
<p>Now take a look at the working directory and the relative path I used for loading the <code>winners.rda</code>. Notice something? Correct, both paths combined equal the <strong>absolute path</strong> to the file. So by splitting it up, we obtain a more reproducible path, that works independently of where the current working directory is.</p>
<div class="callout callout-style-default callout-tip callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
The <code>here</code> package
</div>
</div>
<div class="callout-body-container callout-body">
<p>Another great way to deal with the path confusion is to use the <code>here</code> package. It can build the paths relative to the directory where your R Studio project is saved in. For example, <code>"./raw_data/winners.rda"</code> becomes <code>here::here("raw_data", "winners.rda")</code>. This is not incredibly important right now, especially if you have all your files in the same folder. But it can become very valuable with increasing project complexity and file structure, so look into it if you want to get a head start! I also I have to use it sometimes during the tutorial because of the way I have organized my project, so don’t be confused! It is just another way to build file paths. Look <a href="https://here.r-lib.org/">here</a> (:D) if you want to learn more about the package.</p>
</div>
</div>
</section>
</section>
<section id="exercise" class="level2" data-number="4">
<h2 data-number="4" class="anchored" data-anchor-id="exercise"><span class="header-section-number">4</span> Exercise</h2>
<ol start="0" type="1">
<li><p>Create a new RStudio project. Create the folders <code>R</code>, <code>data</code> and <code>plots</code>. Create a new R-Script which lies in your <code>R</code> folder.</p></li>
<li><p>Write the following code using the pipe-operator from the <code>tidyverse</code>:</p></li>
</ol>
<div class="cell">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb4-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sum</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">seq</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">from =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">to =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mean</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">45</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">na.rm =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">by =</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.1</span>))</span></code></pre></div>
</div>
<div class="callout callout-style-default callout-caution callout-titled">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-3-contents" aria-controls="callout-3" aria-expanded="false" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Solution
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-3" class="callout-3-contents callout-collapse collapse">
<div class="callout-body-container callout-body">
<div class="cell">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb5-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(tidyverse)</span>
<span id="cb5-2"></span>
<span id="cb5-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">45</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb5-4">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mean</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">na.rm =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb5-5">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">seq</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">from =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">to =</span> ., <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">by =</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.1</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb5-6">  sum</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] 26313</code></pre>
</div>
</div>
<p>Much nicer to read, right?</p>
<ol type="1">
<li>If we don’t have any additional arguments we want to put into the function, we can just write the function name without any brackets, like we do at the end with <code>sum</code>.</li>
<li>The pipe operator will give the result of the last function as input into the next function. That’s why we don’t have to specify the vector within the <code>mean()</code> function.</li>
<li>If we want to clearly state which of the function arguments should receive the input, we can write a <code>.</code>, which can be read as <em>output of the previous function call</em>. That’s what we do in the <code>seq()</code> function. It calculates a sequence from <code>1</code> to the mean of <code>c(45:100)</code>.</li>
</ol>
</div>
</div>
</div>
<ol start="2" type="1">
<li>Install and load the <code>palmerpenguins</code> package.</li>
</ol>
<div class="callout callout-style-default callout-caution callout-titled">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-4-contents" aria-controls="callout-4" aria-expanded="false" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Solution
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-4" class="callout-4-contents callout-collapse collapse">
<div class="callout-body-container callout-body">
<div class="cell">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb7-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># install.packages("palmerpenguins")</span></span>
<span id="cb7-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(palmerpenguins)</span></code></pre></div>
</div>
</div>
</div>
</div>
<ol start="3" type="1">
<li>Transform the <code>penguins</code>-tibble (available after loading the package) into a <code>data.frame</code>.</li>
</ol>
<div class="callout callout-style-default callout-caution callout-titled">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-5-contents" aria-controls="callout-5" aria-expanded="false" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Solution
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-5" class="callout-5-contents callout-collapse collapse">
<div class="callout-body-container callout-body">
<div class="cell">
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb8-1">penguins_frame <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">as.data.frame</span>(penguins)</span></code></pre></div>
</div>
</div>
</div>
</div>
<ol start="4" type="1">
<li>Compare how both objects (tibble and data.frame) are printed into the console. Which differences can you see?</li>
</ol>
<div class="callout callout-style-default callout-caution callout-titled">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-6-contents" aria-controls="callout-6" aria-expanded="false" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Solution
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-6" class="callout-6-contents callout-collapse collapse">
<div class="callout-body-container callout-body">
<div class="cell">
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb9-1">penguins</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 344 × 8
   species island    bill_length_mm bill_depth_mm flipper_length_mm body_mass_g
   &lt;fct&gt;   &lt;fct&gt;              &lt;dbl&gt;         &lt;dbl&gt;             &lt;int&gt;       &lt;int&gt;
 1 Adelie  Torgersen           39.1          18.7               181        3750
 2 Adelie  Torgersen           39.5          17.4               186        3800
 3 Adelie  Torgersen           40.3          18                 195        3250
 4 Adelie  Torgersen           NA            NA                  NA          NA
 5 Adelie  Torgersen           36.7          19.3               193        3450
 6 Adelie  Torgersen           39.3          20.6               190        3650
 7 Adelie  Torgersen           38.9          17.8               181        3625
 8 Adelie  Torgersen           39.2          19.6               195        4675
 9 Adelie  Torgersen           34.1          18.1               193        3475
10 Adelie  Torgersen           42            20.2               190        4250
# ℹ 334 more rows
# ℹ 2 more variables: sex &lt;fct&gt;, year &lt;int&gt;</code></pre>
</div>
</div>
<div class="cell">
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb11-1">penguins_frame</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>      species    island bill_length_mm bill_depth_mm flipper_length_mm
1      Adelie Torgersen           39.1          18.7               181
2      Adelie Torgersen           39.5          17.4               186
3      Adelie Torgersen           40.3          18.0               195
4      Adelie Torgersen             NA            NA                NA
5      Adelie Torgersen           36.7          19.3               193
6      Adelie Torgersen           39.3          20.6               190
7      Adelie Torgersen           38.9          17.8               181
8      Adelie Torgersen           39.2          19.6               195
9      Adelie Torgersen           34.1          18.1               193
10     Adelie Torgersen           42.0          20.2               190
11     Adelie Torgersen           37.8          17.1               186
12     Adelie Torgersen           37.8          17.3               180
13     Adelie Torgersen           41.1          17.6               182
14     Adelie Torgersen           38.6          21.2               191
15     Adelie Torgersen           34.6          21.1               198
16     Adelie Torgersen           36.6          17.8               185
17     Adelie Torgersen           38.7          19.0               195
18     Adelie Torgersen           42.5          20.7               197
19     Adelie Torgersen           34.4          18.4               184
20     Adelie Torgersen           46.0          21.5               194
21     Adelie    Biscoe           37.8          18.3               174
22     Adelie    Biscoe           37.7          18.7               180
23     Adelie    Biscoe           35.9          19.2               189
24     Adelie    Biscoe           38.2          18.1               185
25     Adelie    Biscoe           38.8          17.2               180
26     Adelie    Biscoe           35.3          18.9               187
27     Adelie    Biscoe           40.6          18.6               183
28     Adelie    Biscoe           40.5          17.9               187
29     Adelie    Biscoe           37.9          18.6               172
30     Adelie    Biscoe           40.5          18.9               180
31     Adelie     Dream           39.5          16.7               178
32     Adelie     Dream           37.2          18.1               178
33     Adelie     Dream           39.5          17.8               188
34     Adelie     Dream           40.9          18.9               184
35     Adelie     Dream           36.4          17.0               195
36     Adelie     Dream           39.2          21.1               196
37     Adelie     Dream           38.8          20.0               190
38     Adelie     Dream           42.2          18.5               180
39     Adelie     Dream           37.6          19.3               181
40     Adelie     Dream           39.8          19.1               184
41     Adelie     Dream           36.5          18.0               182
42     Adelie     Dream           40.8          18.4               195
43     Adelie     Dream           36.0          18.5               186
44     Adelie     Dream           44.1          19.7               196
45     Adelie     Dream           37.0          16.9               185
46     Adelie     Dream           39.6          18.8               190
47     Adelie     Dream           41.1          19.0               182
48     Adelie     Dream           37.5          18.9               179
49     Adelie     Dream           36.0          17.9               190
50     Adelie     Dream           42.3          21.2               191
51     Adelie    Biscoe           39.6          17.7               186
52     Adelie    Biscoe           40.1          18.9               188
53     Adelie    Biscoe           35.0          17.9               190
54     Adelie    Biscoe           42.0          19.5               200
55     Adelie    Biscoe           34.5          18.1               187
56     Adelie    Biscoe           41.4          18.6               191
57     Adelie    Biscoe           39.0          17.5               186
58     Adelie    Biscoe           40.6          18.8               193
59     Adelie    Biscoe           36.5          16.6               181
60     Adelie    Biscoe           37.6          19.1               194
61     Adelie    Biscoe           35.7          16.9               185
62     Adelie    Biscoe           41.3          21.1               195
63     Adelie    Biscoe           37.6          17.0               185
64     Adelie    Biscoe           41.1          18.2               192
65     Adelie    Biscoe           36.4          17.1               184
66     Adelie    Biscoe           41.6          18.0               192
67     Adelie    Biscoe           35.5          16.2               195
68     Adelie    Biscoe           41.1          19.1               188
69     Adelie Torgersen           35.9          16.6               190
70     Adelie Torgersen           41.8          19.4               198
71     Adelie Torgersen           33.5          19.0               190
72     Adelie Torgersen           39.7          18.4               190
73     Adelie Torgersen           39.6          17.2               196
74     Adelie Torgersen           45.8          18.9               197
75     Adelie Torgersen           35.5          17.5               190
76     Adelie Torgersen           42.8          18.5               195
77     Adelie Torgersen           40.9          16.8               191
78     Adelie Torgersen           37.2          19.4               184
79     Adelie Torgersen           36.2          16.1               187
80     Adelie Torgersen           42.1          19.1               195
81     Adelie Torgersen           34.6          17.2               189
82     Adelie Torgersen           42.9          17.6               196
83     Adelie Torgersen           36.7          18.8               187
84     Adelie Torgersen           35.1          19.4               193
85     Adelie     Dream           37.3          17.8               191
86     Adelie     Dream           41.3          20.3               194
87     Adelie     Dream           36.3          19.5               190
88     Adelie     Dream           36.9          18.6               189
89     Adelie     Dream           38.3          19.2               189
90     Adelie     Dream           38.9          18.8               190
91     Adelie     Dream           35.7          18.0               202
92     Adelie     Dream           41.1          18.1               205
93     Adelie     Dream           34.0          17.1               185
94     Adelie     Dream           39.6          18.1               186
95     Adelie     Dream           36.2          17.3               187
96     Adelie     Dream           40.8          18.9               208
97     Adelie     Dream           38.1          18.6               190
98     Adelie     Dream           40.3          18.5               196
99     Adelie     Dream           33.1          16.1               178
100    Adelie     Dream           43.2          18.5               192
101    Adelie    Biscoe           35.0          17.9               192
102    Adelie    Biscoe           41.0          20.0               203
103    Adelie    Biscoe           37.7          16.0               183
104    Adelie    Biscoe           37.8          20.0               190
105    Adelie    Biscoe           37.9          18.6               193
106    Adelie    Biscoe           39.7          18.9               184
107    Adelie    Biscoe           38.6          17.2               199
108    Adelie    Biscoe           38.2          20.0               190
109    Adelie    Biscoe           38.1          17.0               181
110    Adelie    Biscoe           43.2          19.0               197
111    Adelie    Biscoe           38.1          16.5               198
112    Adelie    Biscoe           45.6          20.3               191
113    Adelie    Biscoe           39.7          17.7               193
114    Adelie    Biscoe           42.2          19.5               197
115    Adelie    Biscoe           39.6          20.7               191
116    Adelie    Biscoe           42.7          18.3               196
117    Adelie Torgersen           38.6          17.0               188
118    Adelie Torgersen           37.3          20.5               199
119    Adelie Torgersen           35.7          17.0               189
120    Adelie Torgersen           41.1          18.6               189
121    Adelie Torgersen           36.2          17.2               187
122    Adelie Torgersen           37.7          19.8               198
123    Adelie Torgersen           40.2          17.0               176
124    Adelie Torgersen           41.4          18.5               202
125    Adelie Torgersen           35.2          15.9               186
126    Adelie Torgersen           40.6          19.0               199
127    Adelie Torgersen           38.8          17.6               191
128    Adelie Torgersen           41.5          18.3               195
129    Adelie Torgersen           39.0          17.1               191
130    Adelie Torgersen           44.1          18.0               210
131    Adelie Torgersen           38.5          17.9               190
132    Adelie Torgersen           43.1          19.2               197
133    Adelie     Dream           36.8          18.5               193
134    Adelie     Dream           37.5          18.5               199
135    Adelie     Dream           38.1          17.6               187
136    Adelie     Dream           41.1          17.5               190
137    Adelie     Dream           35.6          17.5               191
138    Adelie     Dream           40.2          20.1               200
139    Adelie     Dream           37.0          16.5               185
140    Adelie     Dream           39.7          17.9               193
141    Adelie     Dream           40.2          17.1               193
142    Adelie     Dream           40.6          17.2               187
143    Adelie     Dream           32.1          15.5               188
144    Adelie     Dream           40.7          17.0               190
145    Adelie     Dream           37.3          16.8               192
146    Adelie     Dream           39.0          18.7               185
147    Adelie     Dream           39.2          18.6               190
148    Adelie     Dream           36.6          18.4               184
149    Adelie     Dream           36.0          17.8               195
150    Adelie     Dream           37.8          18.1               193
151    Adelie     Dream           36.0          17.1               187
152    Adelie     Dream           41.5          18.5               201
153    Gentoo    Biscoe           46.1          13.2               211
154    Gentoo    Biscoe           50.0          16.3               230
155    Gentoo    Biscoe           48.7          14.1               210
156    Gentoo    Biscoe           50.0          15.2               218
157    Gentoo    Biscoe           47.6          14.5               215
158    Gentoo    Biscoe           46.5          13.5               210
159    Gentoo    Biscoe           45.4          14.6               211
160    Gentoo    Biscoe           46.7          15.3               219
161    Gentoo    Biscoe           43.3          13.4               209
162    Gentoo    Biscoe           46.8          15.4               215
163    Gentoo    Biscoe           40.9          13.7               214
164    Gentoo    Biscoe           49.0          16.1               216
165    Gentoo    Biscoe           45.5          13.7               214
166    Gentoo    Biscoe           48.4          14.6               213
167    Gentoo    Biscoe           45.8          14.6               210
168    Gentoo    Biscoe           49.3          15.7               217
169    Gentoo    Biscoe           42.0          13.5               210
170    Gentoo    Biscoe           49.2          15.2               221
171    Gentoo    Biscoe           46.2          14.5               209
172    Gentoo    Biscoe           48.7          15.1               222
173    Gentoo    Biscoe           50.2          14.3               218
174    Gentoo    Biscoe           45.1          14.5               215
175    Gentoo    Biscoe           46.5          14.5               213
176    Gentoo    Biscoe           46.3          15.8               215
177    Gentoo    Biscoe           42.9          13.1               215
178    Gentoo    Biscoe           46.1          15.1               215
179    Gentoo    Biscoe           44.5          14.3               216
180    Gentoo    Biscoe           47.8          15.0               215
181    Gentoo    Biscoe           48.2          14.3               210
182    Gentoo    Biscoe           50.0          15.3               220
183    Gentoo    Biscoe           47.3          15.3               222
184    Gentoo    Biscoe           42.8          14.2               209
185    Gentoo    Biscoe           45.1          14.5               207
186    Gentoo    Biscoe           59.6          17.0               230
187    Gentoo    Biscoe           49.1          14.8               220
188    Gentoo    Biscoe           48.4          16.3               220
189    Gentoo    Biscoe           42.6          13.7               213
190    Gentoo    Biscoe           44.4          17.3               219
191    Gentoo    Biscoe           44.0          13.6               208
192    Gentoo    Biscoe           48.7          15.7               208
193    Gentoo    Biscoe           42.7          13.7               208
194    Gentoo    Biscoe           49.6          16.0               225
195    Gentoo    Biscoe           45.3          13.7               210
196    Gentoo    Biscoe           49.6          15.0               216
197    Gentoo    Biscoe           50.5          15.9               222
198    Gentoo    Biscoe           43.6          13.9               217
199    Gentoo    Biscoe           45.5          13.9               210
200    Gentoo    Biscoe           50.5          15.9               225
201    Gentoo    Biscoe           44.9          13.3               213
202    Gentoo    Biscoe           45.2          15.8               215
203    Gentoo    Biscoe           46.6          14.2               210
204    Gentoo    Biscoe           48.5          14.1               220
205    Gentoo    Biscoe           45.1          14.4               210
206    Gentoo    Biscoe           50.1          15.0               225
207    Gentoo    Biscoe           46.5          14.4               217
208    Gentoo    Biscoe           45.0          15.4               220
209    Gentoo    Biscoe           43.8          13.9               208
210    Gentoo    Biscoe           45.5          15.0               220
211    Gentoo    Biscoe           43.2          14.5               208
212    Gentoo    Biscoe           50.4          15.3               224
213    Gentoo    Biscoe           45.3          13.8               208
214    Gentoo    Biscoe           46.2          14.9               221
215    Gentoo    Biscoe           45.7          13.9               214
216    Gentoo    Biscoe           54.3          15.7               231
217    Gentoo    Biscoe           45.8          14.2               219
218    Gentoo    Biscoe           49.8          16.8               230
219    Gentoo    Biscoe           46.2          14.4               214
220    Gentoo    Biscoe           49.5          16.2               229
221    Gentoo    Biscoe           43.5          14.2               220
222    Gentoo    Biscoe           50.7          15.0               223
223    Gentoo    Biscoe           47.7          15.0               216
224    Gentoo    Biscoe           46.4          15.6               221
225    Gentoo    Biscoe           48.2          15.6               221
226    Gentoo    Biscoe           46.5          14.8               217
227    Gentoo    Biscoe           46.4          15.0               216
228    Gentoo    Biscoe           48.6          16.0               230
229    Gentoo    Biscoe           47.5          14.2               209
230    Gentoo    Biscoe           51.1          16.3               220
231    Gentoo    Biscoe           45.2          13.8               215
232    Gentoo    Biscoe           45.2          16.4               223
233    Gentoo    Biscoe           49.1          14.5               212
234    Gentoo    Biscoe           52.5          15.6               221
235    Gentoo    Biscoe           47.4          14.6               212
236    Gentoo    Biscoe           50.0          15.9               224
237    Gentoo    Biscoe           44.9          13.8               212
238    Gentoo    Biscoe           50.8          17.3               228
239    Gentoo    Biscoe           43.4          14.4               218
240    Gentoo    Biscoe           51.3          14.2               218
241    Gentoo    Biscoe           47.5          14.0               212
242    Gentoo    Biscoe           52.1          17.0               230
243    Gentoo    Biscoe           47.5          15.0               218
244    Gentoo    Biscoe           52.2          17.1               228
245    Gentoo    Biscoe           45.5          14.5               212
246    Gentoo    Biscoe           49.5          16.1               224
247    Gentoo    Biscoe           44.5          14.7               214
248    Gentoo    Biscoe           50.8          15.7               226
249    Gentoo    Biscoe           49.4          15.8               216
250    Gentoo    Biscoe           46.9          14.6               222
251    Gentoo    Biscoe           48.4          14.4               203
252    Gentoo    Biscoe           51.1          16.5               225
253    Gentoo    Biscoe           48.5          15.0               219
254    Gentoo    Biscoe           55.9          17.0               228
255    Gentoo    Biscoe           47.2          15.5               215
256    Gentoo    Biscoe           49.1          15.0               228
257    Gentoo    Biscoe           47.3          13.8               216
258    Gentoo    Biscoe           46.8          16.1               215
259    Gentoo    Biscoe           41.7          14.7               210
260    Gentoo    Biscoe           53.4          15.8               219
261    Gentoo    Biscoe           43.3          14.0               208
262    Gentoo    Biscoe           48.1          15.1               209
263    Gentoo    Biscoe           50.5          15.2               216
264    Gentoo    Biscoe           49.8          15.9               229
265    Gentoo    Biscoe           43.5          15.2               213
266    Gentoo    Biscoe           51.5          16.3               230
267    Gentoo    Biscoe           46.2          14.1               217
268    Gentoo    Biscoe           55.1          16.0               230
269    Gentoo    Biscoe           44.5          15.7               217
270    Gentoo    Biscoe           48.8          16.2               222
271    Gentoo    Biscoe           47.2          13.7               214
272    Gentoo    Biscoe             NA            NA                NA
273    Gentoo    Biscoe           46.8          14.3               215
274    Gentoo    Biscoe           50.4          15.7               222
275    Gentoo    Biscoe           45.2          14.8               212
276    Gentoo    Biscoe           49.9          16.1               213
277 Chinstrap     Dream           46.5          17.9               192
278 Chinstrap     Dream           50.0          19.5               196
279 Chinstrap     Dream           51.3          19.2               193
280 Chinstrap     Dream           45.4          18.7               188
281 Chinstrap     Dream           52.7          19.8               197
282 Chinstrap     Dream           45.2          17.8               198
283 Chinstrap     Dream           46.1          18.2               178
284 Chinstrap     Dream           51.3          18.2               197
285 Chinstrap     Dream           46.0          18.9               195
286 Chinstrap     Dream           51.3          19.9               198
287 Chinstrap     Dream           46.6          17.8               193
288 Chinstrap     Dream           51.7          20.3               194
289 Chinstrap     Dream           47.0          17.3               185
290 Chinstrap     Dream           52.0          18.1               201
291 Chinstrap     Dream           45.9          17.1               190
292 Chinstrap     Dream           50.5          19.6               201
293 Chinstrap     Dream           50.3          20.0               197
294 Chinstrap     Dream           58.0          17.8               181
295 Chinstrap     Dream           46.4          18.6               190
296 Chinstrap     Dream           49.2          18.2               195
297 Chinstrap     Dream           42.4          17.3               181
298 Chinstrap     Dream           48.5          17.5               191
299 Chinstrap     Dream           43.2          16.6               187
300 Chinstrap     Dream           50.6          19.4               193
301 Chinstrap     Dream           46.7          17.9               195
302 Chinstrap     Dream           52.0          19.0               197
303 Chinstrap     Dream           50.5          18.4               200
304 Chinstrap     Dream           49.5          19.0               200
305 Chinstrap     Dream           46.4          17.8               191
306 Chinstrap     Dream           52.8          20.0               205
307 Chinstrap     Dream           40.9          16.6               187
308 Chinstrap     Dream           54.2          20.8               201
309 Chinstrap     Dream           42.5          16.7               187
310 Chinstrap     Dream           51.0          18.8               203
311 Chinstrap     Dream           49.7          18.6               195
312 Chinstrap     Dream           47.5          16.8               199
313 Chinstrap     Dream           47.6          18.3               195
314 Chinstrap     Dream           52.0          20.7               210
315 Chinstrap     Dream           46.9          16.6               192
316 Chinstrap     Dream           53.5          19.9               205
317 Chinstrap     Dream           49.0          19.5               210
318 Chinstrap     Dream           46.2          17.5               187
319 Chinstrap     Dream           50.9          19.1               196
320 Chinstrap     Dream           45.5          17.0               196
321 Chinstrap     Dream           50.9          17.9               196
322 Chinstrap     Dream           50.8          18.5               201
323 Chinstrap     Dream           50.1          17.9               190
324 Chinstrap     Dream           49.0          19.6               212
325 Chinstrap     Dream           51.5          18.7               187
326 Chinstrap     Dream           49.8          17.3               198
327 Chinstrap     Dream           48.1          16.4               199
328 Chinstrap     Dream           51.4          19.0               201
329 Chinstrap     Dream           45.7          17.3               193
330 Chinstrap     Dream           50.7          19.7               203
331 Chinstrap     Dream           42.5          17.3               187
332 Chinstrap     Dream           52.2          18.8               197
333 Chinstrap     Dream           45.2          16.6               191
334 Chinstrap     Dream           49.3          19.9               203
335 Chinstrap     Dream           50.2          18.8               202
336 Chinstrap     Dream           45.6          19.4               194
337 Chinstrap     Dream           51.9          19.5               206
338 Chinstrap     Dream           46.8          16.5               189
339 Chinstrap     Dream           45.7          17.0               195
340 Chinstrap     Dream           55.8          19.8               207
341 Chinstrap     Dream           43.5          18.1               202
342 Chinstrap     Dream           49.6          18.2               193
343 Chinstrap     Dream           50.8          19.0               210
344 Chinstrap     Dream           50.2          18.7               198
    body_mass_g    sex year
1          3750   male 2007
2          3800 female 2007
3          3250 female 2007
4            NA   &lt;NA&gt; 2007
5          3450 female 2007
6          3650   male 2007
7          3625 female 2007
8          4675   male 2007
9          3475   &lt;NA&gt; 2007
10         4250   &lt;NA&gt; 2007
11         3300   &lt;NA&gt; 2007
12         3700   &lt;NA&gt; 2007
13         3200 female 2007
14         3800   male 2007
15         4400   male 2007
16         3700 female 2007
17         3450 female 2007
18         4500   male 2007
19         3325 female 2007
20         4200   male 2007
21         3400 female 2007
22         3600   male 2007
23         3800 female 2007
24         3950   male 2007
25         3800   male 2007
26         3800 female 2007
27         3550   male 2007
28         3200 female 2007
29         3150 female 2007
30         3950   male 2007
31         3250 female 2007
32         3900   male 2007
33         3300 female 2007
34         3900   male 2007
35         3325 female 2007
36         4150   male 2007
37         3950   male 2007
38         3550 female 2007
39         3300 female 2007
40         4650   male 2007
41         3150 female 2007
42         3900   male 2007
43         3100 female 2007
44         4400   male 2007
45         3000 female 2007
46         4600   male 2007
47         3425   male 2007
48         2975   &lt;NA&gt; 2007
49         3450 female 2007
50         4150   male 2007
51         3500 female 2008
52         4300   male 2008
53         3450 female 2008
54         4050   male 2008
55         2900 female 2008
56         3700   male 2008
57         3550 female 2008
58         3800   male 2008
59         2850 female 2008
60         3750   male 2008
61         3150 female 2008
62         4400   male 2008
63         3600 female 2008
64         4050   male 2008
65         2850 female 2008
66         3950   male 2008
67         3350 female 2008
68         4100   male 2008
69         3050 female 2008
70         4450   male 2008
71         3600 female 2008
72         3900   male 2008
73         3550 female 2008
74         4150   male 2008
75         3700 female 2008
76         4250   male 2008
77         3700 female 2008
78         3900   male 2008
79         3550 female 2008
80         4000   male 2008
81         3200 female 2008
82         4700   male 2008
83         3800 female 2008
84         4200   male 2008
85         3350 female 2008
86         3550   male 2008
87         3800   male 2008
88         3500 female 2008
89         3950   male 2008
90         3600 female 2008
91         3550 female 2008
92         4300   male 2008
93         3400 female 2008
94         4450   male 2008
95         3300 female 2008
96         4300   male 2008
97         3700 female 2008
98         4350   male 2008
99         2900 female 2008
100        4100   male 2008
101        3725 female 2009
102        4725   male 2009
103        3075 female 2009
104        4250   male 2009
105        2925 female 2009
106        3550   male 2009
107        3750 female 2009
108        3900   male 2009
109        3175 female 2009
110        4775   male 2009
111        3825 female 2009
112        4600   male 2009
113        3200 female 2009
114        4275   male 2009
115        3900 female 2009
116        4075   male 2009
117        2900 female 2009
118        3775   male 2009
119        3350 female 2009
120        3325   male 2009
121        3150 female 2009
122        3500   male 2009
123        3450 female 2009
124        3875   male 2009
125        3050 female 2009
126        4000   male 2009
127        3275 female 2009
128        4300   male 2009
129        3050 female 2009
130        4000   male 2009
131        3325 female 2009
132        3500   male 2009
133        3500 female 2009
134        4475   male 2009
135        3425 female 2009
136        3900   male 2009
137        3175 female 2009
138        3975   male 2009
139        3400 female 2009
140        4250   male 2009
141        3400 female 2009
142        3475   male 2009
143        3050 female 2009
144        3725   male 2009
145        3000 female 2009
146        3650   male 2009
147        4250   male 2009
148        3475 female 2009
149        3450 female 2009
150        3750   male 2009
151        3700 female 2009
152        4000   male 2009
153        4500 female 2007
154        5700   male 2007
155        4450 female 2007
156        5700   male 2007
157        5400   male 2007
158        4550 female 2007
159        4800 female 2007
160        5200   male 2007
161        4400 female 2007
162        5150   male 2007
163        4650 female 2007
164        5550   male 2007
165        4650 female 2007
166        5850   male 2007
167        4200 female 2007
168        5850   male 2007
169        4150 female 2007
170        6300   male 2007
171        4800 female 2007
172        5350   male 2007
173        5700   male 2007
174        5000 female 2007
175        4400 female 2007
176        5050   male 2007
177        5000 female 2007
178        5100   male 2007
179        4100   &lt;NA&gt; 2007
180        5650   male 2007
181        4600 female 2007
182        5550   male 2007
183        5250   male 2007
184        4700 female 2007
185        5050 female 2007
186        6050   male 2007
187        5150 female 2008
188        5400   male 2008
189        4950 female 2008
190        5250   male 2008
191        4350 female 2008
192        5350   male 2008
193        3950 female 2008
194        5700   male 2008
195        4300 female 2008
196        4750   male 2008
197        5550   male 2008
198        4900 female 2008
199        4200 female 2008
200        5400   male 2008
201        5100 female 2008
202        5300   male 2008
203        4850 female 2008
204        5300   male 2008
205        4400 female 2008
206        5000   male 2008
207        4900 female 2008
208        5050   male 2008
209        4300 female 2008
210        5000   male 2008
211        4450 female 2008
212        5550   male 2008
213        4200 female 2008
214        5300   male 2008
215        4400 female 2008
216        5650   male 2008
217        4700 female 2008
218        5700   male 2008
219        4650   &lt;NA&gt; 2008
220        5800   male 2008
221        4700 female 2008
222        5550   male 2008
223        4750 female 2008
224        5000   male 2008
225        5100   male 2008
226        5200 female 2008
227        4700 female 2008
228        5800   male 2008
229        4600 female 2008
230        6000   male 2008
231        4750 female 2008
232        5950   male 2008
233        4625 female 2009
234        5450   male 2009
235        4725 female 2009
236        5350   male 2009
237        4750 female 2009
238        5600   male 2009
239        4600 female 2009
240        5300   male 2009
241        4875 female 2009
242        5550   male 2009
243        4950 female 2009
244        5400   male 2009
245        4750 female 2009
246        5650   male 2009
247        4850 female 2009
248        5200   male 2009
249        4925   male 2009
250        4875 female 2009
251        4625 female 2009
252        5250   male 2009
253        4850 female 2009
254        5600   male 2009
255        4975 female 2009
256        5500   male 2009
257        4725   &lt;NA&gt; 2009
258        5500   male 2009
259        4700 female 2009
260        5500   male 2009
261        4575 female 2009
262        5500   male 2009
263        5000 female 2009
264        5950   male 2009
265        4650 female 2009
266        5500   male 2009
267        4375 female 2009
268        5850   male 2009
269        4875   &lt;NA&gt; 2009
270        6000   male 2009
271        4925 female 2009
272          NA   &lt;NA&gt; 2009
273        4850 female 2009
274        5750   male 2009
275        5200 female 2009
276        5400   male 2009
277        3500 female 2007
278        3900   male 2007
279        3650   male 2007
280        3525 female 2007
281        3725   male 2007
282        3950 female 2007
283        3250 female 2007
284        3750   male 2007
285        4150 female 2007
286        3700   male 2007
287        3800 female 2007
288        3775   male 2007
289        3700 female 2007
290        4050   male 2007
291        3575 female 2007
292        4050   male 2007
293        3300   male 2007
294        3700 female 2007
295        3450 female 2007
296        4400   male 2007
297        3600 female 2007
298        3400   male 2007
299        2900 female 2007
300        3800   male 2007
301        3300 female 2007
302        4150   male 2007
303        3400 female 2008
304        3800   male 2008
305        3700 female 2008
306        4550   male 2008
307        3200 female 2008
308        4300   male 2008
309        3350 female 2008
310        4100   male 2008
311        3600   male 2008
312        3900 female 2008
313        3850 female 2008
314        4800   male 2008
315        2700 female 2008
316        4500   male 2008
317        3950   male 2008
318        3650 female 2008
319        3550   male 2008
320        3500 female 2008
321        3675 female 2009
322        4450   male 2009
323        3400 female 2009
324        4300   male 2009
325        3250   male 2009
326        3675 female 2009
327        3325 female 2009
328        3950   male 2009
329        3600 female 2009
330        4050   male 2009
331        3350 female 2009
332        3450   male 2009
333        3250 female 2009
334        4050   male 2009
335        3800   male 2009
336        3525 female 2009
337        3950   male 2009
338        3650 female 2009
339        3650 female 2009
340        4000   male 2009
341        3400 female 2009
342        3775   male 2009
343        4100   male 2009
344        3775 female 2009</code></pre>
</div>
</div>
<ul>
<li><code>tibbles</code> only print 10 rows by default, data.frames a lot more.</li>
<li><code>tibbles</code> only print as many columns as possible in one row, which looks a lot cleaner.</li>
<li>On top, the <code>tibble</code> shows us how many rows and columns there are in our data.</li>
<li><code>NAs</code> are printed in red in <code>tibbles</code> (not in this output, but try it yourself).</li>
<li>The data-type of each column is printed on top of the column in <code>tibbles</code>.</li>
</ul>
</div>
</div>
</div>
<ol start="5" type="1">
<li>Save your penguins <code>data.frame</code> and your penguins <code>tibble</code> as <code>.RDS</code> files in a dedicated <code>data</code> folder in your R-project. Use relative paths!</li>
</ol>
<div class="callout callout-style-default callout-caution callout-titled">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-7-contents" aria-controls="callout-7" aria-expanded="false" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Solution
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-7" class="callout-7-contents callout-collapse collapse">
<div class="callout-body-container callout-body">
<div class="cell">
<div class="sourceCode cell-code" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb13-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">saveRDS</span>(penguins, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">file =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"./data/penguins.RDS"</span>)</span>
<span id="cb13-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">saveRDS</span>(penguins_frame, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">file =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"./data/penguins_frame.RDS"</span>)</span></code></pre></div>
</div>
</div>
</div>
</div>
<ol start="6" type="1">
<li>Load your penguins <code>data.frame</code> and your penguins <code>tibble</code> into R. Use the <code>here</code> package.</li>
</ol>
<div class="callout callout-style-default callout-caution callout-titled">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-8-contents" aria-controls="callout-8" aria-expanded="false" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Solution
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-8" class="callout-8-contents callout-collapse collapse">
<div class="callout-body-container callout-body">
<div class="cell">
<div class="sourceCode cell-code" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb14-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(here)</span>
<span id="cb14-2"></span>
<span id="cb14-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">readRDS</span>(here<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">here</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"data"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"penguins.RDS"</span>))</span>
<span id="cb14-4"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">readRDS</span>(here<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">here</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"data"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"penguins_frame.RDS"</span>))</span></code></pre></div>
</div>
</div>
</div>
</div>


</section>


<div id="quarto-appendix" class="default"><section id="footnotes" class="footnotes footnotes-end-of-document"><h2 class="anchored quarto-appendix-heading">Footnotes</h2>

<ol>
<li id="fn1"><p>Image by <a href="https://unsplash.com/de/@barnimages?utm_content=creditCopyText&amp;utm_medium=referral&amp;utm_source=unsplash">Barn Images</a> on <a href="https://unsplash.com/de/fotos/verschiedene-handwerkzeuge-im-werkzeugregal-t5YUoHW6zRo?utm_content=creditCopyText&amp;utm_medium=referral&amp;utm_source=unsplash">Unsplash</a>.↩︎</p></li>
</ol>
</section></div> ]]></description>
  <category>R</category>
  <category>tidyverse</category>
  <category>R-SIG</category>
  <category>intro</category>
  <guid>https://iqb-research.github.io/IQB-Methods/docs/r_sig/24_01_26_tidyverse_intro/</guid>
  <pubDate>Mon, 26 Feb 2024 00:00:00 GMT</pubDate>
  <media:content url="https://iqb-research.github.io/IQB-Methods/docs/r_sig/24_01_26_tidyverse_intro/preview_image.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Pull requests with Github</title>
  <dc:creator>Sebastian Weirich</dc:creator>
  <link>https://iqb-research.github.io/IQB-Methods/docs/git/github_pullrequests.html</link>
  <description><![CDATA[ 




<p>When people collaboratively develop software (R packages) and use Github as a repository, colleagues can review software parts before they are included in an updated package version.</p>
<p><img src="https://iqb-research.github.io/IQB-Methods/docs/git/github.jpg" class="img-fluid"><sup>1</sup></p>
<section id="recommended-workflow" class="level2">
<h2 class="anchored" data-anchor-id="recommended-workflow">Recommended Workflow</h2>
<ol type="1">
<li>Pull all changes from the relevant branch. Normally, this will be the branch <code>main</code>, but it might also happen that you want to extend on another branch.</li>
<li><code>Create</code> and <code>checkout</code> (change onto the branch) on a new branch. By default, this will create a new branch from main, but you can also create a new branch from any other branch, if you want to extend on it.</li>
<li>Make changes in your local repository.</li>
<li><code>Commit</code> them as often as possible. The more you commit, the more of you work gets saved regularly.</li>
<li>If you want to upload your changes, <code>Push</code>.</li>
<li>Repeat 3 - 5 until you are done.</li>
</ol>
<section id="initiating-a-review" class="level3">
<h3 class="anchored" data-anchor-id="initiating-a-review">Initiating a review</h3>
<p>Once you are content with your changes and you want to finalize them, you can initiate a review:</p>
<ol type="1">
<li>Change to the the Github page of the package (for example, <a href="https://github.com/weirichs/eatTools">eatTools repository</a>) and start the <code>pull request</code> via “Compare &amp; pull request”. This will open a new page, where you can customize your pull request.</li>
<li>Choose your favorite reviewer under “Reviewer”. You can ask multiple people.</li>
<li>Enter a comment for the request, specifying what you want the reviewer(s) to look for especially.</li>
<li>Click on “create pull request” to start the request.</li>
</ol>
</section>
<section id="review-process" class="level3">
<h3 class="anchored" data-anchor-id="review-process">Review Process</h3>
<ol type="1">
<li>Now the review process begins: The person that takes over the review assigns herself on the right side of the pull request page. Keep in mind our <a href="https://iqb-research.github.io/IQB-Methods/docs/discussions/code_conventions.html">Code Conventions</a>.</li>
<li>The reviewer can request changes, either general ones or specific ones by adding comments to specific lines of code.</li>
<li>In the end, the reviewer delivers their final verdict: <code>approve</code> or <code>request changes</code>.</li>
<li>Now it’s the authors turn again: the author has to address the comments of the reviewer and make requested changes, or discuss why certain requested changes should not be made.</li>
<li>The changes can either be made on the branch the pull request was initiated on or on a new branch that branches out from this branch. If many changes are made, it might be easier to work on a separate branch and initiate a new pull request to merge it onto the parent branch (where the first pull request was made) to make clearer which new changes have been made.</li>
<li>Reiterate until the author and reviewer have reached an agreement.</li>
<li>If both are satisfied. On the GitHub Pull-request page, select “merge pull request into main” (or any other branch you want to and can merge on) at the bottom.</li>
<li>Finally, the review branch can be deleted. Choose “delete” on the Github homepage. Then delete the local branch (i.e.&nbsp;in GitKraken) in the same way if necessary</li>
</ol>
</section>
</section>
<section id="please-note" class="level2">
<h2 class="anchored" data-anchor-id="please-note">Please note</h2>
<p>As long as the master/main branch and the new branch are not merged again, there are two “parallel” branches. The background to this is that - as long as developers are working in the new branch - users can always download the latest working version (i.e.&nbsp;the master branch) of the package. As a developer, you always have to check and be conscious about on which branch you are currently working on.</p>
</section>
<section id="git-workflow-im-terminal-nh" class="level2">
<h2 class="anchored" data-anchor-id="git-workflow-im-terminal-nh">Git-Workflow im Terminal (NH)</h2>
<ol type="1">
<li><em>Gegebenenfalls: Auf den mainbranch wechseln:</em> <code>git checkout main</code></li>
<li>Verifizieren, dass man auf dem richtigen branch ist: <code>git status</code></li>
<li>Onlinebranch lokal herunterladen: <code>git pull</code></li>
<li><em>Gegebenenfalls: Neuen branch “branch_2” erstellen, und direkt darauf wechseln:</em> <code>git checkout -b branch_2</code></li>
<li>(Alle) Änderungen stagen: <code>git add .</code></li>
<li>Gestagte Änderungen commiten (mit aussagekräftiger Commitmessage): <code>git commit -m "implemented new function"</code></li>
<li>Commits hochladen: <code>git push</code></li>
</ol>


</section>


<div id="quarto-appendix" class="default"><section id="footnotes" class="footnotes footnotes-end-of-document"><h2 class="anchored quarto-appendix-heading">Footnotes</h2>

<ol>
<li id="fn1"><p>Image by <a href="https://unsplash.com/de/@synkevych?utm_content=creditCopyText&amp;utm_medium=referral&amp;utm_source=unsplash">Roman Synkevych</a> on <a href="https://unsplash.com/de/fotos/blau-schwarzes-pinguin-pluschtier-UT8LMo-wlyk">Unsplash</a>.↩︎</p></li>
</ol>
</section></div> ]]></description>
  <category>github</category>
  <category>tutorial</category>
  <category>workflow</category>
  <category>git</category>
  <category>R</category>
  <category>intro</category>
  <guid>https://iqb-research.github.io/IQB-Methods/docs/git/github_pullrequests.html</guid>
  <pubDate>Fri, 12 Jan 2024 00:00:00 GMT</pubDate>
  <media:content url="https://iqb-research.github.io/IQB-Methods/docs/git/github.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Case_when() function</title>
  <dc:creator>Nicklas Hafiz</dc:creator>
  <link>https://iqb-research.github.io/IQB-Methods/docs/r_sig/23_12_18_case_when/</link>
  <description><![CDATA[ 




<p><img src="https://iqb-research.github.io/IQB-Methods/docs/r_sig/23_12_18_case_when/case_when.jpg" class="img-fluid"><sup>1</sup></p>
<p>The <code>case_when()</code> function from the <code>dplyr</code> package of the <code>tidyverse</code> is a useful function for combining multiple <code>ifelse()</code> statements.</p>
<section id="how-to-use-it" class="level2">
<h2 class="anchored" data-anchor-id="how-to-use-it">How to use it</h2>
<p>Let’s take a look at a little example. Let’s consider a very simple data frame containing only a column of different countries:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(dplyr)</span></code></pre></div>
<div class="cell-output cell-output-stderr">
<pre><code>
Attaching package: 'dplyr'</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code>The following objects are masked from 'package:stats':

    filter, lag</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code>The following objects are masked from 'package:base':

    intersect, setdiff, setequal, union</code></pre>
</div>
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb5-1">df <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">data.frame</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">country =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rep</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Deu"</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>), <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Mexico"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Peru"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Ghana"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"China"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Spanien"</span>))</span></code></pre></div>
</div>
<p>Now, let’s suppose we want to add a second column containing the continent of the country. We can either use nested <code>ifelse()</code> statements, which makes the coed quite hard to read:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb6-1">df<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>continent <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ifelse</span>(df<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>country <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%in%</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Deu"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Spanien"</span>), </span>
<span id="cb6-2">                       <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">yes =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Europe"</span>, </span>
<span id="cb6-3">                       <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">no =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ifelse</span>(</span>
<span id="cb6-4">                         df<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>country <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Mexico"</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|</span> df<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>country <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Peru"</span>, </span>
<span id="cb6-5">                         <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">yes =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"America"</span>,</span>
<span id="cb6-6">                         <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">no =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ifelse</span>(</span>
<span id="cb6-7">                           df<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>country <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Ghana"</span>, </span>
<span id="cb6-8">                           <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">yes =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Africa"</span>,</span>
<span id="cb6-9">                           <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">no =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Asia"</span></span>
<span id="cb6-10">                       )</span>
<span id="cb6-11">                       ))</span>
<span id="cb6-12"></span>
<span id="cb6-13">df</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>  country continent
1     Deu    Europe
2     Deu    Europe
3     Deu    Europe
4     Deu    Europe
5  Mexico   America
6    Peru   America
7   Ghana    Africa
8   China      Asia
9 Spanien    Europe</code></pre>
</div>
</div>
<p><code>case_when()</code> has a slightly different syntax, but is not nested, which makes it easier to read. Condition and output are separated by <code>~</code>. So if the condition on the left side is met in a row, the function returns the value on the right side of <code>~</code>:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb8-1">df_2 <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> df <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb8-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mutate</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">continent =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">case_when</span>(country <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%in%</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Deu"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Spanien"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Europe"</span>, </span>
<span id="cb8-3">                               country <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%in%</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Mexico"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Peru"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"America"</span>,</span>
<span id="cb8-4">                               country <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Ghana"</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Africa"</span>, </span>
<span id="cb8-5">                               <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Another continent"</span></span>
<span id="cb8-6">                                 )</span>
<span id="cb8-7">         )</span>
<span id="cb8-8">df_2</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>  country         continent
1     Deu            Europe
2     Deu            Europe
3     Deu            Europe
4     Deu            Europe
5  Mexico           America
6    Peru           America
7   Ghana            Africa
8   China Another continent
9 Spanien            Europe</code></pre>
</div>
</div>
<p>We wrap this statement into a mutate function to automatically create the new column continent from the output of <code>case_when</code>. The <code>TRUE</code> in the last row catches all conditions we haven’t dealt with further above. So all rows which haven’t met any of the above conditions will get the label “Another continent”.</p>
</section>
<section id="evaluation-order" class="level2">
<h2 class="anchored" data-anchor-id="evaluation-order">Evaluation order</h2>
<p><code>case_when()</code> goes from the top to the bottom. So if a row has met a statement, it is not considered further down. That’s why it makes sense to go from the most specific statements to the less specific ones. Otherwise the least specific ones might overwrite everything in the beginning:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb10-1">df_3 <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> df <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb10-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mutate</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">continent =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">case_when</span>(country <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%in%</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(df<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>country) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Other country"</span>, </span>
<span id="cb10-3">                               country <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%in%</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Mexico"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Peru"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"America"</span>,</span>
<span id="cb10-4">                               country <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Ghana"</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Africa"</span>, </span>
<span id="cb10-5">                               <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Another continent"</span></span>
<span id="cb10-6">                                 )</span>
<span id="cb10-7">         )</span>
<span id="cb10-8"></span>
<span id="cb10-9">df_3  </span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>  country     continent
1     Deu Other country
2     Deu Other country
3     Deu Other country
4     Deu Other country
5  Mexico Other country
6    Peru Other country
7   Ghana Other country
8   China Other country
9 Spanien Other country</code></pre>
</div>
</div>
<p>Because our first statement already covers all rows, the rest is obsolete. This top-down working also makes the <code>TRUE</code> condition in our last line possible, because only those rows that haven’t been used yet will come this far, and all of them are caught (because <code>TRUE</code> always is true).</p>


</section>


<div id="quarto-appendix" class="default"><section id="footnotes" class="footnotes footnotes-end-of-document"><h2 class="anchored quarto-appendix-heading">Footnotes</h2>

<ol>
<li id="fn1"><p>Image by <a href="https://unsplash.com/de/@skyreplacementpack?utm_content=creditCopyText&amp;utm_medium=referral&amp;utm_source=unsplash">Sky Replacement Pack</a> on <a href="https://unsplash.com/de/fotos/eine-grune-aurora-am-himmel-x--iIUgWLDs">Unsplash</a>.↩︎</p></li>
</ol>
</section></div> ]]></description>
  <category>R</category>
  <category>tidyverse</category>
  <category>data manipulation</category>
  <category>R-SIG</category>
  <category>tutorial</category>
  <guid>https://iqb-research.github.io/IQB-Methods/docs/r_sig/23_12_18_case_when/</guid>
  <pubDate>Mon, 18 Dec 2023 00:00:00 GMT</pubDate>
  <media:content url="https://iqb-research.github.io/IQB-Methods/docs/r_sig/23_12_18_case_when/case_when.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Updating the website</title>
  <dc:creator>Nicklas Hafiz</dc:creator>
  <link>https://iqb-research.github.io/IQB-Methods/docs/quarto/</link>
  <description><![CDATA[ 




<p>This website was created using Quarto. It is hosted on GitHub. In this chapter we will look at the underlying structure of this website, and how to update it.</p>
<section id="setup" class="level2">
<h2 class="anchored" data-anchor-id="setup">Setup</h2>
<ol type="1">
<li>As the website is hosted on GitHub, you can just clone the <a href="https://github.com/iqb-research/IQB-Methods">repository</a>.</li>
<li>Open the RStudio project with RStudio.</li>
<li>This website uses <a href="https://rstudio.github.io/renv/articles/renv.html">renv</a> to keep the project specific package library up to date.</li>
</ol>
<section id="renv" class="level3">
<h3 class="anchored" data-anchor-id="renv"><code>renv</code></h3>
<div class="callout callout-style-default callout-important callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Important
</div>
</div>
<div class="callout-body-container callout-body">
<p>Make sure you’re using the R version recorded in the LOCK-file when working with <a href="https://rstudio.github.io/renv/articles/renv.html">renv</a>. This makes things a bit easier. Of course, if the R version in the LOCK file is an old one, you can update it with <code>renv::snapshot()</code>.</p>
</div>
</div>
<p>Wandering what <code>renv</code> is? Check out the <a href="../../docs/r_sig/23_11_06_renv/index.html">renv Intro</a> for more information.</p>
<p>The needed packages are recorded in the <code>.lock</code>-file, but not uploaded to GitHub. So the <strong>first thing you need to do</strong> is to install the necessary packages into your local project library:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># install.packages("renv")</span></span>
<span id="cb1-2">renv<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">restore</span>()</span></code></pre></div>
</div>
<p>You can do this every time you start working on the website. Only packages that are not already in your project specific package library will be downloaded.</p>
<p>If your files need their own packages, just install them like you would normally do with either:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb2-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">install.packages</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"eatGADS"</span>)</span>
<span id="cb2-2">renv<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">install</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"eatGADS"</span>)</span></code></pre></div>
</div>
<p>You need to do this even if you have them already installed on your PC locally, because <code>renv</code> uses a project specific library.</p>
<div class="callout callout-style-default callout-important callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Important
</div>
</div>
<div class="callout-body-container callout-body">
<p>Don’t forget to update the <code>.lock</code> file with <code>renv::snapshot()</code> if you have added new packages in your code. Otherwise the GitHub-Action will fail. But be concious about what is updated. If you are using an old version in the project, or old package versions, you might downgrade the projects package versions. So run <code>renv::restore()</code> before, to make sure your project library is up to date. <code>renv</code> will show you in the console what is updated from which version to which version.</p>
</div>
</div>
</section>
</section>
<section id="file-structure" class="level2">
<h2 class="anchored" data-anchor-id="file-structure">File structure</h2>
<p>Basically you just need to know where to put your files. Everything else will be taken care of by pushing to GitHub. Files can go into one of two folders: <code>docs</code> or <code>posts</code>. <code>docs</code> contains most of the tutorial files: They are structured into sub folders, like <code>eatPackages</code> or <code>R</code>. Here the quarto-files can be found that contain the actual website content. Edit them or add new ones. Make sure they are quarto-files with the <code>.qmd</code> ending.</p>
<section id="quarto.yml" class="level3">
<h3 class="anchored" data-anchor-id="quarto.yml"><code>_quarto.yml</code></h3>
<p>On the highest directory level you can find the <code>_quarto.yml</code> file. It defines the structure of the website. If you want your new page to be displayed in the website navigation, you have to add it here. You can define different sections and give name the links to the websites:</p>
<pre><code>    contents:
      - section: "R Tutorials"
        contents:
          - section: "Introduction"
            contents:
             - docs/R/index.qmd
             - href: https://nickhaf.github.io/r_tutorial/
               text: Selfpaced R Workshop
             - href: docs/R/ws1.qmd
               text: Einführung</code></pre>
<p>This creates the section <code>R Tutorials</code> with the subsection <code>Introduction</code>. <code>Introduction</code> consists of three pages: the <code>index.qmd</code> page, which is like the main page of this section, the page <code>Selfpaced R Workshop</code>, which actually is only a link to another website, and the page <code>Einführung</code>, which links to the qmd-file <code>ws1.qmd</code>. Just add your pages where appropriate.</p>
</section>
<section id="quarto-files" class="level3">
<h3 class="anchored" data-anchor-id="quarto-files">quarto-files</h3>
<p>The quarto-files contain the actual content of the website. Just edit them like you would edit <code>.qmd</code>-files (or <code>.rmd</code>-files, as the rmarkdown syntax is quite similar). An introduction to the basic quarto functions can be found in the <a href="https://iqb-research.github.io/IQB-Methods/posts/r_sig/24_07_15_quarto_1/">R SIG</a>. Here are some additional useful tips:</p>
<section id="linking" class="level4">
<h4 class="anchored" data-anchor-id="linking">Linking</h4>
<p>You can easily link to other pages of this website, or to other websites:</p>
<p><code>[displayed text](link.de)</code></p>
<p>You might need to use relative paths: <code>[renv](../r_sig/23_11_06_renv/index.qmd)</code>. This will link to the <code>renv</code> page in the <code>posts</code> directory.</p>
</section>
<section id="pictures" class="level4">
<h4 class="anchored" data-anchor-id="pictures">Pictures</h4>
<p>To add a picture to your website, save the picture in the same folder as your <code>.qmd</code>-file. Then you can display it with:</p>
<p><code>![](my_image.jpg)</code></p>
<p><img src="https://iqb-research.github.io/IQB-Methods/docs/quarto/my_image.jpg" class="img-fluid"><sup>1</sup></p>
</section>
<section id="footnotes" class="level4">
<h4 class="anchored" data-anchor-id="footnotes">Footnotes</h4>
<p>You can add footnotes with:</p>
<pre><code>Add a footnote[^2].

[^2]: My Footnote.</code></pre>
<p>Add a footnote<sup>2</sup>.</p>
</section>
<section id="callouts" class="level4">
<h4 class="anchored" data-anchor-id="callouts">Callouts</h4>
<p>You can add little information boxes like this:</p>
<pre><code>::: callout-tip
The R-SIG meets each every two weeks on Monday from 13:00 - 14:00.
:::</code></pre>
<div class="callout callout-style-default callout-tip callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Tip
</div>
</div>
<div class="callout-body-container callout-body">
<p>The R-SIG meets each every two weeks on Monday from 13:00 - 14:00.</p>
</div>
</div>
<p>There are multiple different options, take a look at the <a href="https://quarto.org/docs/authoring/callouts.html">documentation</a> for more.</p>
</section>
<section id="css-styles" class="level4">
<h4 class="anchored" data-anchor-id="css-styles">CSS styles</h4>
<p>You can tweak the appearence even more by using you own <a href="https://quarto.org/docs/output-formats/html-basics.html#css-styles">CSS-styles</a>.</p>
</section>
</section>
<section id="editing-on-the-web-page" class="level3">
<h3 class="anchored" data-anchor-id="editing-on-the-web-page">Editing on the web page</h3>
<p>You can also find a small button called <code>Edit this page</code> next to the GitHub logo. This allows you to edit the page directly on GitHub.</p>
</section>
</section>
<section id="building-the-website" class="level2">
<h2 class="anchored" data-anchor-id="building-the-website">Building the website</h2>
<p>To get a preview of your website, click on the <code>Render</code> button in R Studio. Make sure you are not working locally and not on the network drive, because you might run into admin right problems otherwise. The rendering is not really necessary, because the website will only be built online when you push to GitHub. It will take a while (up to 20 min or more, depending on the size of the website) until the website is updated, as some checks are run first. The website will already get updated if you just open a pull request that wants to merge into main.</p>
</section>
<section id="further-reading" class="level2">
<h2 class="anchored" data-anchor-id="further-reading">Further reading</h2>
<p>The official documentation can be found <a href="https://quarto.org/docs/websites/">here</a>. A nice hands on tutorial on adding blog posts to an existing Quarto website can be found <a href="https://samanthacsik.github.io/posts/2022-10-24-quarto-blogs/">here</a>, along with some additional tips on citations, footnotes etc.</p>


</section>


<div id="quarto-appendix" class="default"><section id="footnotes" class="footnotes footnotes-end-of-document"><h2 class="anchored quarto-appendix-heading">Footnotes</h2>

<ol>
<li id="fn1"><p>Image by <a href="https://unsplash.com/de/@sinjin_thomas?utm_content=creditCopyText&amp;utm_medium=referral&amp;utm_source=unsplash">Sinjin Thomas</a> on <a href="https://unsplash.com/de/fotos/brauner-und-schwarzer-kurzhaariger-hund-VpoS_qNXkxA?utm_content=creditCopyText&amp;utm_medium=referral&amp;utm_source=unsplash">Unsplash</a>.↩︎</p></li>
<li id="fn2"><p>My Footnote.↩︎</p></li>
</ol>
</section></div> ]]></description>
  <category>R</category>
  <category>quarto</category>
  <category>renv</category>
  <category>tutorial</category>
  <category>intro</category>
  <guid>https://iqb-research.github.io/IQB-Methods/docs/quarto/</guid>
  <pubDate>Sun, 17 Dec 2023 00:00:00 GMT</pubDate>
</item>
<item>
  <title>The apply family</title>
  <dc:creator>Nicklas Hafiz</dc:creator>
  <link>https://iqb-research.github.io/IQB-Methods/docs/r_sig/23_07_31_apply/</link>
  <description><![CDATA[ 




<p><img src="https://iqb-research.github.io/IQB-Methods/docs/r_sig/23_07_31_apply/apply_family.jpg" class="img-fluid"><sup>1</sup></p>
<p>I can highly recommend the according chapter in <a href="https://r4ds.had.co.nz/iteration.html#iteration">R for Data Science</a> in case you want to dive deeper.</p>
<section id="for-loops" class="level2">
<h2 class="anchored" data-anchor-id="for-loops">For-loops</h2>
<p>In the <a href="../../../docs/r_sig/23_03_20_forloops/index.html">last SIG</a> we talked about <a href="https://nickhaf.github.io/r_tutorial/qmd/loops/loops.html">for-loops</a>.<br>
While for is definitely the most flexible of the looping options, we suggest you avoid it wherever you can, for the following two reasons:</p>
<ul>
<li><ol type="1">
<li>It is not very expressive, i.e.&nbsp;takes a lot of code to do what you want.</li>
</ol></li>
<li><ol start="2" type="1">
<li>It permits you to write horrible code.</li>
</ol></li>
</ul>
<p>Let’s consider this example:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1">example_list <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">list</span>(</span>
<span id="cb1-2">  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"vec_1"</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>),</span>
<span id="cb1-3">  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"vec_2"</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">400</span>),</span>
<span id="cb1-4">  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"vec_3"</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">80</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">97</span>, <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NA</span>)</span>
<span id="cb1-5">)</span>
<span id="cb1-6"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">str</span>(example_list)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>List of 3
 $ vec_1: int [1:10] 1 2 3 4 5 6 7 8 9 10
 $ vec_2: int [1:301] 100 101 102 103 104 105 106 107 108 109 ...
 $ vec_3: int [1:19] 80 81 82 83 84 85 86 87 88 89 ...</code></pre>
</div>
</div>
<p>Here we have a list consisting of three vectors. Our goal is to sum them an output the result into a new vector. We could use a for-loop to do that:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb3-1">vec_sum <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>()</span>
<span id="cb3-2"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span>(i <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">length</span>(example_list)){</span>
<span id="cb3-3">  vec_sum[i] <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sum</span>(example_list[[i]], <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">na.rm =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>)</span>
<span id="cb3-4">}</span>
<span id="cb3-5">vec_sum</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1]    55 75250  1593</code></pre>
</div>
</div>
<p>Okay, that doesn’t look that complicated. But still, we need to define an empty vector at the beginning so we can save our sums, we need to iterate from <code>1:length(example_list)</code>, and manually select the <img src="https://latex.codecogs.com/png.latex?i%5E%7Bth%7D"> from the input list. That is not very expressive, and can be solved a lot easier. Enter, the apply-family:</p>
</section>
<section id="the-apply-family" class="level2">
<h2 class="anchored" data-anchor-id="the-apply-family">The apply-family</h2>
<p>The apply-functions <em>apply</em> a function to a vector, list, matrix … and also always return a vector, list matrix …, depending on the specific function. Let’s rewrite our for-loop with <code>sapply()</code>:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb5-1">vec_sum <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sapply</span>(example_list, sum)</span>
<span id="cb5-2">vec_sum</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>vec_1 vec_2 vec_3 
   55 75250    NA </code></pre>
</div>
</div>
<p>A lot less code and easier to understand! We just go over every list element and calculate its sum.</p>
<p>If we want to add another function argument, we can do that as well:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb7-1">vec_sum <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sapply</span>(example_list, sum, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">na.rm =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>)</span>
<span id="cb7-2">vec_sum</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>vec_1 vec_2 vec_3 
   55 75250  1593 </code></pre>
</div>
</div>
<p>We can also <a href="https://nickhaf.github.io/r_tutorial/qmd/functions/functions.html">define our own function</a>:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb9-1">vec_sum <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sapply</span>(example_list, <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(x){</span>
<span id="cb9-2">  res_sum <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sum</span>(x, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">na.rm =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>)</span>
<span id="cb9-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(res_sum)</span>
<span id="cb9-4">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">return</span>(res_sum)</span>
<span id="cb9-5">})</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] 55
[1] 75250
[1] 1593</code></pre>
</div>
</div>
<p>Here we calculate the sum of object <code>x</code>, and then print it.</p>
<p>Finally, which makes for even nicer code, we can define the function externally, to give it a concise name:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb11-1">print_sum <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(vec){</span>
<span id="cb11-2">  res_sum <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sum</span>(vec, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">na.rm =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>)</span>
<span id="cb11-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(res_sum)</span>
<span id="cb11-4">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">return</span>(res_sum)</span>
<span id="cb11-5">}</span>
<span id="cb11-6"></span>
<span id="cb11-7">vec_sum <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sapply</span>(example_list, print_sum)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] 55
[1] 75250
[1] 1593</code></pre>
</div>
<div class="sourceCode cell-code" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb13-1">vec_sum</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>vec_1 vec_2 vec_3 
   55 75250  1593 </code></pre>
</div>
</div>
<p>Depending of the output we want, we can choose different apply-functions:</p>
<section id="sapply" class="level3">
<h3 class="anchored" data-anchor-id="sapply">sapply()</h3>
<p><code>sapply()</code> simplifies the result, so, e.g., it will return a vector if possible:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb15-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sapply</span>(example_list, print_sum)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] 55
[1] 75250
[1] 1593</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>vec_1 vec_2 vec_3 
   55 75250  1593 </code></pre>
</div>
</div>
</section>
<section id="vapply" class="level3">
<h3 class="anchored" data-anchor-id="vapply">vapply()</h3>
<p>Similar to <code>sapply()</code>, but we can pre-specify a return value, so it might be safer to use:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb18" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb18-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">vapply</span>(example_list, print_sum, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">integer</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] 55
[1] 75250
[1] 1593</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>vec_1 vec_2 vec_3 
   55 75250  1593 </code></pre>
</div>
</div>
<p>Because the result is an integer vector, we don’t get an error, but if we write this:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb21" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb21-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">vapply</span>(example_list, print_sum, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">character</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] 55</code></pre>
</div>
<div class="cell-output cell-output-error">
<pre><code>Error in vapply(example_list, print_sum, character(1)): values must be type 'character',
 but FUN(X[[1]]) result is type 'integer'</code></pre>
</div>
</div>
<p>The function returns an error, because its output is an integer, and not a character vector.</p>
</section>
<section id="lapply" class="level3">
<h3 class="anchored">lapply()</h3>
<p>Returns a list:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb24" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb24-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">lapply</span>(example_list, print_sum)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] 55
[1] 75250
[1] 1593</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>$vec_1
[1] 55

$vec_2
[1] 75250

$vec_3
[1] 1593</code></pre>
</div>
</div>
<div class="callout callout-style-default callout-note callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Exercises
</div>
</div>
<div class="callout-body-container callout-body">
<p>Work with the <code>iris</code> data.frame (it is already included in Base R):</p>
<section id="exercise-1" class="level3">
<h3 class="anchored" data-anchor-id="exercise-1">Exercise 1</h3>
<p>Write a for-loop to determine the median of each column, if it is numeric. If not, return the column class with <code>class()</code>. Save the results in a character vector, so every element should be converted to character before saving it in the vector.</p>
<div class="callout callout-style-default callout-caution callout-titled">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-1-contents" aria-controls="callout-1" aria-expanded="false" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Caution
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-1" class="callout-1-contents callout-collapse collapse">
<div class="callout-body-container callout-body">
<div class="cell">
<div class="sourceCode cell-code" id="cb27" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb27-1">vec_median <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>()</span>
<span id="cb27-2"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span>(i <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ncol</span>(iris)){</span>
<span id="cb27-3">  <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">is.numeric</span>(iris[, i])){</span>
<span id="cb27-4">    vec_median[i] <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">as.character</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">median</span>(iris[, i], <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">na.rm =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>))</span>
<span id="cb27-5">  } <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">else</span>{</span>
<span id="cb27-6">    vec_median[i] <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">class</span>(iris[, i])</span>
<span id="cb27-7">  }</span>
<span id="cb27-8">}</span>
<span id="cb27-9"></span>
<span id="cb27-10">vec_median</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "5.8"    "3"      "4.35"   "1.3"    "factor"</code></pre>
</div>
</div>
</div>
</div>
</div>
</section>
<section id="exercise-2" class="level2">
<h2 class="anchored" data-anchor-id="exercise-2">Exercise 2</h2>
<ol type="1">
<li>Define the body of the for loop as its own <a href="https://nickhaf.github.io/r_tutorial/qmd/functions/functions.html">function</a>. This function should take a vector, and, if this vector is numeric, output the median as a character, otherwise the class of the vector.</li>
</ol>
<div class="callout callout-style-default callout-caution callout-titled">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-2-contents" aria-controls="callout-2" aria-expanded="false" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Caution
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-2" class="callout-2-contents callout-collapse collapse">
<div class="callout-body-container callout-body">
<div class="cell">
<div class="sourceCode cell-code" id="cb29" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb29-1">check_median <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(vec){</span>
<span id="cb29-2">  <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">is.numeric</span>(vec)){</span>
<span id="cb29-3">    result <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">median</span>(vec, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">na.rm =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>)</span>
<span id="cb29-4">  } <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">else</span>{</span>
<span id="cb29-5">    result <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">class</span>(vec)</span>
<span id="cb29-6">  }</span>
<span id="cb29-7">  <span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## Convert to character, so our function always returns the correct type</span></span>
<span id="cb29-8">  result <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">as.character</span>(result)</span>
<span id="cb29-9">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">return</span>(result)</span>
<span id="cb29-10">}</span>
<span id="cb29-11"></span>
<span id="cb29-12"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## Check it:</span></span>
<span id="cb29-13"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">check_median</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1000</span>))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "550"</code></pre>
</div>
<div class="sourceCode cell-code" id="cb31" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb31-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">check_median</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"a"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"b"</span>))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "character"</code></pre>
</div>
</div>
</div>
</div>
</div>
<ol start="2" type="1">
<li>Use it in the for-loop.</li>
</ol>
<div class="callout callout-style-default callout-caution callout-titled">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-3-contents" aria-controls="callout-3" aria-expanded="false" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Caution
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-3" class="callout-3-contents callout-collapse collapse">
<div class="callout-body-container callout-body">
<div class="cell">
<div class="sourceCode cell-code" id="cb33" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb33-1">vec_median <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>()</span>
<span id="cb33-2"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span>(i <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ncol</span>(iris)){</span>
<span id="cb33-3">  vec_median[i] <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">check_median</span>(iris[, i])</span>
<span id="cb33-4">}</span>
<span id="cb33-5"></span>
<span id="cb33-6">vec_median</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "5.8"    "3"      "4.35"   "1.3"    "factor"</code></pre>
</div>
</div>
</div>
</div>
</div>
</section>
<section id="exercise-3" class="level2">
<h2 class="anchored" data-anchor-id="exercise-3">Exercise 3</h2>
<p>Rewrite the for-loop from Exercise 1 with functions from the apply-family, so it returns the following objects. Define the function that gets applied on every input element externally, so we have cleaner code.</p>
<ol type="1">
<li>A vector.</li>
</ol>
<div class="callout callout-style-default callout-caution callout-titled">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-4-contents" aria-controls="callout-4" aria-expanded="false" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Caution
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-4" class="callout-4-contents callout-collapse collapse">
<div class="callout-body-container callout-body">
<div class="cell">
<div class="sourceCode cell-code" id="cb35" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb35-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sapply</span>(iris, check_median)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Sepal.Length  Sepal.Width Petal.Length  Petal.Width      Species 
       "5.8"          "3"       "4.35"        "1.3"     "factor" </code></pre>
</div>
</div>
<p>Or, even better:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb37" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb37-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">vapply</span>(iris, check_median, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">character</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Sepal.Length  Sepal.Width Petal.Length  Petal.Width      Species 
       "5.8"          "3"       "4.35"        "1.3"     "factor" </code></pre>
</div>
</div>
<p>Wow, that’s pretty nice, we condensed our function to half a line by defining the function somewhere else, and not using a for-loop!</p>
</div>
</div>
</div>
<ol start="2" type="1">
<li>A list.</li>
</ol>
<div class="callout callout-style-default callout-caution callout-titled">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-5-contents" aria-controls="callout-5" aria-expanded="false" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Caution
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-5" class="callout-5-contents callout-collapse collapse">
<div class="callout-body-container callout-body">
<div class="cell">
<div class="sourceCode cell-code" id="cb39" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb39-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">lapply</span>(iris, check_median)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>$Sepal.Length
[1] "5.8"

$Sepal.Width
[1] "3"

$Petal.Length
[1] "4.35"

$Petal.Width
[1] "1.3"

$Species
[1] "factor"</code></pre>
</div>
</div>
</div>
</div>
</div>
</section>
</div>
</div>


</section>
</section>


<div id="quarto-appendix" class="default"><section id="footnotes" class="footnotes footnotes-end-of-document"><h2 class="anchored quarto-appendix-heading">Footnotes</h2>

<ol>
<li id="fn1"><p>Image by <a href="https://unsplash.com/de/@kierinsightarchives">Kier in Sight Archives</a> on <a href="https://unsplash.com/de/fotos/black-and-white-heart-skizze-4bhhwmsYl-c">Unsplash</a>.↩︎</p></li>
</ol>
</section></div> ]]></description>
  <category>R</category>
  <category>R-SIG</category>
  <category>loops</category>
  <category>tutorial</category>
  <guid>https://iqb-research.github.io/IQB-Methods/docs/r_sig/23_07_31_apply/</guid>
  <pubDate>Mon, 31 Jul 2023 00:00:00 GMT</pubDate>
  <media:content url="https://iqb-research.github.io/IQB-Methods/docs/r_sig/23_07_31_apply/apply_family.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>for-loops</title>
  <dc:creator>Nicklas Hafiz</dc:creator>
  <link>https://iqb-research.github.io/IQB-Methods/docs/r_sig/23_03_20_forloops/</link>
  <description><![CDATA[ 




<p><img src="https://iqb-research.github.io/IQB-Methods/docs/r_sig/23_03_20_forloops/preview_image.jpg" class="img-fluid"><sup>1</sup></p>
<section id="for-loops" class="level2">
<h2 class="anchored" data-anchor-id="for-loops">For-loops</h2>
<p>In this session we talked about for-loops. Take a look <a href="https://nickhaf.github.io/r_tutorial/qmd/loops/loops.html">here</a> for the corresponding chapter in a workshop I’ve designed.</p>


</section>


<div id="quarto-appendix" class="default"><section id="footnotes" class="footnotes footnotes-end-of-document"><h2 class="anchored quarto-appendix-heading">Footnotes</h2>

<ol>
<li id="fn1"><p>Image by <a href="https://unsplash.com/de/@tine999?utm_source=unsplash&amp;utm_medium=referral&amp;utm_content=creditCopyText">Tine Ivanic</a> on <a href="https://unsplash.com/de/fotos/u2d0BPZFXOY?utm_source=unsplash&amp;utm_medium=referral&amp;utm_content=creditCopyText">Unsplash</a>.↩︎</p></li>
</ol>
</section></div> ]]></description>
  <category>R</category>
  <category>R-SIG</category>
  <category>loops</category>
  <category>intro</category>
  <category>tutorial</category>
  <guid>https://iqb-research.github.io/IQB-Methods/docs/r_sig/23_03_20_forloops/</guid>
  <pubDate>Mon, 20 Mar 2023 00:00:00 GMT</pubDate>
  <media:content url="https://iqb-research.github.io/IQB-Methods/docs/r_sig/23_03_20_forloops/preview_image.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Data Frames, Listen und Grafiken in R</title>
  <dc:creator>Karoline Sachse, Sebastian Weirich und Benjamin Becker</dc:creator>
  <link>https://iqb-research.github.io/IQB-Methods/docs/R_tutorials/R_ws2.html</link>
  <description><![CDATA[ 




<p><img src="https://iqb-research.github.io/IQB-Methods/docs/R_tutorials/images/einführung.jpg" class="img-fluid"><sup>1</sup></p>
<section id="datensätze-data.frames" class="level1">
<h1>1. Datensätze: data.frames</h1>
<p>Ein data.frame kann als eine spaltenweise Aneinanderreihung verschiedener Vektoren verstanden werden. Jeder einzelne Vektor kann dabei, wie gehabt, nur Elemente derselben Klasse enthalten; der data.frame selbst kann jedoch Vektoren unterschiedlicher Klasse enthalten. Im folgenden Beispiel wird ein <code>data.frame</code> aus zwei character- und drei numerischen Vektoren erzeugt:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1">ID <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">89045</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">43678</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">88475</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">69781</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">88766</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">67743</span>)</span>
<span id="cb1-2">name <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Onno"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Stefan"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Sylvain"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Annette"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Marina"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Eike"</span>)</span>
<span id="cb1-3">geschlecht <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"m"</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"m"</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"m"</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"w"</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"w"</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"m"</span>)</span>
<span id="cb1-4">treatment  <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb1-5">bdi.wert   <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">12.5</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">13</span>,<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">11.75</span>,<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">9.85</span>,<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">10.15</span>,<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">9.95</span>)</span>
<span id="cb1-6">daten      <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">data.frame</span>(ID, name, geschlecht, treatment, bdi.wert, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">stringsAsFactors=</span><span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">FALSE</span>)</span></code></pre></div>
</div>
<p>Um sich einen Überblick über den soeben angelegten data.frame zu verschaffen, sind folgende Befehle nützlich:</p>
<ol type="1">
<li>Die ersten Zeilen des Datensatzes werden ausgegeben:</li>
</ol>
<div class="cell">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb2-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">head</span>(daten)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>     ID    name geschlecht treatment bdi.wert
1 89045    Onno          m         0    12.50
2 43678  Stefan          m         1    13.00
3 88475 Sylvain          m         1    11.75
4 69781 Annette          w         1     9.85
5 88766  Marina          w         0    10.15
6 67743    Eike          m         1     9.95</code></pre>
</div>
</div>
<ol start="2" type="1">
<li>Die Struktur des Datensatzes wird ausgegeben:</li>
</ol>
<div class="cell">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb4-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">str</span>(daten)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>'data.frame':   6 obs. of  5 variables:
 $ ID        : num  89045 43678 88475 69781 88766 ...
 $ name      : chr  "Onno" "Stefan" "Sylvain" "Annette" ...
 $ geschlecht: chr  "m" "m" "m" "w" ...
 $ treatment : num  0 1 1 1 0 1
 $ bdi.wert  : num  12.5 13 11.75 9.85 10.15 ...</code></pre>
</div>
</div>
<ol start="3" type="1">
<li>Eine Zusammenfassung der Daten wird ausgegeben:</li>
</ol>
<div class="cell">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb6-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">summary</span>(daten)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>       ID            name            geschlecht          treatment     
 Min.   :43678   Length:6           Length:6           Min.   :0.0000  
 1st Qu.:68252   Class :character   Class :character   1st Qu.:0.2500  
 Median :79128   Mode  :character   Mode  :character   Median :1.0000  
 Mean   :74581                                         Mean   :0.6667  
 3rd Qu.:88693                                         3rd Qu.:1.0000  
 Max.   :89045                                         Max.   :1.0000  
    bdi.wert    
 Min.   : 9.85  
 1st Qu.:10.00  
 Median :10.95  
 Mean   :11.20  
 3rd Qu.:12.31  
 Max.   :13.00  </code></pre>
</div>
</div>
<ol start="4" type="1">
<li>Welche Eigenschaften hat ein Objekt “data.frame”?</li>
</ol>
<div class="cell">
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb8-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">class</span>(daten)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "data.frame"</code></pre>
</div>
<div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb10-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mode</span>(daten)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "list"</code></pre>
</div>
</div>
<p>Auf zwei Besonderheiten soll hier kurz eingegangen werden:</p>
<ul>
<li>Warum hat das Objekt <code>daten</code> zwar die Klasse <code>data.frame</code>, aber den Modus <code>list</code>? Der Grund ist, dass in R data.frames “Spezialfälle” von Listen sind, genauso wie man einen Skalar als “Spezialfall” eines Vektors verstehen kann. In R dürfen Listen beliebig viele Elemente beliebigen Typs enthalten. data.frames dürfen mehrere Vektoren <em>gleicher</em> Länge, aber unterschiedlichen Typs (bzw. unterschiedlicher Klasse) enthalten. Ein data.frame ist also eine “eingeschränkte” Liste.</li>
<li>Was bedeutet “stringsAsFactors”? Wird ein data.frame konstruiert, der sich (teilweise) aus character-Variablen zusammensetzt, werden diese in R standardmäßig wie Faktoren behandelt. Das ist dann sinnvoll, wenn diese character-Variablen (wie hier) im Grunde nur Gruppierungsvariablen sind (hier: male, female). In SPSS gibt es für Gruppierungsvariablen die Skalendefinition “nominal”. Typischerweise werden solche Variablen als unabhängige Variablen in Varianzanalysen eingesetzt. Unter “echten” character-Variablen könnte man sich etwa die Freitextantworten in Fragebögen vorstellen. “stringsAsFactors” besagt also: “Soll R diese Variablen wie Faktoren behandeln oder wie echte character-Variablen?”</li>
</ul>
<p>Die Variablen Treatment und Geschlecht könnten auch Faktoren werden (was in der Regel aber eigentlich nicht nötig ist):</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb12-1">daten<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>geschlecht <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">as.factor</span>(daten<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>geschlecht)</span>
<span id="cb12-2">daten<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>treatment <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">as.factor</span>(daten<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>treatment)</span>
<span id="cb12-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">str</span>(daten)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>'data.frame':   6 obs. of  5 variables:
 $ ID        : num  89045 43678 88475 69781 88766 ...
 $ name      : chr  "Onno" "Stefan" "Sylvain" "Annette" ...
 $ geschlecht: Factor w/ 2 levels "m","w": 1 1 1 2 2 1
 $ treatment : Factor w/ 2 levels "0","1": 1 2 2 2 1 2
 $ bdi.wert  : num  12.5 13 11.75 9.85 10.15 ...</code></pre>
</div>
</div>
<section id="zusammenführen-von-data.frames-merging" class="level2">
<h2 class="anchored" data-anchor-id="zusammenführen-von-data.frames-merging">1.1 Zusammenführen von data.frames (merging)</h2>
<p>Nehmen wir an, wir hätten nun einen weiteren data.frame, der die Nachnamen einiger Studienteilnehmer*innen enthält:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb14-1">daten2 <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">data.frame</span>(</span>
<span id="cb14-2">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">ID =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">43678</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">88475</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">88766</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">89045</span>),</span>
<span id="cb14-3">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">nachname =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Tegemann"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Laffont"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Brandner"</span>,</span>
<span id="cb14-4">                 <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Schreiner"</span>), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">stringsAsFactors =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">FALSE</span>)</span>
<span id="cb14-5">daten2</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>     ID  nachname
1 43678  Tegemann
2 88475   Laffont
3 88766  Brandner
4 89045 Schreiner</code></pre>
</div>
</div>
<p>…und möchten diesen nun mit unseren Daten zusammenführen, dann geht das sehr flexibel mit der Funktion <code>merge()</code>. <code>merge()</code> verknüpft die Datensätze automatisch über Spalten in den beiden Datensätzen, die gleich benannt sind, in unserem Beispiel die Spalte <code>ID</code>:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb16" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb16-1">dat <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">merge</span>(daten, daten2, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">all=</span><span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>)</span>
<span id="cb16-2">dat</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>     ID    name geschlecht treatment bdi.wert  nachname
1 43678  Stefan          m         1    13.00  Tegemann
2 67743    Eike          m         1     9.95      &lt;NA&gt;
3 69781 Annette          w         1     9.85      &lt;NA&gt;
4 88475 Sylvain          m         1    11.75   Laffont
5 88766  Marina          w         0    10.15  Brandner
6 89045    Onno          m         0    12.50 Schreiner</code></pre>
</div>
</div>
<p>Sind die Spalten mit den Schlüsselvariablen nicht gleich benannt kann man im <code>by.x</code>-Argument spezifizieren, wie die Variable im ersten Datensatz heißt und im <code>by.y</code>-Argument, wie sie im zweiten Datensatz heißt. Heißen mehrere Variablen in beiden Datensätzen gleich und man möchte nur eine dieser gleichnamigen Variablen zur Verknüpfung verwenden, spezifiziert man diese im <code>by</code>-Argument:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb18" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb18-1">dat <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">merge</span>(daten, daten2, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">by=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"ID"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">all=</span><span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>)</span>
<span id="cb18-2">dat</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>     ID    name geschlecht treatment bdi.wert  nachname
1 43678  Stefan          m         1    13.00  Tegemann
2 67743    Eike          m         1     9.95      &lt;NA&gt;
3 69781 Annette          w         1     9.85      &lt;NA&gt;
4 88475 Sylvain          m         1    11.75   Laffont
5 88766  Marina          w         0    10.15  Brandner
6 89045    Onno          m         0    12.50 Schreiner</code></pre>
</div>
</div>
<p>Wenn man zwei Datensätze untereinander schreiben möchte, müssen sie dieselbe Spaltenausdehnung haben:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb20" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb20-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rbind</span>(daten2, daten2)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>     ID  nachname
1 43678  Tegemann
2 88475   Laffont
3 88766  Brandner
4 89045 Schreiner
5 43678  Tegemann
6 88475   Laffont
7 88766  Brandner
8 89045 Schreiner</code></pre>
</div>
</div>
<p>…und wenn man zwei Datensätze nebeneinander schreiben möchte, müssen sie dieselbe Zeilenausdehnung haben:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb22" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb22-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">cbind</span>(daten2, daten2)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>     ID  nachname    ID  nachname
1 43678  Tegemann 43678  Tegemann
2 88475   Laffont 88475   Laffont
3 88766  Brandner 88766  Brandner
4 89045 Schreiner 89045 Schreiner</code></pre>
</div>
</div>
<p>Möchte man viele Datensätze derselben Ausdehnung nebeneinander oder untereinander in einen <code>data.frame</code>schreiben, kann man die Funktion <code>do.call()</code> benutzen, die analog zu hier im Beispiel mit <code>cbind()</code> auch mit <code>rbind()</code> funktioniert:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb24" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb24-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">do.call</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"cbind"</span>, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">list</span>(daten2, daten2, daten2, daten2))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>     ID  nachname    ID  nachname    ID  nachname    ID  nachname
1 43678  Tegemann 43678  Tegemann 43678  Tegemann 43678  Tegemann
2 88475   Laffont 88475   Laffont 88475   Laffont 88475   Laffont
3 88766  Brandner 88766  Brandner 88766  Brandner 88766  Brandner
4 89045 Schreiner 89045 Schreiner 89045 Schreiner 89045 Schreiner</code></pre>
</div>
</div>
<p>Zum weiteren Umgang mit dem Listenformat <code>list</code> siehe Kapitel 2, weiter unten.</p>
</section>
<section id="navigation-in-data.frames-subsetting" class="level2">
<h2 class="anchored" data-anchor-id="navigation-in-data.frames-subsetting">1.2 Navigation in data.frames (subsetting)</h2>
<p>Ähnlich wie in Vektoren kann man in data.frames über eckige Klammern einzelne Elemente anzeigen lassen oder verändern. Da data.frames zwei Dimensionen haben (Vektoren haben nur eine), muss man hier das Element mit [Zeile, Spalte] auswählen, also beispielsweise</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb26" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb26-1">dat[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>]</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "Sylvain"</code></pre>
</div>
</div>
<p>Alternativ kann man mit dem Dollar-Zeichen eine Variable ansteuern:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb28" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb28-1">dat[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>,]<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>name</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "Sylvain"</code></pre>
</div>
</div>
<p>Oder man kann den Variablennamen (mit hochgestellten Anführungszeichen) verwenden:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb30" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb30-1">dat[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"name"</span>]</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "Sylvain"</code></pre>
</div>
</div>
<p>Die komplette “name”-Spalte gibt man aus, indem man die Zeilenbezeichnung weglässt oder alle Zeilen explizit auswählt:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb32" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb32-1">dat<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>name</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "Stefan"  "Eike"    "Annette" "Sylvain" "Marina"  "Onno"   </code></pre>
</div>
<div class="sourceCode cell-code" id="cb34" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb34-1">dat[,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"name"</span>]</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "Stefan"  "Eike"    "Annette" "Sylvain" "Marina"  "Onno"   </code></pre>
</div>
<div class="sourceCode cell-code" id="cb36" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb36-1">dat[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"name"</span>]</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "Stefan"  "Eike"    "Annette" "Sylvain" "Marina"  "Onno"   </code></pre>
</div>
</div>
<p>Auch die Reihenfolge zu variieren, ist möglich:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb38" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb38-1">dat[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"name"</span>]</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "Onno"    "Marina"  "Sylvain" "Annette" "Eike"    "Stefan" </code></pre>
</div>
</div>
<p>Um sich nur ausgewählte Spalten in selbst definierter Reihenfolge des Datensatzes anzusehen bzw. in einem neuen Objekt zu speichern:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb40" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb40-1">dat2 <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> dat[,<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"name"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"nachname"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"bdi.wert"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"treatment"</span>)]</span>
<span id="cb40-2">dat2</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>     name  nachname bdi.wert treatment
1  Stefan  Tegemann    13.00         1
2    Eike      &lt;NA&gt;     9.95         1
3 Annette      &lt;NA&gt;     9.85         1
4 Sylvain   Laffont    11.75         1
5  Marina  Brandner    10.15         0
6    Onno Schreiner    12.50         0</code></pre>
</div>
</div>
<p>Wenn man sich nur bestimmte Subgruppen anschauen möchte:</p>
<ol type="1">
<li>Alle Mitglieder der Kontrollgruppe:</li>
</ol>
<div class="cell">
<div class="sourceCode cell-code" id="cb42" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb42-1">dat2[dat2<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>treatment <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>,]</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>    name  nachname bdi.wert treatment
5 Marina  Brandner    10.15         0
6   Onno Schreiner    12.50         0</code></pre>
</div>
</div>
<ol start="2" type="1">
<li>Alle mit einem BDI-Wert größer als 10:</li>
</ol>
<div class="cell">
<div class="sourceCode cell-code" id="cb44" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb44-1">dat2[dat2<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>bdi.wert <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>,]</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>     name  nachname bdi.wert treatment
1  Stefan  Tegemann    13.00         1
4 Sylvain   Laffont    11.75         1
5  Marina  Brandner    10.15         0
6    Onno Schreiner    12.50         0</code></pre>
</div>
</div>
<ol start="3" type="1">
<li>Alle in der Treatment-Gruppe und einem BDI-Wert größer als 10:</li>
</ol>
<div class="cell">
<div class="sourceCode cell-code" id="cb46" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb46-1">dat2[dat2<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>treatment <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;</span> dat2<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>bdi.wert <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>,]</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>     name nachname bdi.wert treatment
1  Stefan Tegemann    13.00         1
4 Sylvain  Laffont    11.75         1</code></pre>
</div>
</div>
<ol start="4" type="1">
<li>Alle in der Treatment-Gruppe oder einem BDI-Wert größer als 10:</li>
</ol>
<div class="cell">
<div class="sourceCode cell-code" id="cb48" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb48-1">dat2[dat2<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>treatment <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|</span> dat2<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>bdi.wert <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>,]</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>     name  nachname bdi.wert treatment
1  Stefan  Tegemann    13.00         1
2    Eike      &lt;NA&gt;     9.95         1
3 Annette      &lt;NA&gt;     9.85         1
4 Sylvain   Laffont    11.75         1
5  Marina  Brandner    10.15         0
6    Onno Schreiner    12.50         0</code></pre>
</div>
</div>
<ol start="5" type="1">
<li>Alle, deren Vorname mit “S” beginnt:</li>
</ol>
<div class="cell">
<div class="sourceCode cell-code" id="cb50" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb50-1">dat2[<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">grep</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"^S"</span>, dat2<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>name),]</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>     name nachname bdi.wert treatment
1  Stefan Tegemann    13.00         1
4 Sylvain  Laffont    11.75         1</code></pre>
</div>
</div>
<ol start="6" type="1">
<li>Alle, für die kein Nachname hinterlegt ist:</li>
</ol>
<div class="cell">
<div class="sourceCode cell-code" id="cb52" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb52-1">dat2[<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">is.na</span>(dat2<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>nachname),]</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>     name nachname bdi.wert treatment
2    Eike     &lt;NA&gt;     9.95         1
3 Annette     &lt;NA&gt;     9.85         1</code></pre>
</div>
</div>
<ol start="7" type="1">
<li>Der Datensatz ohne Personen, für die kein Nachname hinterlegt ist:</li>
</ol>
<div class="cell">
<div class="sourceCode cell-code" id="cb54" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb54-1">dat2[<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">is.na</span>(dat2<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>nachname),]</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>     name  nachname bdi.wert treatment
1  Stefan  Tegemann    13.00         1
4 Sylvain   Laffont    11.75         1
5  Marina  Brandner    10.15         0
6    Onno Schreiner    12.50         0</code></pre>
</div>
</div>
<p>oder</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb56" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb56-1">dat2[<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">which</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">is.na</span>(dat2<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>nachname)),]</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>     name  nachname bdi.wert treatment
1  Stefan  Tegemann    13.00         1
4 Sylvain   Laffont    11.75         1
5  Marina  Brandner    10.15         0
6    Onno Schreiner    12.50         0</code></pre>
</div>
</div>
</section>
<section id="rekodieren-von-variablen-in-data.frames" class="level2">
<h2 class="anchored" data-anchor-id="rekodieren-von-variablen-in-data.frames">1.3 Rekodieren von Variablen in data.frames</h2>
<p>Wenn man bestimmte Werte im data.frame ersetzen möchte oder Variablen in andere Variablen umkodieren möchte, hat man verschiedene Möglichkeiten.</p>
<ol type="1">
<li>Alle Werte im Datensatz ersetzen:<br>
</li>
</ol>
<!-- -->
<ol type="a">
<li>z.B. alle fehlenden Werte durch einen bestimmten Missingcode ersetzen:</li>
</ol>
<div class="cell">
<div class="sourceCode cell-code" id="cb58" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb58-1">dat2[<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">is.na</span>(dat2)] <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"-97"</span></span>
<span id="cb58-2">dat2</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>     name  nachname bdi.wert treatment
1  Stefan  Tegemann    13.00         1
2    Eike       -97     9.95         1
3 Annette       -97     9.85         1
4 Sylvain   Laffont    11.75         1
5  Marina  Brandner    10.15         0
6    Onno Schreiner    12.50         0</code></pre>
</div>
</div>
<ol start="2" type="a">
<li>oder einen bestimmen Wert durch andere Werte oder Missings ersetzen:</li>
</ol>
<div class="cell">
<div class="sourceCode cell-code" id="cb60" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb60-1">dat2[dat2<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"-97"</span>] <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NA</span></span>
<span id="cb60-2">dat2</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>     name  nachname bdi.wert treatment
1  Stefan  Tegemann    13.00         1
2    Eike      &lt;NA&gt;     9.95         1
3 Annette      &lt;NA&gt;     9.85         1
4 Sylvain   Laffont    11.75         1
5  Marina  Brandner    10.15         0
6    Onno Schreiner    12.50         0</code></pre>
</div>
</div>
<ol start="2" type="1">
<li>Neue Variablen in Abhängigkeit von anderen Variablen bilden</li>
</ol>
<p>Mit der Funktion <code>ifelse</code> formuliert man zunächst eine Bedingung (hier alle, die einen BDI kleiner als 10 haben und gleichzeitig in der Treatment-Gruppe sind), danach gibt man durch ein Komma abgetrennt an, welche Werte in der neuen Variable stehen sollen (hier <code>"Treatment war wirksam"</code>). Durch ein weiteres Komma abgetrennt kann dann angegeben werden, was passieren soll, wenn die Bedingung nicht zutrifft. Dabei kann dort sogar ein weiteres <code>ifelse</code>-Statement eingefügt werden, wie hier im Beispiel, das nach genau denselben Regeln aufgebaut ist.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb62" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb62-1">dat2<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>neueVar <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ifelse</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">test=</span>dat2<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>bdi.wert <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;</span> dat2<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>treatment<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,</span>
<span id="cb62-2">                       <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">yes=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Treatment war wirksam"</span>,  </span>
<span id="cb62-3">                       <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">no =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ifelse</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">test=</span>dat2<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>bdi.wert <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;</span> dat2<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>treatment<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,   </span>
<span id="cb62-4">                                   <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">yes=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Treatment nicht wirksam"</span>,</span>
<span id="cb62-5">                                   <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">no=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"kein Treatment"</span>))</span>
<span id="cb62-6">dat2</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>     name  nachname bdi.wert treatment                 neueVar
1  Stefan  Tegemann    13.00         1 Treatment nicht wirksam
2    Eike      &lt;NA&gt;     9.95         1   Treatment war wirksam
3 Annette      &lt;NA&gt;     9.85         1   Treatment war wirksam
4 Sylvain   Laffont    11.75         1 Treatment nicht wirksam
5  Marina  Brandner    10.15         0          kein Treatment
6    Onno Schreiner    12.50         0          kein Treatment</code></pre>
</div>
</div>
<p>Auch kann die Funktion <code>recode</code> aus dem Paket <code>car</code> verwendet werden. Hier werden die Werte oder Wertebereiche einer Variablen umkodiert. Der Wertebereich des niedrigsten aufgetretenen Wertes bis zum Wert 10 entspricht dem hier benutzten Statement <code>lo:10</code>. Wie man mit allen nicht explizit erwähnten Werten verfahren möchte, kann mit dem <code>else</code>-Argument festlegen.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb64" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb64-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(car)</span></code></pre></div>
</div>
<div class="cell">
<div class="sourceCode cell-code" id="cb65" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb65-1">dat2<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>neueVar <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> car<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">recode</span>(dat2<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>bdi.wert, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"lo:10='leichte Depression'; else='schwere Depression'"</span>)</span>
<span id="cb65-2">dat2</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>     name  nachname bdi.wert treatment            neueVar
1  Stefan  Tegemann    13.00         1 schwere Depression
2    Eike      &lt;NA&gt;     9.95         1 leichte Depression
3 Annette      &lt;NA&gt;     9.85         1 leichte Depression
4 Sylvain   Laffont    11.75         1 schwere Depression
5  Marina  Brandner    10.15         0 schwere Depression
6    Onno Schreiner    12.50         0 schwere Depression</code></pre>
</div>
</div>
</section>
<section id="umstrukturieren-von-data.frames" class="level2">
<h2 class="anchored" data-anchor-id="umstrukturieren-von-data.frames">1.4 Umstrukturieren von data.frames</h2>
<p>Unser Datensatz befindet sich im sogenannten Wide-Format. Für manche Anwendungen kann es sinnvoll sein, den Datensatz in das sogenannte Long-Format zu bringen, in dem alle Werte der Personen in einer einzigen Variablen untereinander stehen. Früher benutzte man das Paket <code>reshape2</code>, um einen Datensatz ins Long-Format zu bringen, was auch jetzt noch immer unkompliziert möglich ist:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb67" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb67-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(reshape2)</span></code></pre></div>
</div>
<div class="cell">
<div class="sourceCode cell-code" id="cb68" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb68-1">datl <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> reshape2<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">melt</span>(dat, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">id.vars=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"ID"</span>)</span>
<span id="cb68-2">datl</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>      ID   variable     value
1  43678       name    Stefan
2  67743       name      Eike
3  69781       name   Annette
4  88475       name   Sylvain
5  88766       name    Marina
6  89045       name      Onno
7  43678 geschlecht         m
8  67743 geschlecht         m
9  69781 geschlecht         w
10 88475 geschlecht         m
11 88766 geschlecht         w
12 89045 geschlecht         m
13 43678  treatment         1
14 67743  treatment         1
15 69781  treatment         1
16 88475  treatment         1
17 88766  treatment         0
18 89045  treatment         0
19 43678   bdi.wert        13
20 67743   bdi.wert      9.95
21 69781   bdi.wert      9.85
22 88475   bdi.wert     11.75
23 88766   bdi.wert     10.15
24 89045   bdi.wert      12.5
25 43678   nachname  Tegemann
26 67743   nachname      &lt;NA&gt;
27 69781   nachname      &lt;NA&gt;
28 88475   nachname   Laffont
29 88766   nachname  Brandner
30 89045   nachname Schreiner</code></pre>
</div>
</div>
<p>und mit <code>dcast()</code> formte man den Datensatz wieder zurück:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb70" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb70-1">reshape2<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">dcast</span>(datl, ID <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span> variable)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>     ID    name geschlecht treatment bdi.wert  nachname
1 43678  Stefan          m         1       13  Tegemann
2 67743    Eike          m         1     9.95      &lt;NA&gt;
3 69781 Annette          w         1     9.85      &lt;NA&gt;
4 88475 Sylvain          m         1    11.75   Laffont
5 88766  Marina          w         0    10.15  Brandner
6 89045    Onno          m         0     12.5 Schreiner</code></pre>
</div>
</div>
<p>In jüngerer Zeit wurden dazu recht effiziente Funktionen entwickelt, die im Paket <code>tidyr</code> zu finden sind. Hier wird nur rudimentär in die Benutzung dieser Funktionen eingeführt – der/die interessierte Leser/in mag sich in folgende Seite vertiefen: http://tidyr.tidyverse.org/articles/pivot.html Hierbei ist zu beachten, dass bei Benutzung des Pakets <code>tidyr</code> die <code>data.frames</code> zu anderen Objekten werden, nämlich <code>tibbles</code> (die aber problemlos mit der Funktion <code>as.data.frame()</code> wieder in <code>data.frames</code> zurücktransformiert werden können. Darüber hinaus weicht die zu verwendende Syntax hier deutlich von der bisher gezeigten basalen R-Syntax ab. Eine besondere Rolle spielt hier der sogenannte Pipe-Operator <code>%&gt;%</code>, über den hier http://www.rdocumentation.org/packages/magrittr/versions/1.0.1/topics/%25%3E%25 oder an anderer Stelle weitergelesen werden kann.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb72" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb72-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(tidyr)</span></code></pre></div>
</div>
<p>Umstrukturierung unserer Daten ins Long-Format:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb73" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb73-1">dat <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">pivot_longer</span>(</span>
<span id="cb73-2">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">cols=</span>name<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span>nachname,</span>
<span id="cb73-3">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">names_to =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"variable"</span>,</span>
<span id="cb73-4">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">values_to =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"value"</span></span>
<span id="cb73-5">)</span></code></pre></div>
</div>
<p>oder, äquivalent dazu, mit:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb74" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb74-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">pivot_longer</span>(dat, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">cols=</span>name<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span>nachname, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">names_to =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"variable"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">values_to =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"value"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 30 × 3
      ID variable   value   
   &lt;dbl&gt; &lt;chr&gt;      &lt;chr&gt;   
 1 43678 name       Stefan  
 2 43678 geschlecht m       
 3 43678 treatment  1       
 4 43678 bdi.wert   13      
 5 43678 nachname   Tegemann
 6 67743 name       Eike    
 7 67743 geschlecht m       
 8 67743 treatment  1       
 9 67743 bdi.wert   9.95    
10 67743 nachname   &lt;NA&gt;    
# ℹ 20 more rows</code></pre>
</div>
</div>
<p>und mit <code>pivot_wider()</code> kann man den Datensatz wieder zurück formen:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb76" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb76-1">datl  <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">pivot_wider</span>(</span>
<span id="cb76-2">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">names_from =</span> variable, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">values_from =</span> value</span>
<span id="cb76-3">)</span></code></pre></div>
</div>
<p>oder genauso:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb77" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb77-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">pivot_wider</span>(datl, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">names_from =</span> variable, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">values_from =</span> value)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 6 × 6
     ID name    geschlecht treatment bdi.wert nachname 
  &lt;dbl&gt; &lt;chr&gt;   &lt;chr&gt;      &lt;chr&gt;     &lt;chr&gt;    &lt;chr&gt;    
1 43678 Stefan  m          1         13       Tegemann 
2 67743 Eike    m          1         9.95     &lt;NA&gt;     
3 69781 Annette w          1         9.85     &lt;NA&gt;     
4 88475 Sylvain m          1         11.75    Laffont  
5 88766 Marina  w          0         10.15    Brandner 
6 89045 Onno    m          0         12.5     Schreiner</code></pre>
</div>
</div>
</section>
</section>
<section id="listen" class="level1">
<h1>2. Listen</h1>
<p>Wie oben schon erwähnt wurde, sind data.frames Spezialfälle von Listen, die Vektoren gleicher Länge enthalten. Listen, die keine data.frames sind, dürfen Elemente unterschiedlichen Typs und unterschiedlicher Länge enthalten. Die Elemente einer Liste dürfen sogar wieder Listen sein, aber auch data.frames, Vektoren, Skalare oder andere beliebige R-Objekte.</p>
<p>Zum Beispiel könnte man eine Liste mit den oben erzeugten Teildatensätzen und einzelnen Komponenten dieser erstellen:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb79" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb79-1">L1 <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">list</span>(daten<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>bdi.wert, daten2<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>nachname, dat2)</span>
<span id="cb79-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">str</span>(L1)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>List of 3
 $ : num [1:6] 12.5 13 11.75 9.85 10.15 ...
 $ : chr [1:4] "Tegemann" "Laffont" "Brandner" "Schreiner"
 $ :'data.frame':   6 obs. of  5 variables:
  ..$ name     : chr [1:6] "Stefan" "Eike" "Annette" "Sylvain" ...
  ..$ nachname : chr [1:6] "Tegemann" NA NA "Laffont" ...
  ..$ bdi.wert : num [1:6] 13 9.95 9.85 11.75 10.15 ...
  ..$ treatment: Factor w/ 2 levels "0","1": 2 2 2 2 1 1
  ..$ neueVar  : chr [1:6] "schwere Depression" "leichte Depression" "leichte Depression" "schwere Depression" ...</code></pre>
</div>
</div>
<p>…und die Elemente dieser Liste benennen:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb81" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb81-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">names</span>(L1) <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Werte"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Nachnamen"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Gesamt"</span>)</span>
<span id="cb81-2">L1</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>$Werte
[1] 12.50 13.00 11.75  9.85 10.15  9.95

$Nachnamen
[1] "Tegemann"  "Laffont"   "Brandner"  "Schreiner"

$Gesamt
     name  nachname bdi.wert treatment            neueVar
1  Stefan  Tegemann    13.00         1 schwere Depression
2    Eike      &lt;NA&gt;     9.95         1 leichte Depression
3 Annette      &lt;NA&gt;     9.85         1 leichte Depression
4 Sylvain   Laffont    11.75         1 schwere Depression
5  Marina  Brandner    10.15         0 schwere Depression
6    Onno Schreiner    12.50         0 schwere Depression</code></pre>
</div>
</div>
<section id="subsetting-in-listen" class="level2">
<h2 class="anchored" data-anchor-id="subsetting-in-listen">2.1 Subsetting in Listen</h2>
<p>Auch bei Listen gibt es wieder zwei Möglichkeiten, wie man auf die Elemente zugreifen kann:</p>
<ol type="1">
<li>Über den Index, z.B. wenn man im dritten Listenelement weitere Unterelemente ansteuern möchte, wie hier die zweite Spalte und die fünfte Zeile:</li>
</ol>
<div class="cell">
<div class="sourceCode cell-code" id="cb83" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb83-1">L1[[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>]][<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>]</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "Brandner"</code></pre>
</div>
</div>
<ol start="2" type="1">
<li>Über den Namen in Anführungszeichen oder mit vorangestelltem Dollar-Zeichen:</li>
</ol>
<div class="cell">
<div class="sourceCode cell-code" id="cb85" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb85-1">L1[[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Gesamt"</span>]][<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>]</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "Brandner"</code></pre>
</div>
<div class="sourceCode cell-code" id="cb87" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb87-1">L1[[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Gesamt"</span>]][<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"nachname"</span>]</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "Brandner"</code></pre>
</div>
<div class="sourceCode cell-code" id="cb89" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb89-1">L1<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>Gesamt<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>nachname[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>]</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "Brandner"</code></pre>
</div>
</div>
<p>Eine Teilliste der Liste kann aufgerufen werden, indem die einzelnen Komponenten indiziert werden:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb91" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb91-1">L1[<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)]</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>$Werte
[1] 12.50 13.00 11.75  9.85 10.15  9.95

$Nachnamen
[1] "Tegemann"  "Laffont"   "Brandner"  "Schreiner"</code></pre>
</div>
</div>
</section>
<section id="merging-von-listen" class="level2">
<h2 class="anchored" data-anchor-id="merging-von-listen">2.2 Merging von Listen</h2>
<p>Listen können kombiniert werden, indem sie mit <code>c()</code> verbunden werden:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb93" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb93-1">L2 <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(L1[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>], L1[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>])</span>
<span id="cb93-2">L2</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>$Nachnamen
[1] "Tegemann"  "Laffont"   "Brandner"  "Schreiner"

$Werte
[1] 12.50 13.00 11.75  9.85 10.15  9.95</code></pre>
</div>
</div>
<p>Weitere Komponenten können über Neuindizierung oder Namen hinzugefügt werden:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb95" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb95-1">L2[[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>]] <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span></span>
<span id="cb95-2">L2<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>nochwas <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">FALSE</span></span>
<span id="cb95-3">L2[[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"undnochwas"</span>]] <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">data.frame</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">wahr=</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">FALSE</span>,<span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>,<span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>),<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">falsch=</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>,<span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>,<span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">FALSE</span>))</span>
<span id="cb95-4">L2</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>$Nachnamen
[1] "Tegemann"  "Laffont"   "Brandner"  "Schreiner"

$Werte
[1] 12.50 13.00 11.75  9.85 10.15  9.95

[[3]]
[1] TRUE

$nochwas
[1] FALSE

$undnochwas
   wahr falsch
1 FALSE   TRUE
2  TRUE   TRUE
3  TRUE  FALSE</code></pre>
</div>
</div>
<p>Sollen Komponenten entfernt werden, kann man wieder den Minus-Operator benutzen:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb97" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb97-1">L2 <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> L2[<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>)]</span>
<span id="cb97-2">L2</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>$Nachnamen
[1] "Tegemann"  "Laffont"   "Brandner"  "Schreiner"

$Werte
[1] 12.50 13.00 11.75  9.85 10.15  9.95

$undnochwas
   wahr falsch
1 FALSE   TRUE
2  TRUE   TRUE
3  TRUE  FALSE</code></pre>
</div>
</div>
</section>
<section id="aufheben-der-listenstruktur" class="level2">
<h2 class="anchored" data-anchor-id="aufheben-der-listenstruktur">2.3 Aufheben der Listenstruktur</h2>
<p>Möchte man keine Liste mehr haben, hilft die Funktion <code>unlist()</code> weiter, die alle Elemente der Liste nacheinander in einen benannten Vektor schreibt, dessen Namen man aber auch entfernen kann:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb99" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb99-1">(L3 <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">unlist</span>(L2))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>        Nachnamen1         Nachnamen2         Nachnamen3         Nachnamen4 
        "Tegemann"          "Laffont"         "Brandner"        "Schreiner" 
            Werte1             Werte2             Werte3             Werte4 
            "12.5"               "13"            "11.75"             "9.85" 
            Werte5             Werte6   undnochwas.wahr1   undnochwas.wahr2 
           "10.15"             "9.95"            "FALSE"             "TRUE" 
  undnochwas.wahr3 undnochwas.falsch1 undnochwas.falsch2 undnochwas.falsch3 
            "TRUE"             "TRUE"             "TRUE"            "FALSE" </code></pre>
</div>
<div class="sourceCode cell-code" id="cb101" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb101-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">unname</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">unlist</span>(L2))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code> [1] "Tegemann"  "Laffont"   "Brandner"  "Schreiner" "12.5"      "13"       
 [7] "11.75"     "9.85"      "10.15"     "9.95"      "FALSE"     "TRUE"     
[13] "TRUE"      "TRUE"      "TRUE"      "FALSE"    </code></pre>
</div>
</div>
</section>
</section>
<section id="grafiken" class="level1">
<h1>3. Grafiken</h1>
<p>Manchmal möchte man seine Daten visualisieren. Dafür gibt es auch in der Basis-Variante von R ohne zusätzliche Paketinstallation sehr praktische Funktionen.</p>
<section id="balkendiagramme" class="level2">
<h2 class="anchored" data-anchor-id="balkendiagramme">1.1 Balkendiagramme</h2>
<p>Z.B. Verteilung des BDI-Werts:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb103" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb103-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">barplot</span>(bdi.wert <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span> name, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">data=</span>dat2)</span></code></pre></div>
<div class="cell-output-display">
<div>
<figure class="figure">
<p><img src="https://iqb-research.github.io/IQB-Methods/docs/R_tutorials/R_ws2_files/figure-html/25a-1.png" class="img-fluid figure-img" width="672"></p>
</figure>
</div>
</div>
</div>
<p>Für einfache Häufigkeitsverteilungen:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb104" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb104-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">hist</span>(dat2<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>bdi.wert)</span></code></pre></div>
<div class="cell-output-display">
<div>
<figure class="figure">
<p><img src="https://iqb-research.github.io/IQB-Methods/docs/R_tutorials/R_ws2_files/figure-html/25-1.png" class="img-fluid figure-img" width="672"></p>
</figure>
</div>
</div>
</div>
<p>Boxplots:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb105" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb105-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">boxplot</span>(bdi.wert <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span> treatment, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">data=</span>dat2)</span></code></pre></div>
<div class="cell-output-display">
<div>
<figure class="figure">
<p><img src="https://iqb-research.github.io/IQB-Methods/docs/R_tutorials/R_ws2_files/figure-html/27-1.png" class="img-fluid figure-img" width="672"></p>
</figure>
</div>
</div>
</div>
</section>
<section id="die-plot-funktion-und-mehrere-grafiken-neben--oder-untereinander" class="level2">
<h2 class="anchored" data-anchor-id="die-plot-funktion-und-mehrere-grafiken-neben--oder-untereinander">1.2 Die <code>plot()</code>-Funktion und mehrere Grafiken neben- oder untereinander</h2>
<p>Möchte man in einem Fenster mehrere Grafiken unter- oder nebeneinander darstellen, kann man sich des Parameters <code>mfrow</code> der <code>par()</code>-Funktion bedienen. Die erste Zahl gibt an, in wie vielen Grafiken die Zeilen untereinander dargestellt werden sollen und die zweite Zahl, in wie vielen Spalten nebeneinander. Sollen die Daten zunächst geplottet werden und daneben deren Verteilung (im Beispiel nur bedingt sinnvoll), sieht das so aus:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb106" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb106-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">par</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">mfrow=</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>))</span>
<span id="cb106-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">plot</span>(dat2<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>bdi.wert)</span>
<span id="cb106-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">plot</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">density</span>(dat2<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>bdi.wert),<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">main=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Eine Verteilung"</span>)</span></code></pre></div>
<div class="cell-output-display">
<div>
<figure class="figure">
<p><img src="https://iqb-research.github.io/IQB-Methods/docs/R_tutorials/R_ws2_files/figure-html/28-1.png" class="img-fluid figure-img" width="672"></p>
</figure>
</div>
</div>
</div>
</section>
<section id="das-paket-ggplot2" class="level2">
<h2 class="anchored" data-anchor-id="das-paket-ggplot2">1.3 Das Paket <code>ggplot2</code></h2>
<p>Ein mächtiges Paket zur Erstellung von Grafiken ist <code>ggplot2</code>, zu dem z.B. unter diesem Link eine gute Einführung gegeben wird: http://methodenlehre.github.io/einfuehrung-in-R/grafiken-mit-ggplot2.html</p>


</section>
</section>


<div id="quarto-appendix" class="default"><section id="footnotes" class="footnotes footnotes-end-of-document"><h2 class="anchored quarto-appendix-heading">Footnotes</h2>

<ol>
<li id="fn1"><p>Image by <a href="https://unsplash.com/de/@vantaymedia?utm_content=creditCopyText&amp;utm_medium=referral&amp;utm_source=unsplash">Van Tay Media</a> on <a href="https://unsplash.com/de/fotos/frauen-die-laptops-benutzen-9buwiennNqg">Unsplash</a>.↩︎</p></li>
</ol>
</section></div> ]]></description>
  <category>R</category>
  <category>tutorial</category>
  <guid>https://iqb-research.github.io/IQB-Methods/docs/R_tutorials/R_ws2.html</guid>
  <pubDate>Wed, 12 Mar 2025 14:32:34 GMT</pubDate>
  <media:content url="https://iqb-research.github.io/IQB-Methods/docs/R_tutorials/images/einführung.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title></title>
  <dc:creator>Nicklas Hafiz</dc:creator>
  <link>https://iqb-research.github.io/IQB-Methods/docs/git/github_workshop/github_intro_slides.html</link>
  <description><![CDATA[ undefined ]]></description>
  <category>github</category>
  <category>tutorial</category>
  <category>slides</category>
  <category>intro</category>
  <guid>https://iqb-research.github.io/IQB-Methods/docs/git/github_workshop/github_intro_slides.html</guid>
  <pubDate>Wed, 12 Mar 2025 14:32:34 GMT</pubDate>
  <media:content url="https://iqb-research.github.io/IQB-Methods/docs/git/github_workshop/images/github.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Pakete(-Installation), Workspace, Daten laden und speichern in R</title>
  <dc:creator>Benjamin Becker, Karoline Sachse und Sebastian Weirich</dc:creator>
  <link>https://iqb-research.github.io/IQB-Methods/docs/R_tutorials/R_ws3.html</link>
  <description><![CDATA[ 




<p><img src="https://iqb-research.github.io/IQB-Methods/docs/R_tutorials/images/einführung.jpg" class="img-fluid"><sup>1</sup></p>
<section id="pakete-installieren-und-laden" class="level1">
<h1>1. Pakete installieren und laden</h1>
<p>Die Funktionalität von <code>base R</code> wird um ein vielfaches durch ein sehr umfangreiches Pakete-Universum ergänzt. Diese Erweiterungen werden für <code>R</code> <code>packages</code> oder <code>libraries</code> genannt. Im Prinzip kann jeder(r) eine solche <code>library</code> schreiben, deswegen ist bei der Nutzung neuer <code>libraries</code> etwas Vorsicht geboten. Es gibt jedoch eine Reihe sehr weit verbreiteter und hochwertiger <code>libraries</code>, deren Nutzung uneingeschränkt empfohlen werden kann.</p>
<p>Liegen Pakete auf <code>CRAN</code>, können sie mithilfe von <code>install.packages()</code> installiert werden. Pakete, die ausschließlich auf Github verfügbar sind, können über <code>devtools::install_github()</code> installiert werden. Für nähere Informationen siehe auch: http://iqbstaff.pbworks.com/w/page/138429033/R-Pakete%20Installieren</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Paket von CRAN installieren</span></span>
<span id="cb1-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">install.packages</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"car"</span>)</span>
<span id="cb1-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Paket von Github installieren</span></span>
<span id="cb1-4">remotes<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">install_github</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"sachseka/eatPrep"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">upgrade =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"never"</span>)</span></code></pre></div>
</div>
<p>Achtung: Wenn ein Paket bereits geladen ist und eine Neuinstallation dieses Pakets versucht wird, kann dies zu Fehlern führen. In diesem Fall kann entweder die <code>R</code> Session neu gestartet oder das entsprechende Paket mit <code>detach()</code> “entladen” werden.</p>
<p>Zur Verwendung von Paketen können einzelne Funktionen explizit über ihren Namespace angesprochen werden, ohne dass sie dafür explizit geladen werden müssen:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb2-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Funktion verwenden, ohne Paket zu laden</span></span>
<span id="cb2-2">some_data <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>)</span>
<span id="cb2-3">car<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">recode</span>(some_data, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"1 = 'a'; 2 = 'b'; 4 = 'd'"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "a" "b" "a" "d"</code></pre>
</div>
</div>
<p>Oder das Paket wird vollständig geladen mithilfe des <code>library()</code> Befehls</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb4-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Paket laden</span></span>
<span id="cb4-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"car"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stderr">
<pre><code>Loading required package: carData</code></pre>
</div>
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb6-1">some_data <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>)</span>
<span id="cb6-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">recode</span>(some_data, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"1 = 'a'; 2 = 'b'; 4 = 'd'"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "a" "b" "a" "d"</code></pre>
</div>
</div>
<p>Falls es mehrere Pakete gibt, die Funktionen mit demselben Namen beinhalten (zB <code>dplyr::recode()</code>), kann mit <code>car::recode()</code> sichergestellt werden, dass immer die gewünschte Funktion verwendet wird, auch wenn zusätzlich das Paket <code>dplyr</code> geladen wird.</p>
</section>
<section id="working-directory" class="level1">
<h1>2. Working Directory</h1>
<p>Wenn <code>R</code> geöffnet wird (ob über die GUI oder RStudio), wird ein aktives Working Dirctory festgelegt. In diesem Ordner sucht <code>R</code> dann standardmäßig nach Dateien bzw. speichert diese dort ab. Mit den Befehlen <code>getwd()</code> und <code>setwd()</code> kann das Working Directory ausgegeben und verändert werden.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb8-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Working Directory ausgeben lassen</span></span>
<span id="cb8-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">getwd</span>()</span>
<span id="cb8-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Working Directory ändern</span></span>
<span id="cb8-4"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">setwd</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"t:/_R"</span>)</span>
<span id="cb8-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Geändertes Working Directory überprüfen</span></span>
<span id="cb8-6"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">getwd</span>()</span></code></pre></div>
</div>
<p>Achtung: Das Zeichen “<code>\</code>” ist in <code>R</code> reserviert. Um Probleme hierbei zu umgehen, kann stattdessen einfach das herkömmliche “<code>/</code>” verwendet werden.</p>
<p>Verwendet man RStudio und öffnet eine neue RStudio-Session per Doppelklick auf eine abgespeicherte R-Syntax, wird das Working Directory automatisch in den Pfad gesetzt, in dem die Syntax liegt. Zusätzlich lässt sich das Working Directory in RStudio über ein Drop-Down Menü verändern.</p>
<p><img src="https://iqb-research.github.io/IQB-Methods/docs/R_tutorials/Material_WSIII/wd_rstudio.jpg" class="img-fluid"></p>
<p>Man kann Dateipfade also in relative bzw. absolute Dateipfade unterteilen:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb9-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Working Directory und relativen Dateipfade verwenden</span></span>
<span id="cb9-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">setwd</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"P:/R/03_Workshops_und_Tutorials/02_R_Einfuehrung/Material_WSIII"</span>)</span>
<span id="cb9-3">test <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">readRDS</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"mtcars.RDS"</span>)</span>
<span id="cb9-4"></span>
<span id="cb9-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Absoluten Dateipfad verwenden (das Workingdirectory ist dabei egal)</span></span>
<span id="cb9-6">test <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">readRDS</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"P:/R/03_Workshops_und_Tutorials/02_R_Einfuehrung/Material_WSIII/mtcars.RDS"</span>)</span></code></pre></div>
</div>
<p>Wenn man in einem kleineren Projekt arbeitet und Syntaxen per Mail oder Repository austauscht (zum Beispiel einzelne Paper-Projekte mit Co-Autoren unterschiedlicher Institutionen), ist es ratsam, keine absoluten Pfade in seinen Syntaxen zu verwenden. Wenn man im Gegensatz dazu in größeren Projekten institutsintern arbeitet, in denen Datensätze auf gemeinsamen Laufwerken gespeichert sind, bietet sich die Verwendung von absoluten Pfaden an.</p>
</section>
<section id="dateien-speichern-und-laden" class="level1">
<h1>3. Dateien speichern und laden</h1>
<p>In <code>R</code> gibt es zwei R-spezifische Dateiformate, um Daten zu speichern: <code>RDS</code> und <code>RData</code>. Falls Daten nur für die Nutzung in späteren <code>R</code>-Sessions benötigt werden, empfiehlt sich immer die Nutzung eines dieser Formate. Andere Formate (<code>.csv</code>, <code>xlsx.</code>, <code>sav</code> usw.) sind im Vergleich deutlich fehleranfälliger. Zusätzlich können häufig Datensätze nicht in der exakt gleichen Formatierung wieder eingelesen werden.</p>
<p><code>saveRDS()</code> dient zur Speicherung eines einzelnen Objekts in R, die die Endung <code>RDS</code> erhalten sollten. Beim Laden dieses Objekts wird dem Objekt ein neuer Name zugewiesen.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb10-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Beispieldatensatz</span></span>
<span id="cb10-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">head</span>(mtcars)</span>
<span id="cb10-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Objekt speichern</span></span>
<span id="cb10-4"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">saveRDS</span>(mtcars, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Material_WSIII/mtcars.RDS"</span>)</span>
<span id="cb10-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Objekt laden</span></span>
<span id="cb10-6">dat <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">readRDS</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Material_WSIII/mtcars.RDS"</span>)</span>
<span id="cb10-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Objekt betrachten</span></span>
<span id="cb10-8"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">head</span>(dat)</span></code></pre></div>
</div>
<p><code>save()</code> dient zur Speicherung eines oder (in der Regel) mehrerer Objekte auf einmal, entsprechende Dateien sollten die Endung <code>RData</code> erhalten. Beim Laden dieser Objekte behalten diese ihren ursprünglichen Namen. Dies kann nervig sein, da mögliche andere Personen nicht wissen, welche Namen die gespeicherten Objekte hatten.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb11-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Beispieldatensätze</span></span>
<span id="cb11-2">mtcars2 <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> mtcars</span>
<span id="cb11-3">iris2 <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> iris</span>
<span id="cb11-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Objekte speichern (file Argument explizit benennen!)</span></span>
<span id="cb11-5"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">save</span>(mtcars2, iris2, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">file =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Material_WSIII/stuff.RData"</span>)</span>
<span id="cb11-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Objekte laden</span></span>
<span id="cb11-7"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">load</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Material_WSIII/stuff.RData"</span>)</span></code></pre></div>
</div>
<p>Ungünstig ist die Verwendung von <code>save</code> bzw. <code>load</code> auch deshalb, weil beim Laden dieser Objekte gegebenenfalls gleichlautende und bereits in der globalen Umgebung vorhandene Objekte überschrieben werden. Setzt man um den <code>load</code>-Befehl eine Klammer, erkennt man immerhin, welche Namen die gespeicherten Objekte hatten:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb12-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Objekte laden und hre Namen anzeigen lassen</span></span>
<span id="cb12-2">(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">load</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Material_WSIII/stuff.RData"</span>))</span></code></pre></div>
</div>
<p>Wenn man überprüfen möchte, wie die in der globalen Umgebung geladenen Objekte heißen, kann man mithilfe des Befehls <code>ls()</code> die aktuell vorhanden Objekte in der globalen Umgebung überprüfen oder diese in RStudio unter <code>Environment</code> betrachten.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb13-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Welche Objekte liegen in der globalen Umgebung?</span></span>
<span id="cb13-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ls</span>()</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "pandoc_dir"      "quarto_bin_path" "some_data"      </code></pre>
</div>
</div>
</section>
<section id="andere-datei-formate" class="level1">
<h1>4. Andere Datei-Formate</h1>
<section id="csv" class="level2">
<h2 class="anchored" data-anchor-id="csv">.csv</h2>
<p>Beim Speichern von comma seperated files (<code>.csv</code>) können die Funktionen <code>write.csv()</code> und <code>write.csv2()</code> verwendet werden, wobei letztere Funktion den deutschen Excel-Konventionen (“,” als Dezimaltrenner) entspricht.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb15-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Objekt speichern</span></span>
<span id="cb15-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">write.csv2</span>(mtcars, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Material_WSIII/mtcars.csv"</span>)</span>
<span id="cb15-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Objekt laden</span></span>
<span id="cb15-4">dat <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">read.csv2</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Material_WSIII/mtcars.csv"</span>)</span>
<span id="cb15-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Objekt betrachten</span></span>
<span id="cb15-6"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">head</span>(dat)</span></code></pre></div>
</div>
</section>
<section id="xlsx-excel" class="level2">
<h2 class="anchored" data-anchor-id="xlsx-excel">.xlsx (Excel)</h2>
<p>Zum Einlesen von Excel files empfiehlt sich die Funktion <code>read_xlsx()</code> aus dem Paket <code>readxl</code>. Achtung! Da das Paket standardmäßig einen <code>tibble</code> ausgibt, eine Spezialform von <code>data.frames</code>, empfiehlt sich die Umwandlung zu einem <code>data.frame</code>. Da das Paket leider kein Schreiben von Excel files unterstützt, empfiehlt sich hierfür die Funktion <code>write_xlsx()</code> aus dem Paket <code>eatAnalysis</code>.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb16" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb16-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Objekt speichern</span></span>
<span id="cb16-2">eatAnalysis<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">write_xlsx</span>(mtcars, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Material_WSIII/mtcars.xlsx"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">row.names =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">FALSE</span>)</span>
<span id="cb16-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Objekt laden</span></span>
<span id="cb16-4">dat <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> readxl<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">read_xlsx</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Material_WSIII/mtcars.xlsx"</span>)</span>
<span id="cb16-5">dat <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">as.data.frame</span>(dat)</span>
<span id="cb16-6"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">head</span>(dat)</span></code></pre></div>
</div>
</section>
<section id="sav-spss" class="level2">
<h2 class="anchored" data-anchor-id="sav-spss">.sav (SPSS)</h2>
<p>Zum Importieren von SPSS-Dateien bietet sich das Paket <code>eatGADS</code> an. Es ermöglicht das Einlesen von Daten in einem zwei-schrittigem Vorgehen. Zuerst werden die Daten eingelesen.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb17-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># sav Datei einlesen</span></span>
<span id="cb17-2">spss <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> eatGADS<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">import_spss</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Material_WSIII/example.sav"</span>)</span></code></pre></div>
</div>
<p>Diese Datei enthält sämtliche Metadaten, die auch die originale spss-Datei beinhaltet (Variablen- und Wertelabel etc.). Diese können mithilfe von <code>extractMeta</code> abgefragt werden. Im Folgenden werden die Metadaten für die Variable <code>"PJgsep_a"</code> abgerufen:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb18" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb18-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># sav Datei einlesen</span></span>
<span id="cb18-2">eatGADS<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">extractMeta</span>(spss, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"PJgsep_a"</span>)</span></code></pre></div>
</div>
<p>Um Analysen in R durchzuführen, müssen die Daten aus diesem Objekt nun mithilfe der <code>extractData()</code>-Funktion extrahiert werden. Diese ermöglicht zum einen Missingcodes anzuwenden, zum anderen gelabelte Variablen entweder als numerische, character oder Faktor-Variablen auszugeben.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb19" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb19-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># sav Datei einlesen</span></span>
<span id="cb19-2">dat <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> eatGADS<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">extractData</span>(spss, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">convertLabel =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"character"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">convertMiss =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>)</span>
<span id="cb19-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">head</span>(dat)</span></code></pre></div>
</div>
</section>
<section id="dta-stata" class="level2">
<h2 class="anchored" data-anchor-id="dta-stata">.dta (Stata)</h2>
<p>Stata-Datein können mithilfe des Paktes <code>haven</code> sowohl gelesen als auch geschrieben werden.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb20" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb20-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Objekt speichern</span></span>
<span id="cb20-2">haven<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">write_dta</span>(mtcars, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Material_WSIII/mtcars.dta"</span>)</span>
<span id="cb20-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Objekt laden</span></span>
<span id="cb20-4">dat <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> haven<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">read_dta</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Material_WSIII/mtcars.dta"</span>)</span>
<span id="cb20-5">dat <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">as.data.frame</span>(dat)</span>
<span id="cb20-6"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">head</span>(dat)</span></code></pre></div>
</div>
</section>
<section id="dat-mplus" class="level2">
<h2 class="anchored" data-anchor-id="dat-mplus">.dat (Mplus)</h2>
<p>Häufig möchte man in Vorbereitung von Analysen mithilfe von <code>Mplus</code> Daten in <code>R</code> aufbereiten. Das Paket <code>MplusAutomation</code> beinhaltet die Funktion <code>prepareMplusData()</code>, die das schreiben von <code>.dat</code> Datein ermöglicht und zusätzlich einen Rohling für die Mplus-Analysesyntax erstellt. Außerdem beinhaltet das Paket zahlreiche Möglichkeiten verschiedene Analysen zu automatisieren.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb21" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb21-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Objekt speichern</span></span>
<span id="cb21-2">MplusAutomation<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">prepareMplusData</span>(mtcars, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">filename =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Material_WSIII/mtcars.dat"</span>)</span></code></pre></div>
</div>


</section>
</section>


<div id="quarto-appendix" class="default"><section id="footnotes" class="footnotes footnotes-end-of-document"><h2 class="anchored quarto-appendix-heading">Footnotes</h2>

<ol>
<li id="fn1"><p>Image by <a href="https://unsplash.com/de/@vantaymedia?utm_content=creditCopyText&amp;utm_medium=referral&amp;utm_source=unsplash">Van Tay Media</a> on <a href="https://unsplash.com/de/fotos/frauen-die-laptops-benutzen-9buwiennNqg">Unsplash</a>.↩︎</p></li>
</ol>
</section></div> ]]></description>
  <category>R</category>
  <category>tutorial</category>
  <guid>https://iqb-research.github.io/IQB-Methods/docs/R_tutorials/R_ws3.html</guid>
  <pubDate>Wed, 12 Mar 2025 14:32:34 GMT</pubDate>
  <media:content url="https://iqb-research.github.io/IQB-Methods/docs/R_tutorials/images/einführung.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>R Workshop Einführung</title>
  <dc:creator>Sebastian Weirich, Karoline Sachse und Benjamin Becker</dc:creator>
  <link>https://iqb-research.github.io/IQB-Methods/docs/R_tutorials/R_ws1.html</link>
  <description><![CDATA[ 




<p><img src="https://iqb-research.github.io/IQB-Methods/docs/R_tutorials/images/einführung.jpg" class="img-fluid"><sup>1</sup></p>
<section id="einleitung" class="level2">
<h2 class="anchored" data-anchor-id="einleitung">1. Einleitung</h2>
<p>R ist eine Programmiersprache für <strong>Datenmanipulation</strong>, <strong>statistische Datenanalyse</strong> und <strong>grafische Darstellung</strong> von Daten (Yanada, 2018).</p>
<p><strong>Datenmanipulation:</strong></p>
<ul>
<li>Import und Export: Einlesen und Schreiben von SPSS-, Excel-, ASCII- oder trennzeichenbasierten Dateien</li>
<li>Kopieren, verschieben, löschen, packen und entpacken von Dateien und Verzeichnissen</li>
<li>Variablen- und Fallselektion, Rekodieren/Aggregieren von Variablen</li>
<li>Umstrukturieren von Datensätzen (long/wide)</li>
<li>Manipulation von Zeichenketten (Verknüpfen, extrahieren, ersetzen, z.B. auch mithilfe regulärer Ausdrücke: sehr mächtig, aber zuweilen kompliziert)</li>
</ul>
<p><strong>statistische Datenanalyse:</strong></p>
<ul>
<li>lineare und nichtlineare Regression</li>
<li>Varianzanalyse</li>
<li>Strukturgleichungsmodelle</li>
<li>Mehrebenenanalyse</li>
<li>Multiple Imputation</li>
<li>Item-Response-Modelle</li>
<li>decision trees</li>
<li>mixed models, u.v.m.</li>
</ul>
<p><strong>grafische Darstellung von Daten:</strong></p>
<ul>
<li>Boxplots</li>
<li>Histogramme</li>
<li>Heat Maps</li>
</ul>
</section>
<section id="r-als-taschenrechner" class="level2">
<h2 class="anchored" data-anchor-id="r-als-taschenrechner">2. R als Taschenrechner</h2>
<p>In der R Konsole kann man (mathematische) Funktionen eingeben und sie evaluieren lassen. Im einfachsten Fall funktioniert das wie ein Taschenrechner.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] 5</code></pre>
</div>
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb3-1"><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] 6</code></pre>
</div>
</div>
<p>Das Dezimaltrennzeichen in R ist ein Punkt, kein Komma.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb5-1"><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] 1.25</code></pre>
</div>
</div>
<p>Exponentialschreibweise:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb7-1"><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">^</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] 8</code></pre>
</div>
</div>
<p>Obwohl es nicht so aussieht, werden bei diesen Operationen im Hintergrund Funktionen ausgeführt. So kann man sich beispielsweise die Wurzel aus 2 einfach in Exponentialschreibweise oder mithilfe der Wurzelfunktion ausgeben lassen:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb9-1"><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">^</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] 1.414214</code></pre>
</div>
</div>
<p>Wurzelfunktion:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb11-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sqrt</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] 1.414214</code></pre>
</div>
</div>
<p>Allgemein gilt auch in R: “Punktrechnung vor Strichrechnung”:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb13-1"><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] 7</code></pre>
</div>
<div class="sourceCode cell-code" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb15-1"><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] 8</code></pre>
</div>
</div>
</section>
<section id="grundlagen" class="level2">
<h2 class="anchored" data-anchor-id="grundlagen">3. Grundlagen</h2>
<p>R ist zugleich eine Sprache und eine Umgebung für statistische Datenbearbeitung. R ist objektbasiert. Alles in R ist ein Objekt: Zahlen, Vektoren, Matrizen, Funktionen. Das grundlegende Funktionsprinzip ist dabei: “Definiere ein Objekt und weise ihm einen Wert zu.” Im einfachsten Fall wird im folgenden Beispiel das Objekt <strong><code>b</code></strong> erzeugt und ihm der Wert 2 zugewiesen. Um sich den Wert von <strong><code>b</code></strong> anzeigen zu lassen, kann man <strong><code>b</code></strong> einfach in die Konsole tippen:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb17-1">b <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span></span>
<span id="cb17-2">b</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] 2</code></pre>
</div>
</div>
<p><code>b</code>** ist nun intern gespeichert und kann ebenfalls für Zuweisungen benutzt werden. Hier wird ein neues Objekt <strong><code>d</code></strong> erzeugt und ihm als Wert die Quadratwurzel von <strong><code>b</code></strong> zugewiesen:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb19" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb19-1">d <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sqrt</span>(b)</span></code></pre></div>
</div>
<p>Möglich ist es auch, <strong><code>b</code></strong> wieder mit einem anderen Wert zu überschreiben:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb20" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb20-1">b <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> b</span>
<span id="cb20-2">b</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] 200</code></pre>
</div>
</div>
<p>Mit dem Befehl <strong><code>class</code></strong> kann man sich die Klasse von <strong><code>b</code></strong> anzeigen lassen.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb22" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb22-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">class</span>(b)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "numeric"</code></pre>
</div>
</div>
<p>Die wichtigsten Klassen für skalare Objekt (also solche, die nur aus einem einzigen Element bestehen), sind</p>
<ul>
<li><strong><code>numeric</code></strong>: reelle Ziffer oder Zahlen</li>
<li><strong><code>character</code></strong>: Zeichenkette</li>
<li><strong><code>logical</code></strong>: logischer Wert, der nur zwei Zustände annehmen kann, <strong><code>TRUE</code></strong> oder <strong><code>FALSE</code></strong></li>
</ul>
<p>Im folgenden verschiedene Beispiele für character- bzw. logische Zuweisungen, hier jeweils wiederum nur für die Länge 1. Zuweisungen der Klasse character erfolgen mit hochgestellten Anführungszeichen:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb24" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb24-1">d <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"hallo"</span></span>
<span id="cb24-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">class</span>(d)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "character"</code></pre>
</div>
<div class="sourceCode cell-code" id="cb26" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb26-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">length</span>(d)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] 1</code></pre>
</div>
</div>
<p>Wenn einem Objekt die Zahl 220 in hochgestellten Anführungszeichen zugewiesen wird, wird der Wert nicht als numerisch, sondern als character behandelt:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb28" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb28-1">e <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"220"</span></span>
<span id="cb28-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">class</span>(e)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "character"</code></pre>
</div>
</div>
<p>Wenn einem Objekt der Austruck TRUE in hochgestellten Anführungszeichen zugewiesen wird, wird der Wert nicht als logical, sondern als character behandelt:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb30" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb30-1">f <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span></span>
<span id="cb30-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">class</span>(f)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "logical"</code></pre>
</div>
<div class="sourceCode cell-code" id="cb32" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb32-1">g <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"TRUE"</span></span>
<span id="cb32-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">class</span>(g)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "character"</code></pre>
</div>
</div>
<section id="vektoren" class="level3">
<h3 class="anchored" data-anchor-id="vektoren">3.1 Vektoren</h3>
<p>Vektoren sind definiert als eine Reihe von Elementen <em>derselben</em> Klasse. Sie können unter anderem mit der Funktion <strong><code>c()</code></strong> erzeugt werden:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb34" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb34-1">a <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">89</span>)</span>
<span id="cb34-2">b <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"gut"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"schlecht"</span>)</span>
<span id="cb34-3">d <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>, <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>, <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>, <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">FALSE</span>, <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>, <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>)</span></code></pre></div>
</div>
<p>Ähnlich wie in den vorher aufgeführten Beispielen kann man sich mit verschiedenen Befehlen verschiedene Eigenschaften dieser Vektoren zeigen lassen, etwa ihre Länge (= die Anzahl ihrer Elemente) mit <strong><code>length()</code></strong>, oder ihre Klasse mit <strong><code>class()</code></strong>. Bestimmte Funktionen wiederum kann man sinnvoll nur für numerische Vektoren anweden (z.B. <strong><code>sum()</code></strong>, <strong><code>mean()</code></strong>, <strong><code>min()</code></strong>, <strong><code>max()</code></strong> etc. Andere wiederum sind nur für Vektoren der Klasse character sinnvoll, etwa <strong><code>nchar()</code></strong>, das einem die Anzahl der Zeichen einer Zeichenkette gibt. Ganz allgemein gilt: Funktionen, die man auf Skalare anwenden kann, kann man in der Regel auch auf Vektoren anwenden:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb35" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb35-1">skalar <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span></span>
<span id="cb35-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sqrt</span>(skalar)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] 1.414214</code></pre>
</div>
<div class="sourceCode cell-code" id="cb37" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb37-1">vektor <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">89</span>)</span>
<span id="cb37-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sqrt</span>(vektor)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] 1.000000 2.000000 1.414214 1.414214 9.433981</code></pre>
</div>
</div>
<p>Die Funktion <strong><code>sqrt</code></strong> gibt dabei genauso viele Elemente zurück, wie der Vektor besitzt, den man der Funktion übergeben hat. Das ist nicht bei allen Funktionen so; die <strong><code>mean</code></strong>-Funktion gibt (sinnvollerweise) immer nur ein Element zurück.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb39" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb39-1">skalar <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span></span>
<span id="cb39-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mean</span>(skalar)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] 2</code></pre>
</div>
<div class="sourceCode cell-code" id="cb41" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb41-1">vektor <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">89</span>)</span>
<span id="cb41-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mean</span>(vektor)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] 19.6</code></pre>
</div>
</div>
<p>Was passiert, wenn man Vektoren “unzulässig” definiert, also beispielsweise die Regel, dass alle Elemente dieselbe Klasse haben müssen, missachtet? Vektoren werden in die “kleinste gemeinsame Klasse” umgewandelt. Es gibt hier keine Warnmeldung, und manchmal führt das zu unerwünschten Nebenwirkungen. Zuerst betrachten wir einen Vektor, der aus Elementen der Klasse numeric, character und logical besteht:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb43" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb43-1">b <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"hallo"</span>,<span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">11</span>,<span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">FALSE</span>)</span>
<span id="cb43-2">b</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "1"     "6"     "hallo" "TRUE"  "11"    "FALSE"</code></pre>
</div>
</div>
<p>Der gesamte Vektor wird als character definiert:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb45" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb45-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">class</span>(b)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "character"</code></pre>
</div>
</div>
<p>Besteht der Vektor nur aus Elementen der Klassen numeric und logical, wird der Vektor als numeric definiert:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb47" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb47-1">b <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>,<span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">11</span>,<span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">FALSE</span>)</span>
<span id="cb47-2">b</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1]  1  6  1 11  0</code></pre>
</div>
<div class="sourceCode cell-code" id="cb49" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb49-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">class</span>(b)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "numeric"</code></pre>
</div>
</div>
<p>An diesen Bespielen erkennt man prototypisch, wie R sich bei “widersinnigen” Benutzereingaben verhält: Anstatt bei formal falschen oder unsinnigen Eingaben wie <strong><code>nchar(15)</code></strong> eine Fehlermeldung auszugeben, wird versucht zu “antizipieren”, was der Benutzer gemeint oder beabsichtigt haben könnte. Bei <strong><code>nchar(15)</code></strong> wird also zunächst der numerische Ausdruck in einen character-Ausdruck umgewandelt und anschließend die Anzahl der Zeichen dieses Ausdrucks ausgegeben. Intern wertet R statt <strong><code>nchar(15)</code></strong> folgenden Ausdruck aus: <strong><code>nchar("15")</code></strong> bzw. <strong><code>nchar(as.character(15))</code></strong>. Ein solches oder ähnliches Verhalten wendet R in unzähligen Fällen an, und daraus ergeben sich zugleich Vor- und Nachteile: es erlaubt dem Anwender, syntaktisch “unsauberen” Code zu verwenden, ohne dass es zu Fehlermeldungen kommt. In der Regel erhält man das gewünschte Ergebnis. Außerdem kann man R-Syntaxen teils sehr sparsam und “schreibfaul” erstellen; <strong><code>nchar(15)</code></strong> ist ja viel kürzer als <strong><code>nchar(as.character(15))</code></strong>. Dass R diese Nachlässigkeiten erlaubt, hat aber auch Nachteile: die syntaktische Logik der R-Sprache ist dadurch weniger transparent, und falls es doch zu Fehlermeldungen kommt, sind diese erstmal weniger verständlich.</p>
<p>Alternative Möglichkeiten, Vektoren zu erzeugen. Alle Zahlen von 1 bis 20:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb51" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb51-1">a <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">20</span></span></code></pre></div>
</div>
<p>Erzeuge eine Zahlenreihe von -2 bis +2 in Intervallen von 0.2:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb52" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb52-1">a <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">seq</span>(<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>,<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.2</span>) </span></code></pre></div>
</div>
<p>Repliziere die Ziffer 4 dreimal:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb53" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb53-1">a <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rep</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>)</span></code></pre></div>
</div>
<p>Repliziere die Zahlenfolge von 1 bis 4 dreimal:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb54" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb54-1">a <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rep</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>)</span></code></pre></div>
</div>
<p>Repliziere in der Zahlenfolge von 1 bis 4 jede einzelne Ziffer dreimal:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb55" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb55-1">a <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rep</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>,<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">each=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>)</span></code></pre></div>
</div>
<p>Repliziere in der Zahlenfolge von 1 bis 4 jede einzelne Ziffer dreimal, und repliziere den egsamten Vektor zweimal:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb56" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb56-1">a <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rep</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>,<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">each=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">times =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span></code></pre></div>
</div>
<p>Repliziere in der Zahlenfolge von 1 bis 4 die 1 einmal, die 2 zweimal, die 3 dreimal, etc.:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb57" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb57-1">a <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rep</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>)</span></code></pre></div>
</div>
</section>
<section id="navigation-in-vektoren-subsetting" class="level3">
<h3 class="anchored" data-anchor-id="navigation-in-vektoren-subsetting">3.2 Navigation in Vektoren (subsetting)</h3>
<p>Mithilfe eckiger Klammern kann man sich einzelne Elemente eines Vektors anzeigen lassen oder auch verändern.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb58" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb58-1">b <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sqrt</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>)</span></code></pre></div>
</div>
<p>Der gesamte Vektor <strong><code>b</code></strong> besteht aus fünf Zahlen:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb59" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb59-1">b</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] 1.000000 1.414214 1.732051 2.000000 2.236068</code></pre>
</div>
</div>
<p>Mit <strong><code>b[2]</code></strong> kann man sich nur das zweite Element des Vektors anzeigen lassen; mit <strong><code>b[2] &lt;- 1000</code></strong> kann man das zweite Element durch die Zahl 1000 ersetzen:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb61" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb61-1">b[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>] <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1000</span></span>
<span id="cb61-2">b</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1]    1.000000 1000.000000    1.732051    2.000000    2.236068</code></pre>
</div>
</div>
<p>Mit <strong><code>b[4:5] &lt;- c(400, 500)</code></strong> kann man das vierte und fünfte Element durch die Zahlen 400 und 500 ersetzen:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb63" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb63-1">b[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>] <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">400</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">500</span>)</span>
<span id="cb63-2">b</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1]    1.000000 1000.000000    1.732051  400.000000  500.000000</code></pre>
</div>
</div>
<p>Hier ein weiteres Beispiel für ein syntaktisch “fehlerhaftes” Subsetting, das trotzdem funktioniert. Man würde erwarten, dass <strong><code>b[4:5] &lt;- 45</code></strong> eine Fehlermeldung gibt: <em>zwei</em> Elemente in einem Vektor sollen durch <em>eine</em> Zahl ersetzt werden. Die “sauberere” Lösung wäre <strong><code>b[4:5] &lt;- c(45, 45)</code></strong>. Dennoch funktionier auch <strong><code>b[4:5] &lt;- 45</code></strong>:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb65" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb65-1">b[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>] <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">45</span></span>
<span id="cb65-2">b</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1]    1.000000 1000.000000    1.732051   45.000000   45.000000</code></pre>
</div>
</div>
<p>Weitere “unzulässige” Operationen haben wieder denselben Effekt wie oben beschrieben. Ersetze ich ein Element des numerischen Vektors durch ein character-Element, wird der gesamte Vektor ebenfalls nach character umgewandelt.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb67" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb67-1">b[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>] <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"hallo"</span></span>
<span id="cb67-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">class</span>(b)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "character"</code></pre>
</div>
<div class="sourceCode cell-code" id="cb69" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb69-1">b</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "hallo"            "1000"             "1.73205080756888" "45"              
[5] "45"              </code></pre>
</div>
</div>
</section>
<section id="funktionsliste-i-deskriptive-statistiken-für-numerische-vektoren" class="level3">
<h3 class="anchored" data-anchor-id="funktionsliste-i-deskriptive-statistiken-für-numerische-vektoren">3.3 Funktionsliste I: Deskriptive Statistiken für numerische Vektoren</h3>
<p>Alle Funktionen, die sich sinnvoll auf numerische Vektoren anwenden lassen, können hier in ihrer Vollständigkeit nicht aufgeführt werden. Im Folgenden sollen jedoch die gebräuchlichsten und am häufigsten verwendeten aufgelistet werden:</p>
<ul>
<li><p><strong><code>sum()</code></strong>. Berechnet die Summe aller Elemente eines Vektors. Nicht definiert für nicht-numerische Vektoren.</p></li>
<li><p><strong><code>mean()</code></strong>. Arithmetischer Mittelwert aller Elemente eines Vektors. Nicht definiert für nicht-numerische Vektoren.</p></li>
<li><p><strong><code>sd()</code></strong>. Standardabweichung</p></li>
<li><p><strong><code>var()</code></strong>. Varianz</p></li>
<li><p><strong><code>min()</code></strong>. Minimum</p></li>
<li><p><strong><code>max()</code></strong>. Maximum</p></li>
<li><p><strong><code>scale()</code></strong>. Funktion zum Zentrieren oder <em>z</em>-Standardisieren. Die Funktion besitzt zusätzliche Argumente, je nachdem ob standardisiert oder nur zentriert werden soll. Für die zusätzlichen Argumente sind Standardeinstellungen (defaults) definiert – also “Voreinstellungen” der Argumente, die benutzt werden, wenn der Anwender die Funktionsargumente selbst nicht explizit definiert. Ein Vektor <strong><code>a &lt;- rnorm(100, mean = 2, sd = 8)</code></strong> mit Mittelwert 2 und Standardabweichung 8 wird mit <strong><code>scale(a, center = TRUE, scale = FALSE)</code></strong> zentriert und mit <strong><code>scale(a, center = TRUE, scale = TRUE)</code></strong> standardisiert. (Bei <strong><code>scale(a, center = FALSE, scale = FALSE)</code></strong> passiert einfach gar nichts; der Vektor wird 1:1 so zurückgegeben, wie er war.)</p></li>
<li><p><strong><code>table()</code></strong> gibt eine Häufigkeitsverteilung aller Werte eines Vektors. Das ist sowohl für numerische als auch für nicht-numerische Vektoren möglich und für letztere häufig sinnvoller.</p></li>
<li><p><strong><code>sort()</code></strong>. Elemente auf- oder absteigend sortieren. Geht auch für nicht-numerische Vektoren (bei character-Vektoren wird in diesem Fall sortiert, bei Faktoren nach Ordnung der factor levels). Auch <strong><code>sort()</code></strong> enthält zusätzliche Argumente mit Voreinstellungen, z.B. das Argument <strong><code>decreasing</code></strong>, das angibt, ob auf- oder absteigend sortiert werden soll. Der default ist hier <strong><code>decreasing = FALSE</code></strong>; es wird also standardmäßig aufsteigend sortiert.</p></li>
<li><p><strong><code>order()</code></strong> funktioniert ähnlich wie <strong><code>sort()</code></strong>, gibt aber anstelle des Vektor-Wertes die Position zurück. Am einfachsten lässt sich das mit einem character-Vektor veranschaulichen – hier erkennt man auch, dass verschiedene R-Funktionen zueinander häufig redundant sind; es gibt verschiedene syntaktische Möglichkeiten, ein und dasselbe Ergebnis zu erhalten. Das macht R zum einen recht flexibel, zum anderen nicht unbedingt übersichtlich.</p></li>
</ul>
<div class="cell">
<div class="sourceCode cell-code" id="cb71" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb71-1">vek <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"oh"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"je"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"mi"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"neh"</span>)</span>
<span id="cb71-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sort</span>(vek)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "je"  "mi"  "neh" "oh" </code></pre>
</div>
<div class="sourceCode cell-code" id="cb73" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb73-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">order</span>(vek)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] 2 3 4 1</code></pre>
</div>
<div class="sourceCode cell-code" id="cb75" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb75-1">vek[<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">order</span>(vek)]</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "je"  "mi"  "neh" "oh" </code></pre>
</div>
</div>
<ul>
<li><p><strong><code>rev()</code></strong> kehrt die Reihenfolge der Elemente eines Vektors um</p></li>
<li><p><strong><code>unique()</code></strong> zeigt die Elemente des Vektors und lässt alle mehrfach vorhandenen Werte aus.</p></li>
<li><p><strong><code>duplicated()</code></strong> gibt einen logischen Vektor zurück, der für jedes Element anzeigt, ob es einzigartig ist (FALSE) oder mindestens zweimal vorkommt (TRUE)</p></li>
<li><p><strong><code>which()</code></strong> gibt zurück, an welcher Stelle (oder welchen Stellen) eines Vektors sich ein bestimmtes Element befindet, z.B. <strong><code>which(x == 5)</code></strong>, oder eine bestimmte Bedingung erfüllt ist <strong><code>which(x &gt; 5)</code></strong>, oder <strong><code>which(x != 5)</code></strong></p></li>
</ul>
<p>Das sind, wie gesagt, bei weitem nicht alle Funktionen für numerische Vektoren. Wenn man eine bestimmte Operation durchführen möchte und den R-Befehl nicht kennt, hilft es häufig, die gewünschte Operation bei Google mit dem Zusatz “R” oder “R CRAN” einzugeben, vorzugsweise in englisch, z.B. “R sort by more than one variable”.</p>
</section>
<section id="funktionsliste-ii-bearbeiten-von-character-vektoren" class="level3">
<h3 class="anchored" data-anchor-id="funktionsliste-ii-bearbeiten-von-character-vektoren">3.4 Funktionsliste II: Bearbeiten von character-Vektoren</h3>
<p>Im Anwendungsfall von Large-scale Assessments im Bildungsforschungsbereich kommen character-Vektoren bspw. in Variablen- oder Itemnamen vor. Weniger häufig begegnet man ihnen unter anderem auch in Freitextfeldern in Schülerfragebögen. R bietet zahlreiche Möglichkeiten zur Bearbeitung von character-Vektoren, die auch reguläre Ausdrücke einschließen. Hier sollen nur die wichtigsten anhand prominenter Anwendungsfälle genannt werden. Man könnte sich beispielsweise vorstellen, in einem großen Datensatz mit vielen Variablen bestimmte Spalten oder Variablen identifizieren beziehungsweise verändern zu wollen. Der beispielhaft verwendete Vektor mit Variablennamen sei der folgende:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb77" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb77-1">varnamen <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"idstud"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"idclass"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"D10101a"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"D10102a"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"D10102b"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"D10103a"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"D10201a"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"D10301"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"sex"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"M15511a"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"M15612a"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"M15712b"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"M15712c"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"M15712d"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"hisced"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"parid"</span>)</span></code></pre></div>
</div>
<p>Insgesamt gibt es hier nur 14 Variablen – in großen Large-scale Datensätzen hat man es ja zuweilen mit 1000 variablen und mehr zu tun.</p>
<section id="die-funktion-grep" class="level4">
<h4 class="anchored" data-anchor-id="die-funktion-grep">Die Funktion <strong><code>grep()</code></strong></h4>
<p><strong><code>grep()</code></strong> erlaubt, einen character-vektor nach einem bestimmten Muster zu durchsuchen. Zurückgegeben werden alle Positionen, an denen dieses Muster auftritt. Man kann sich das ein bisschen wie die Suchfunktion in Word vorstellen. <strong><code>grep()</code></strong> hat verschiedene Argumente – <strong><code>pattern</code></strong> gibt das Muster an, <em>was</em> gesucht werden soll, <strong><code>x</code></strong> gibt den character-Vektor an, <em>in dem</em> gesucht werden soll, und <strong><code>value</code></strong> gibt als logisches Argument an, ob der Wert selbst oder seine Position zurückgegeben werden soll. Die Flexibilität von <strong><code>grep()</code></strong> rührt unter anderem auch daher, dass man als Suchmuster (<strong><code>pattern</code></strong>) auch reguläre Ausdrücke verwenden kann.</p>
<ul>
<li><p><strong><code>grep(pattern="id", x=varnamen)</code></strong> findet die Positionen der Variablennamen, die ein “id” im Variablennamen haben.</p></li>
<li><p><strong><code>grep(pattern="id", x=varnamen, value=TRUE)</code></strong> zeigt die Variablennamen an, die ein “id” im Variablennamen haben.</p></li>
<li><p><strong><code>grep(pattern="^id", x=varnamen, value=TRUE)</code></strong> zeigt die Variablennamen an, die mit einem “id” im Variablennamen <em>beginnen</em>. (Der “Haken” vor dem “id” besagt, dass der Variablenname mit “id” beginnen muss)</p></li>
<li><p>Wenn ich id-Variablen finden will, mit aber nicht sicher bin, ob die in dem Datensatz groß oder klein geschrieben sind, ich aber im Zweifel beide haben will, kann man die “Oder”-verknüpfung nehmen (genaueres im Abschnitt “Logische Operatoren”): <strong><code>grep(pattern="ID|id", x=varnamen, value=TRUE)</code></strong></p></li>
<li><p>Auch den letzten Befehl kann man “einengen”, dass nur die Variablennamen gesucht werden sollen, die mit einem groß oder kleingeschriebenen “ID” beginnen: <strong><code>grep(pattern="^ID|^id", x=varnamen, value=TRUE)</code></strong></p></li>
<li><p>Das ist auch sinnvoll, wenn ich beispielsweise alle Variablennamen der Deutsch-Items identifizieren will und weiß, Deutsch-Items beginnen mit einem groß geschriebenen “D”: <strong><code>grep(pattern="^D", x=varnamen, value=TRUE)</code></strong></p></li>
<li><p>Genauso kann man auch nur die Variablennamen suchen, die mit einem klein geschriebenen “a” <em>aufhören</em>: <strong><code>grep(pattern="a$", x=varnamen, value=TRUE)</code></strong>. Das “$”-Zeichen gibt an, dass nach dem Zeichen “a” der Variablenname zuende sein muss.</p></li>
<li><p>Möglich (aber etwas komplizierter) sind auch Verknüpfungen der Art: Finde alle Variablennamen, die mit einem “D” beginnen und einem “a” aufhören. Hier handelt es sich um eine logische Verknüpfung zweier Bedingungen – genauer wird darauf im folgenden Abschnitt “Logische Operatoren” eingegangen. In R kann man das auf verschiedenen Wegen realisieren; eine Möglichkeit soll hier kurz demonstriert werden:</p></li>
</ul>
<div class="cell">
<div class="sourceCode cell-code" id="cb78" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb78-1">beginnt_mit_D <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">grep</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">pattern=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"^D"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x=</span>varnamen, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">value=</span><span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>)</span>
<span id="cb78-2">endet_mit_a   <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">grep</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">pattern=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"a$"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x=</span>varnamen, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">value=</span><span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>)</span>
<span id="cb78-3">beides        <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">intersect</span>(beginnt_mit_D, endet_mit_a)</span>
<span id="cb78-4">beides</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "D10101a" "D10102a" "D10103a" "D10201a"</code></pre>
</div>
</div>
</section>
<section id="die-funktionen-gsub-substr-substring-nchar-und-strsplit" class="level4">
<h4 class="anchored" data-anchor-id="die-funktionen-gsub-substr-substring-nchar-und-strsplit">Die Funktionen <strong><code>gsub()</code></strong>, <strong><code>substr()</code></strong>, <strong><code>substring()</code></strong>, <strong><code>nchar()</code></strong> und <strong><code>strsplit()</code></strong></h4>
<ul>
<li><p><strong><code>gsub()</code></strong> erlaubt es, Teile eines character-Vektors zu ersetzen. Sollen bspw. in der Variablenliste alle Namen, die mit “D101” beginnen, durch “D201” ersetzt werden, geht das mit <strong><code>gsub(pattern = "D101", replacement = "D201", x = varnamen)</code></strong>. Hier ist es wichtig, die Stelligkeit zu beachten; <strong><code>gsub(pattern = "D1", replacement = "D2", x = varnamen)</code></strong> würde auch z.B. “D102” durch “D202” ersetzen. Möglich, aber nicht notwendig ist hier auch, die Ersetzung nur durchzuführen, wenn “D101” am Anfang des strings steht: <strong><code>gsub(pattern = "^D101", replacement = "D201", x = varnamen)</code></strong>.</p></li>
<li><p><strong><code>substr()</code></strong> erlaubt es, bestimmte Teile eines character-Vektors “auszuschneiden”: wenn man bspw. nur die ersten 4 Zeichen ausschneiden will, geht das mit <strong><code>substr(x = varnamen, start = 1, stop = 4)</code></strong>. Zeichenketten mit weniger als 4 Zeichen (hier etwa der Variablenname “sex”) werden dabei so beibehalten, wie sie waren.</p></li>
<li><p>Möchte man von dem character-Vektor nur am Anfang bspw. das erste Zeichen entfernen und alle anderen beibehalten (egal, wie viele es sind), bietet sich die Funktion <strong><code>substring()</code></strong> an: <strong><code>substring(text = varnamen, first = 2)</code></strong></p></li>
<li><p><strong><code>nchar()</code></strong> einem für jedes Element die Anzahl von Zeichen (Buchstaben und Ziffern): <strong><code>nchar(varnamen)</code></strong></p></li>
<li><p><strong><code>strsplit()</code></strong> teilt einen character-Vektor an einem definierten Zeichen</p></li>
</ul>
</section>
<section id="die-funktion-paste" class="level4">
<h4 class="anchored" data-anchor-id="die-funktion-paste">Die Funktion <strong><code>paste()</code></strong></h4>
<p>Die Funktion erlaubt es, character-Vektoren aus einzelnen Elementen “zusammenzubauen”. Soll beispielsweise an den Variablennamens-Vektor <strong><code>varnamen</code></strong> das Jahr der Erhebung mit angefügt werden, geht das mit folgendem Ausdruck: <strong><code>paste(varnamen, "2012", sep="_")</code></strong>. An jeden Variablennamen wurde nun die Jahreszahl 2012 angefügt. Der Argument <strong><code>sep</code></strong> gibt dabei das Zeichen an, das als “Trenner” zweischen dem ursprünglichen Ausdruck und dem “Suffix” 2012 verwendet werden soll. <strong><code>paste()</code></strong> ist eine recht mächtige Funktion, so kann man bspw. auch an jeden Variablennamen die laufende Nummer anhängen, die er im character-Vektor einnimmt: <strong><code>paste(varnamen, 1:length(varnamen), sep="_")</code></strong>. Es ist auch möglich, alle Elemente des Vektor zu einem einzigen großen String zusammenzubinden: <strong><code>paste(varnamen, collapse="_")</code></strong>. Die wichtige, aber häufig Verwirrung stiftende Unterscheidung liegt hierbei zwischen den Separationsargumenten <strong><code>sep</code></strong> und <strong><code>collapse</code></strong>. <strong><code>sep</code></strong> definiert das Trennzeichen für die einzelnen Terme; <strong><code>collapse</code></strong> (ggf.) das Trennzeichen, mit dem die Ergebnisse zusammengefügt werden (sofern sie zusammengefügt werden sollen). Die Hilfeseite der <strong><code>paste</code></strong>-Funktion liefert einige anschauliche Beispiele, die die Unterscheidung zwischen beiden verdeutlichen.</p>
</section>
<section id="funktionen-aus-eattools" class="level4">
<h4 class="anchored" data-anchor-id="funktionen-aus-eattools">Funktionen aus <strong><code>eatTools</code></strong></h4>
<p>Im Laufe der Datenaufbereitungsprozeduren am IQB wurden die obenstehenden Funktionen teils erweitert. Ohne Anspruch auf Vollständigkeit sollen weitere Möglichkeiten der Zeichenkettenmanipulation kurz genannt werden:</p>
<ul>
<li><p><strong><code>eatTools::crop()</code></strong> entfernt führende oder abschließende Leerzeichen (bzw. ein frei definiertes Zeichen) aus einem character-Vektor. Das ist bspw. dann sinnvoll, wenn in inakkurat aufbereiteten Datensätzen z.B. anstatt einer <code>1</code> der Wert <code>1</code> (also mit einem unbeabsichtrigten leerzeichen eingetragen wurde. Hier werden (nur der Anschaulichkeit zuliebe) alle führenden und abschließenden “D”s aus den Variablennamen entfernt: <strong><code>eatTools::crop(varnamen, char = "D")</code></strong></p></li>
<li><p><strong><code>eatTools::removeNumeric()</code></strong> entfernt alle Ziffern aus einem character-Vektor: <strong><code>eatTools::removeNumeric(varnamen)</code></strong></p></li>
<li><p><strong><code>eatTools::removeNonNumeric()</code></strong> entfernt alle Buchstaben aus einem character-Vektor und lässt nur die Ziffern übrig. Manche Elemente von <strong><code>varnamen</code></strong> sind hinterher leer. <strong><code>eatTools::removeNonNumeric(varnamen)</code></strong></p></li>
<li><p><strong><code>eatTools::removePattern()</code></strong> entfernt ein bestimmtes Muster aus einem character-Vektor: <strong><code>eatTools::removePattern(string = varnamen, pattern = "id")</code></strong></p></li>
</ul>
</section>
</section>
</section>
<section id="logische-operatoren" class="level2">
<h2 class="anchored" data-anchor-id="logische-operatoren">4. Logische Operatoren</h2>
<p>Allgemeines zu logischen Operatoren kann man auf der gleichnamigen Wikipediaseite finden: https://de.wikipedia.org/wiki/Logischer_Operator<br>
Für sämtliche Operatoren gibt es eine Entsprechung in R. Die Syntax ist dabei (weitgehend) äquivalent zu den angegeben Beispielen für C, C++, Java und PHP auf der Wikipediaseite. Der Wahrheitswert, der in R zurückgegeben wird, hat die Klasse <strong><code>logical</code></strong> und kann 2 Werte annehmen: TRUE oder FALSE. Der Wahrheitswert kann wiederum einem Objekt zugewiesen werden:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb80" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb80-1">istWahr <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span> </span>
<span id="cb80-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">class</span>(istWahr)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "logical"</code></pre>
</div>
<div class="sourceCode cell-code" id="cb82" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb82-1">istWahr</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] FALSE</code></pre>
</div>
</div>
<section id="logische-operatoren-ohne-verknüpfung" class="level4">
<h4 class="anchored" data-anchor-id="logische-operatoren-ohne-verknüpfung">Logische Operatoren ohne Verknüpfung</h4>
<ul>
<li><strong>ist größer als</strong>: <code>4 &gt; 3</code></li>
<li><strong>ist kleiner als</strong>: <code>4 &lt; 3</code></li>
<li><strong>ist größer oder gleich</strong>: <code>4 &gt;= 3</code></li>
<li><strong>ist kleiner oder gleich</strong>: <code>4 &lt;= 3</code></li>
<li><strong>ist gleich</strong>: <code>4 == 3</code></li>
<li><strong>ist ungleich</strong>: <code>4 != 3</code></li>
</ul>
</section>
<section id="logische-operatoren-mit-verknüpfungen" class="level4">
<h4 class="anchored" data-anchor-id="logische-operatoren-mit-verknüpfungen">Logische Operatoren mit Verknüpfungen</h4>
<ul>
<li><strong>Bedingung a UND Bedingung b sind erfüllt</strong>: <code>4 &gt; 3 &amp; is.numeric(5)</code></li>
<li><strong>Bedingung a ODER Bedingung b ist erfüllt</strong>: <code>4 &gt; 3 | is.numeric(5)</code></li>
<li><strong>ENTWEDER Bedingung a ODER Bedingung b ist erfüllt</strong>: <code>xor(4 &gt; 3, is.numeric(5))</code>. Hier wird <code>FALSE</code> zurückgegeben, da <em>beide</em> Bedingungen erfüllt sind, und eben nicht nur entweder a oder b.</li>
<li><strong>Bedingung b ist nicht erfüllt</strong>: <code>!is.numeric("a")</code>. Hier wird <code>TRUE</code> zurückgegeben, denn es ist ja wahr, dass “a” <em>nicht</em> numerisch ist.</li>
</ul>
</section>
<section id="arbeiten-mit-vektorwertigen-logischen-verknüpfungen" class="level4">
<h4 class="anchored" data-anchor-id="arbeiten-mit-vektorwertigen-logischen-verknüpfungen">Arbeiten mit vektorwertigen logischen Verknüpfungen</h4>
<p>In den oberen Beispielen wurden logische Abfragen immer nur für ein Objekt der Länge 1 durchgeführt. Man kann diese Funktionen aber auch auf Vektoren anwenden. Dazu folgendes hypothetisches Beispiel: ein großer Datensatz mit vielen Variablen soll in Mplus ausgewertet werden. In Mplus dürfen Variablennamen jedoch nur maximal 6 Zeichen haben. Gibt es also in dem Variablennamens-Vektor <strong><code>varnamen</code></strong> Variablennamen mit unerlaubter Länge? Um das zu prüfen, geht man in mehreren Schritten vor:</p>
<ol type="1">
<li>Zeige für jedes Element im Variablennamens-Vektor die Anzahl von Buchstaben an.</li>
</ol>
<div class="cell">
<div class="sourceCode cell-code" id="cb84" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb84-1">anzahl <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">nchar</span>(varnamen)</span></code></pre></div>
</div>
<ol start="2" type="1">
<li>Prüfe, für welche Variablennamen die zulässige Zeichenanzahl überschritten ist. Dazu wird ein logischer Vektor erzeugt, der den Wert <strong><code>TRUE</code></strong> annimmt, wenn die Zeichenanzahl maximal 6 beträgt, andernfalls <strong><code>FALSE</code></strong>.</li>
</ol>
<div class="cell">
<div class="sourceCode cell-code" id="cb85" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb85-1">erlaubt <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> anzahl <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span></span>
<span id="cb85-2">erlaubt</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code> [1]  TRUE FALSE FALSE FALSE FALSE FALSE FALSE  TRUE  TRUE FALSE FALSE FALSE
[13] FALSE FALSE  TRUE  TRUE</code></pre>
</div>
</div>
<ol start="3" type="1">
<li>Nun wird geprüft, ob diese Bedingung für alle Variablennamen erfüllt ist. Dazu können die Funktionen <strong><code>all()</code></strong> oder <strong><code>any()</code></strong> benutzt werden. <strong><code>all()</code></strong> fragt: Haben alle Elemente des Vektors <strong><code>erlaubt</code></strong> den Wahrheitswert <strong><code>TRUE</code></strong>? <strong><code>any()</code></strong> fragt: Gibt es irgendein Element in dem Vektors <strong><code>erlaubt</code></strong>, das den Wahrheitswert <strong><code>FALSE</code></strong> hat?</li>
</ol>
<div class="cell">
<div class="sourceCode cell-code" id="cb87" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb87-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">all</span>(erlaubt)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] FALSE</code></pre>
</div>
<div class="sourceCode cell-code" id="cb89" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb89-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">any</span>(erlaubt <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">FALSE</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] TRUE</code></pre>
</div>
</div>
<ol start="3" type="1">
<li>Ja, einige Variablennamen haben eine größere Zeichenanzahl als 6. Man kann die Variablennamen auf die ersten 6 Zeichen reduzieren:</li>
</ol>
<div class="cell">
<div class="sourceCode cell-code" id="cb91" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb91-1">varnamen_neu <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">substr</span>(varnamen, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>)</span></code></pre></div>
</div>
<ol start="4" type="1">
<li>Variablennamen müssen jedoch stets einzigartig (unique) sein. Ist das jetzt noch der Fall? Dazu verwendet man die oben beschriebene Funktion <strong><code>duplicated()</code></strong> in Verbindung mit <strong><code>any</code></strong>:</li>
</ol>
<div class="cell">
<div class="sourceCode cell-code" id="cb92" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb92-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">any</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">duplicated</span>(varnamen_neu))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] TRUE</code></pre>
</div>
</div>
<p>Der Wahrheitswert ist <strong><code>TRUE</code></strong>, es gibt also mindestens zwei Variablennamen, die jetzt identisch sind. An dieser Stelle könnte es passieren, dass man erstmal nicht weiter weiß. Eine Möglichkeit wäre, zu googlen: “r make unique”. So findet man eine Funktion namens <strong><code>make.unique</code></strong>, die es erlaubt, duplizierte Werte in character-Vektoren zu ersetzen, so dass sie einzigartig werden. Unglücklicherweise werden dadurch die Variablennamen wieder länger, als sie sein dürfen:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb94" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb94-1">varnamen_neu2 <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">make.unique</span>(varnamen_neu)</span>
<span id="cb94-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">any</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">nchar</span>(varnamen_neu2)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] TRUE</code></pre>
</div>
</div>
<p>Tatsächlich gibt es für dieses Problem also keine einfache, “triviale” Lösung. Man könnte entweder vollständig willkürliche Namen vergeben, die dann aber keine Rückschlüsse auf die ursprüngliche Variablenbedeutung mehr zulassen, oder man experimentiert, beruhend auf folgenden Überlegungen: <strong><code>make.unique</code></strong> fügt an nicht-unique Variablennamen einen Punkt und eine laufende Nummer an, also zwei zusätzliche Zeichen. Also dürfte man nur die ersten 4 Zeichen der Variablennamen beibehalten:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb96" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb96-1">varnamen_neu3 <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">make.unique</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">substr</span>(varnamen, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>))</span>
<span id="cb96-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">any</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">nchar</span>(varnamen_neu3)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] FALSE</code></pre>
</div>
<div class="sourceCode cell-code" id="cb98" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb98-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">any</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">duplicated</span>(varnamen_neu3))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] FALSE</code></pre>
</div>
<div class="sourceCode cell-code" id="cb100" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb100-1">varnamen_neu3</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code> [1] "idst"   "idcl"   "D101"   "D101.1" "D101.2" "D101.3" "D102"   "D103"  
 [9] "sex"    "M155"   "M156"   "M157"   "M157.1" "M157.2" "hisc"   "pari"  </code></pre>
</div>
</div>
<p>Hundertprotentig schön ist auch diese Variante nicht, weil nun auch von bereits einzigartigen Variablennamen nur die ersten vier Zeichen übrig behalten worden sind, obwohl es hier ja hätten sechs sein dürfen. Sofern eine solche Operation im Arbeitsalltag also häufiger gebraucht wird, wäre es günstig, sich dafür eine eigene Funktion zu schreiben, um diese Prozesse weniger umständlich zu gestalten. Dazu aber an anderer Stelle mehr.</p>
</section>
</section>
<section id="fehlende-werte-missing-values" class="level2">
<h2 class="anchored" data-anchor-id="fehlende-werte-missing-values">5. Fehlende Werte (missing values)</h2>
<p>Fehlende Werte werden in R mit <strong><code>NA</code></strong> (not available) gekennzeichnet. Im Folgenden geht es nicht darum, wie in statistischen Analysen mit fehlenden Werten umgegangen werden kann, sondern wie man sie in R technisch behandelt. Dazu soll beispielhaft ein numerischer Vektor betrachtet werden, der fehlende Werte enthält:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb102" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb102-1">numvek <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rnorm</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">20</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb102-2">numvek[<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">9</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">19</span>)] <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NA</span></span></code></pre></div>
</div>
<section id="die-häufigsten-im-zusammenhang-mit-fehlenden-werten-gebräuchlichen-funktionen-sind" class="level4">
<h4 class="anchored" data-anchor-id="die-häufigsten-im-zusammenhang-mit-fehlenden-werten-gebräuchlichen-funktionen-sind">Die häufigsten im Zusammenhang mit fehlenden Werten gebräuchlichen Funktionen sind:</h4>
<ul>
<li><p><strong><code>is.na()</code></strong> gibt einen Vektor der Klasse <strong><code>logical</code></strong> zurück, dessen Wert <strong><code>TRUE</code></strong> ist, wenn es sich um einen fehlenden Wert handelt: <strong><code>is.na(numvek)</code></strong>. Wenn man lediglich wissen, ob es überhaupt irgendwelche fehlenden Werte gibt, kann man das mit <strong><code>any()</code></strong> verbinden: <strong><code>any(is.na(numvek))</code></strong>. Wenn man wissen will, an welcher Stelle die fehlenden Werte stehen, geht <strong><code>which(is.na(numvek))</code></strong></p></li>
<li><p><strong>Achtung!</strong> Anders als man vielleicht vermuten würde, funktioniert <strong><code>which(numvek == NA)</code></strong> nicht!</p></li>
<li><p>Wenn ich nur die beobachteten Werte aus <strong><code>numvek</code></strong> extrahieren möchte, also alles ausschließen, was <strong><code>NA</code></strong> ist, geht das mit <strong><code>na.omit(numvek)</code></strong>. Dieser Vektor ist mit nur noch 16 Elementen folglich kürzer als der ursprüngliche mit 20 Elementen: <strong><code>length(na.omit(numvek))</code></strong></p></li>
<li><p>Möchte man sich beispielsweise den Mittelwert eines Vektors anzeigen lassen, der fehlende Werte enthält, ist das Ergebnis ebenfalls <strong><code>NA</code></strong>: <strong><code>mean(numvek)</code></strong>. Meist will man jedoch einfach das arithmetisches Mittel aller <em>beobachteten</em> Werte. Dazu könnte man einfach den Mittelwert unter Ausschluss der fehlenden Werte bestimmen: <strong><code>mean(na.omit(numvek))</code></strong>. Das ist dasselbe, wie wenn man in der Funktion <strong><code>mean()</code></strong> mit einem zusätzlichen Argument definiert, dass fehlende Werte vor der Berechnung ausgeschlossen werden sollen: <strong><code>mean(numvek, na.rm = TRUE)</code></strong>. Man sieht wieder, dass verschiedene syntaktische Umsetzungen zu dem gewünschten Ergebnis führen können. Das logische Argument <strong><code>na.rm</code></strong> ist für viele Funktionen definiert, so etwa <strong><code>var()</code></strong>, <strong><code>sd()</code></strong>, <strong><code>lm()</code></strong>, <strong><code>glm()</code></strong>, etc.</p></li>
</ul>
</section>
<section id="fehlende-werte-in-character-vektoren" class="level4">
<h4 class="anchored" data-anchor-id="fehlende-werte-in-character-vektoren">Fehlende Werte in character-Vektoren</h4>
<p>Hier gilt im Grunde dasselbe wie für numerische Vektoren. Auf ein paar Fallstricke soll hingewiesen werden:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb103" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb103-1">charvek <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"France"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Belgium"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Poland"</span>, <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NA</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Denmark"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"NA"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Austria"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">""</span>)</span>
<span id="cb103-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">which</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">is.na</span>(charvek))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] 4</code></pre>
</div>
</div>
<p>Auch in character-Vektoren müssen fehlende Werte <em>ohne</em> hochgestellte Anführungszeichen eingetragen werden; der sechste Wert <strong><code>"NA"</code></strong> wird nicht als fehlender Wert verstanden. Ebensowenig der achte Wert, der einfach ein leerer String ist. Letzteres ist insofern relevant, dass, wenn man etwa csv-Dateien mit R einliest, leere Zellen manchmal als leere Strings eingelesen werden, obwohl man sie eigentlich wie fehlende Werte behandelt wissen will. Um das <strong><code>"NA"</code></strong> und den leeren String in einen wirklichen fehlenden Wert umzuwandeln, kann beispielsweise die <strong><code>recode()</code></strong>-Funktion aus dem Paket <strong><code>car</code></strong> verwendet werden:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb105" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb105-1">charvek_neu <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> car<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">recode</span>(charvek, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"'NA'=NA; ''=NA"</span>)</span>
<span id="cb105-2">charvek_neu</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "France"  "Belgium" "Poland"  NA        "Denmark" NA        "Austria"
[8] NA       </code></pre>
</div>
</div>
</section>
</section>
<section id="gut-zu-wissen" class="level2">
<h2 class="anchored" data-anchor-id="gut-zu-wissen">6. Gut zu wissen</h2>
<p>Den Überblick über die vorhandenen Funktionen und Pakete zu behalten, ist nahezu unmöglich; allein auf CRAN gibt es tausende von R-Paketen. Aus unserer subjektiven Sicht sollen daher die wichtigsten Funktionen, die sich im Laufe des IQB-Lebens als unverzichtbar herausgestellt haben, hier kurz ohne Anspruch auf Vollständigkeit aufgelistet werden. Wo nötig, werden Links für weiterführende Literatur angegeben:</p>


</section>


<div id="quarto-appendix" class="default"><section id="footnotes" class="footnotes footnotes-end-of-document"><h2 class="anchored quarto-appendix-heading">Footnotes</h2>

<ol>
<li id="fn1"><p>Image by <a href="https://unsplash.com/de/@vantaymedia?utm_content=creditCopyText&amp;utm_medium=referral&amp;utm_source=unsplash">Van Tay Media</a> on <a href="https://unsplash.com/de/fotos/frauen-die-laptops-benutzen-9buwiennNqg">Unsplash</a>.↩︎</p></li>
</ol>
</section></div> ]]></description>
  <category>R</category>
  <category>tutorial</category>
  <category>intro</category>
  <guid>https://iqb-research.github.io/IQB-Methods/docs/R_tutorials/R_ws1.html</guid>
  <pubDate>Wed, 12 Mar 2025 14:32:34 GMT</pubDate>
  <media:content url="https://iqb-research.github.io/IQB-Methods/docs/R_tutorials/images/einführung.jpg" medium="image" type="image/jpeg"/>
</item>
</channel>
</rss>
