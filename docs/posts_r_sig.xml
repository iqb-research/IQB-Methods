<?xml version="1.0" encoding="UTF-8"?>
<rss  xmlns:atom="http://www.w3.org/2005/Atom" 
      xmlns:media="http://search.yahoo.com/mrss/" 
      xmlns:content="http://purl.org/rss/1.0/modules/content/" 
      xmlns:dc="http://purl.org/dc/elements/1.1/" 
      version="2.0">
<channel>
<title>IQB Methods Team</title>
<link>https://iqb-research.github.io/IQB-Methods/docs/posts_r_sig.html</link>
<atom:link href="https://iqb-research.github.io/IQB-Methods/docs/posts_r_sig.xml" rel="self" type="application/rss+xml"/>
<description></description>
<generator>quarto-1.6.42</generator>
<lastBuildDate>Thu, 02 Oct 2025 00:00:00 GMT</lastBuildDate>
<item>
  <title>Regular expressions</title>
  <dc:creator>Nicklas Hafiz</dc:creator>
  <link>https://iqb-research.github.io/IQB-Methods/docs/r_sig/25_02_10_regex/</link>
  <description><![CDATA[ 




<p><img src="https://iqb-research.github.io/IQB-Methods/docs/r_sig/25_02_10_regex/expression.jpg" class="img-fluid"><sup>1</sup></p>
<section id="introduction" class="level1">
<h1>Introduction</h1>
<p>Regular expressions is a powerful language for describing patterns within strings. Mostly we need that for extracting certain strings for filtering or manipulation. See <a href="https://r4ds.hadley.nz/regexps">R for Data Science</a> for a whole chapter on this. Also, speaking from experience, ChatGPT is a great resource on this, still it might be helpful to understand the underlying syntax a bit better.</p>
<section id="selecting-patterns" class="level2">
<h2 class="anchored" data-anchor-id="selecting-patterns">Selecting patterns</h2>
<p>In base-R we can use <code>grep()</code> for extracting certain patterns from character vectors:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1">fruits <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Apple"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Banana"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Orange"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Lemon"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Blackberry"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Peach"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"annona"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"peach"</span>)</span>
<span id="cb1-2"></span>
<span id="cb1-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">grep</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"e"</span>, fruits)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] 1 3 4 5 6 8</code></pre>
</div>
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb3-1">fruits[<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">grep</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"e"</span>, fruits)]</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "Apple"      "Orange"     "Lemon"      "Blackberry" "Peach"     
[6] "peach"     </code></pre>
</div>
</div>
<p>In the tidyverse, we can use <code>str_detect()</code>, which is also easily pipeable:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb5-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(tidyverse)</span></code></pre></div>
<div class="cell-output cell-output-stderr">
<pre><code>── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──
✔ dplyr     1.1.4     ✔ readr     2.1.5
✔ forcats   1.0.0     ✔ stringr   1.5.1
✔ ggplot2   3.5.1     ✔ tibble    3.2.1
✔ lubridate 1.9.4     ✔ tidyr     1.3.1
✔ purrr     1.0.2     
── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──
✖ dplyr::filter() masks stats::filter()
✖ dplyr::lag()    masks stats::lag()
ℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors</code></pre>
</div>
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb7-1">iris <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb7-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">filter</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">str_detect</span>(Species, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"set"</span>)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span> </span>
<span id="cb7-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">head</span>()</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>  Sepal.Length Sepal.Width Petal.Length Petal.Width Species
1          5.1         3.5          1.4         0.2  setosa
2          4.9         3.0          1.4         0.2  setosa
3          4.7         3.2          1.3         0.2  setosa
4          4.6         3.1          1.5         0.2  setosa
5          5.0         3.6          1.4         0.2  setosa
6          5.4         3.9          1.7         0.4  setosa</code></pre>
</div>
</div>
</section>
<section id="manipulating-patterns" class="level2">
<h2 class="anchored" data-anchor-id="manipulating-patterns">Manipulating patterns</h2>
<div class="cell">
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb9-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">gsub</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"e"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"a"</span>, fruits)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "Appla"      "Banana"     "Oranga"     "Lamon"      "Blackbarry"
[6] "Paach"      "annona"     "paach"     </code></pre>
</div>
</div>
<p>Or, in tidyverse:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb11-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">str_replace</span>(fruits, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"e"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"a"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "Appla"      "Banana"     "Oranga"     "Lamon"      "Blackbarry"
[6] "Paach"      "annona"     "paach"     </code></pre>
</div>
</div>
<p>With <code>stringr::str_view()</code> we can see how the chosen characters look without having to use <code>grep()</code>:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb13-1">stringr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">str_view</span>(fruits, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"e"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] │ Appl&lt;e&gt;
[3] │ Orang&lt;e&gt;
[4] │ L&lt;e&gt;mon
[5] │ Blackb&lt;e&gt;rry
[6] │ P&lt;e&gt;ach
[8] │ p&lt;e&gt;ach</code></pre>
</div>
</div>
</section>
</section>
<section id="metacharachters" class="level1">
<h1>Metacharachters</h1>
<p>Letters and numbers just represent themselves, but most punctuation characters have their own meaning:</p>
<section id="section" class="level2">
<h2 class="anchored" data-anchor-id="section"><code>.</code></h2>
<p>The point <code>.</code> matches any character. So if we want to extract all fruits with an <code>e</code> and another character following we can do that like so:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb15-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">str_view</span>(fruits, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"e."</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[4] │ L&lt;em&gt;on
[5] │ Blackb&lt;er&gt;ry
[6] │ P&lt;ea&gt;ch
[8] │ p&lt;ea&gt;ch</code></pre>
</div>
</div>
<p>Of course we can use multiple points if necessary:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb17-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">str_view</span>(fruits, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"a..e"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[3] │ Or&lt;ange&gt;</code></pre>
</div>
</div>
</section>
<section id="section-1" class="level2">
<h2 class="anchored" data-anchor-id="section-1"><code>?</code></h2>
<p>With <code>?</code> we can make a pattern optional. In the following example, any letter can preceed or follow the <code>m</code>:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb19" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb19-1">measures <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"10 mm"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"100 m"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"2 km"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"8 cm"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"100 kg"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"80 g"</span>)</span>
<span id="cb19-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">str_extract_all</span>(measures, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">".?m.?"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[[1]]
[1] " mm"

[[2]]
[1] " m"

[[3]]
[1] "km"

[[4]]
[1] "cm"

[[5]]
character(0)

[[6]]
character(0)</code></pre>
</div>
</div>
</section>
<section id="section-2" class="level2">
<h2 class="anchored" data-anchor-id="section-2"><code>+</code></h2>
<p>With the <code>+</code> the pattern has to match at least once (or more often):</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb21" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb21-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">str_extract_all</span>(measures, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"m+"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[[1]]
[1] "mm"

[[2]]
[1] "m"

[[3]]
[1] "m"

[[4]]
[1] "m"

[[5]]
character(0)

[[6]]
character(0)</code></pre>
</div>
</div>
</section>
<section id="section-3" class="level2">
<h2 class="anchored" data-anchor-id="section-3"><code>*</code></h2>
<p>The <code>*</code> makes any number of following matches optional, so the pattern can be repeated any number of times, including 0:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb23" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb23-1">measures[<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">grep</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"m*"</span>, measures)]</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "10 mm"  "100 m"  "2 km"   "8 cm"   "100 kg" "80 g"  </code></pre>
</div>
</div>
</section>
<section id="section-4" class="level2">
<h2 class="anchored" data-anchor-id="section-4"><code>[]</code></h2>
<p>This creates a character class, so any of the included characters can match (or not match, if we put a <code>^</code> in front):</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb25" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb25-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">str_view</span>(fruits, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"a[cn]"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[2] │ B&lt;an&gt;&lt;an&gt;a
[3] │ Or&lt;an&gt;ge
[5] │ Bl&lt;ac&gt;kberry
[6] │ Pe&lt;ac&gt;h
[7] │ &lt;an&gt;nona
[8] │ pe&lt;ac&gt;h</code></pre>
</div>
</div>
<p>This selects all strings including an <code>a</code> followed by either <code>c</code> or <code>n</code>. Alternatively, we can also choose all <code>e</code> followed by a consonant:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb27" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb27-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">str_view</span>(fruits, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"e[^aeiou]"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[4] │ L&lt;em&gt;on
[5] │ Blackb&lt;er&gt;ry</code></pre>
</div>
</div>
<p>Even better, if we want to match all letters:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb29" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb29-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">str_view</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"ca1"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"x3"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"a"</span>), <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"[a-z]"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] │ &lt;c&gt;&lt;a&gt;1
[2] │ &lt;x&gt;3
[3] │ &lt;a&gt;</code></pre>
</div>
</div>
<p>… followed by a number:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb31" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb31-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">str_view</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"ca1"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"x3"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"3a"</span>), <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"[a-z][0-9]"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] │ c&lt;a1&gt;
[2] │ &lt;x3&gt;</code></pre>
</div>
</div>
<p>… also starting with a letter:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb33" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb33-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">str_view</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"ca1"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"x3"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"3a"</span>), <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"^[a-z][0-9]"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[2] │ &lt;x3&gt;</code></pre>
</div>
</div>
</section>
<section id="section-5" class="level2">
<h2 class="anchored" data-anchor-id="section-5"><code>|</code></h2>
<p>This is our ‘or’-symbol:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb35" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb35-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">str_view</span>(fruits, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"an|ea"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[2] │ B&lt;an&gt;&lt;an&gt;a
[3] │ Or&lt;an&gt;ge
[6] │ P&lt;ea&gt;ch
[7] │ &lt;an&gt;nona
[8] │ p&lt;ea&gt;ch</code></pre>
</div>
</div>
</section>
<section id="section-6" class="level2">
<h2 class="anchored" data-anchor-id="section-6"><code>^</code></h2>
<p>Matches the start:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb37" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb37-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">str_view</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"ba"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"ab"</span>), <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"^b"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] │ &lt;b&gt;a</code></pre>
</div>
</div>
</section>
<section id="section-7" class="level2">
<h2 class="anchored" data-anchor-id="section-7"><code>$</code></h2>
<p>Matches the end:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb39" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb39-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">str_view</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"ba"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"ab"</span>), <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"b$"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[2] │ a&lt;b&gt;</code></pre>
</div>
</div>
</section>
<section id="other-predefined-classes" class="level2">
<h2 class="anchored" data-anchor-id="other-predefined-classes">Other predefined classes:</h2>
<ul>
<li><code>\d</code>: Match digit</li>
<li><code>\D</code>: Match anything but digits</li>
<li><code>\s</code>: Match any whitespace</li>
<li><code>\S</code>: Match anything but whitespace</li>
<li><code>\w</code>: Match any “word”-character (letters and numbers)</li>
<li><code>\W</code>: Match any “non-word”-character.</li>
<li>Finally, the function <code>tolower()</code> might be helpful to convert Upper case letters to lower case letters.</li>
</ul>
</section>
<section id="escaping" class="level2">
<h2 class="anchored" data-anchor-id="escaping">Escaping</h2>
<p>If we want to use the actual character instead of its meta-function, we have to escape it (with two <code>\</code>):</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb41" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb41-1">char_vec <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"+?"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"ab"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"34.+"</span>)</span>
<span id="cb41-2"></span>
<span id="cb41-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">str_view</span>(char_vec, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\\</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">+"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] │ &lt;+&gt;?
[3] │ 34.&lt;+&gt;</code></pre>
</div>
</div>
<p>For matching a <code>\</code>, we need to escape it in the string first, and then match it with four <code>\</code>:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb43" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb43-1">x <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"a</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\\</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">b"</span></span>
<span id="cb43-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">str_view</span>(x, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\\\\</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] │ a&lt;\&gt;b</code></pre>
</div>
</div>
</section>
<section id="section-8" class="level2">
<h2 class="anchored" data-anchor-id="section-8"><code>{}</code></h2>
<p><code>{}</code> allows us to specify the number of matches we are looking for:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb45" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb45-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">str_view</span>(fruits, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"p{2}"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] │ A&lt;pp&gt;le</code></pre>
</div>
</div>
<p>Or a minimum number:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb47" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb47-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">str_view</span>(fruits, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"p{1,}"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] │ A&lt;pp&gt;le
[8] │ &lt;p&gt;each</code></pre>
</div>
</div>
</section>
<section id="section-9" class="level2">
<h2 class="anchored" data-anchor-id="section-9"><code>()</code></h2>
<p><code>()</code> can help us to clarify how the meta-expressions should relate to each other:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb49" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb49-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">str_view</span>(fruits, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"(an){2}"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[2] │ B&lt;anan&gt;a</code></pre>
</div>
<div class="sourceCode cell-code" id="cb51" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb51-1"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## Instead of:</span></span>
<span id="cb51-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">str_view</span>(fruits, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"an{2}"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[7] │ &lt;ann&gt;ona</code></pre>
</div>
</div>
<p>In the second example, the <code>{2}</code> relates only to the <code>n</code>, in the first to the <code>an</code> pattern.</p>
</section>
<section id="grouping" class="level2">
<h2 class="anchored" data-anchor-id="grouping">Grouping</h2>
<p>Using paranthesis, we can also create groups which we can use later on in the regex:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb53" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb53-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">str_view</span>(fruits, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"(.)</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\\</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">1"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] │ A&lt;pp&gt;le
[5] │ Blackbe&lt;rr&gt;y
[7] │ a&lt;nn&gt;ona</code></pre>
</div>
</div>
<p>This selects all fruits that have a double letter. With the <code>\\1</code> we use the content of the first <code>()</code>,which can be any letter in this example (but has to be the same as in the first selection). We can also use multiple groups:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb55" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb55-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">str_view</span>(fruits, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"(.)(n)</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\\</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\\</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">2"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[2] │ B&lt;anan&gt;a</code></pre>
</div>
</div>
</section>
</section>
<section id="exercises" class="level1">
<h1>Exercises</h1>
<ol type="1">
<li>What does the following regex code do?</li>
</ol>
<div class="cell">
<div class="sourceCode cell-code" id="cb57" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb57-1">sentences[<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">grep</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"^A"</span>, sentences)]</span></code></pre></div>
</div>
<div class="cell">
<div class="sourceCode cell-code" id="cb58" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb58-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">str_view</span>(sentences, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"[0-9]"</span>)</span></code></pre></div>
</div>
<div class="cell">
<div class="sourceCode cell-code" id="cb59" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb59-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">str_view</span>(sentences, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"^[TA]|y"</span>)</span></code></pre></div>
</div>
<div class="cell">
<div class="sourceCode cell-code" id="cb60" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb60-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">str_view</span>(sentences, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"(.*[n]){5}"</span>)</span></code></pre></div>
</div>
<ol start="2" type="1">
<li>Extract all sentences that end with <code>ing.</code> from <code>string::sentences</code>.</li>
</ol>
<div class="callout callout-style-default callout-caution callout-titled">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-1-contents" aria-controls="callout-1" aria-expanded="false" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Solution
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-1" class="callout-1-contents callout-collapse collapse">
<div class="callout-body-container callout-body">
<div class="cell">
<div class="sourceCode cell-code" id="cb61" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb61-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">grep</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"ing</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\\</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">.$"</span>, sentences, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">value =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code> [1] "The source of the huge river is the clear spring."
 [2] "A pot of tea helps to pass the evening."          
 [3] "It snowed, rained, and hailed the same morning."  
 [4] "What joy there is in living."                     
 [5] "The pearl was worn in a thin silver ring."        
 [6] "Bail the boat to stop it from sinking."           
 [7] "The map had an X that meant nothing."             
 [8] "Try to trace the fine lines of the painting."     
 [9] "We now have a new base for shipping."             
[10] "The black trunk fell from the landing."           
[11] "Set the piece here and say nothing."              
[12] "The first part of the plan needs changing."       </code></pre>
</div>
</div>
</div>
</div>
</div>
<ol start="3" type="1">
<li>Count the number of occurrences of each letter in <code>sentences</code>.</li>
</ol>
<div class="callout callout-style-default callout-caution callout-titled">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-2-contents" aria-controls="callout-2" aria-expanded="false" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Solution
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-2" class="callout-2-contents callout-collapse collapse">
<div class="callout-body-container callout-body">
<div class="cell">
<div class="sourceCode cell-code" id="cb63" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb63-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">str_extract_all</span>(sentences, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\\</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">w"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb63-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">unlist</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb63-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tolower</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb63-4">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">table</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb63-5">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">as.data.frame</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb63-6">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">arrange</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">desc</span>(Freq))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>   . Freq
1  e 3050
2  t 2350
3  a 1751
4  h 1655
5  s 1585
6  o 1562
7  r 1356
8  n 1220
9  i 1204
10 l  999
11 d  949
12 c  604
13 w  601
14 f  563
15 u  528
16 p  491
17 g  425
18 m  402
19 b  370
20 k  327
21 y  299
22 v  140
23 j   39
24 z   30
25 x   27
26 q   18</code></pre>
</div>
</div>
</div>
</div>
</div>
<ol start="4" type="1">
<li>Extract all numbers:</li>
</ol>
<div class="cell">
<div class="sourceCode cell-code" id="cb65" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb65-1">recipe <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"2 Apples"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"6 Bananas"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"500 g sugar"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"1 kg flour"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"500 ml milk"</span>)</span></code></pre></div>
</div>
<div class="callout callout-style-default callout-caution callout-titled">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-3-contents" aria-controls="callout-3" aria-expanded="false" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Solution
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-3" class="callout-3-contents callout-collapse collapse">
<div class="callout-body-container callout-body">
<div class="cell">
<div class="sourceCode cell-code" id="cb66" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb66-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">str_extract_all</span>(recipe, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\\</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">d+"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[[1]]
[1] "2"

[[2]]
[1] "6"

[[3]]
[1] "500"

[[4]]
[1] "1"

[[5]]
[1] "500"</code></pre>
</div>
<div class="sourceCode cell-code" id="cb68" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb68-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">str_extract_all</span>(recipe, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"[0-9]+"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[[1]]
[1] "2"

[[2]]
[1] "6"

[[3]]
[1] "500"

[[4]]
[1] "1"

[[5]]
[1] "500"</code></pre>
</div>
</div>
</div>
</div>
</div>
<ol start="5" type="1">
<li>Extract all Sentences from <code>sentences</code> that include a double letter.</li>
</ol>
<div class="callout callout-style-default callout-caution callout-titled">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-4-contents" aria-controls="callout-4" aria-expanded="false" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Solution
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-4" class="callout-4-contents callout-collapse collapse">
<div class="callout-body-container callout-body">
<div class="cell">
<div class="sourceCode cell-code" id="cb70" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb70-1">sentences[<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">grep</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"(.)</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\\</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">1"</span>, sentences)]</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>  [1] "The birch canoe slid on the smooth planks."               
  [2] "Glue the sheet to the dark blue background."              
  [3] "It's easy to tell the depth of a well."                   
  [4] "The hogs were fed chopped corn and garbage."              
  [5] "A large size in stockings is hard to sell."               
  [6] "Kick the ball straight and follow through."               
  [7] "Help the woman get back to her feet."                     
  [8] "A pot of tea helps to pass the evening."                  
  [9] "The soft cushion broke the man's fall."                   
 [10] "The salt breeze came across from the sea."                
 [11] "The girl at the booth sold fifty bonds."                  
 [12] "The small pup gnawed a hole in the sock."                 
 [13] "The fish twisted and turned on the bent hook."            
 [14] "Press the pants and sew a button on the vest."            
 [15] "The beauty of the view stunned the young boy."            
 [16] "Her purse was full of useless trash."                     
 [17] "The colt reared and threw the tall rider."                
 [18] "Wipe the grease off his dirty face."                      
 [19] "The stray cat gave birth to kittens."                     
 [20] "The meal was cooked before the bell rang."                
 [21] "The ship was torn apart on the sharp reef."               
 [22] "Sickness kept him home the third week."                   
 [23] "The wide road shimmered in the hot sun."                  
 [24] "The lazy cow lay in the cool grass."                      
 [25] "The rope will bind the seven books at once."              
 [26] "Mesh wire keeps chicks inside."                           
 [27] "The frosty air passed through the coat."                  
 [28] "The crooked maze failed to fool the mouse."               
 [29] "Adding fast leads to wrong sums."                         
 [30] "A saw is a tool used for making boards."                  
 [31] "The wagon moved on well oiled wheels."                    
 [32] "March the soldiers past the next hill."                   
 [33] "A cup of sugar makes sweet fudge."                        
 [34] "A small creek cut across the field."                      
 [35] "Cars and busses stalled in snow drifts."                  
 [36] "The set of china hit the floor with a crash."             
 [37] "The walled town was seized without a fight."              
 [38] "The lease ran out in sixteen weeks."                      
 [39] "A tame squirrel makes a nice pet."                        
 [40] "The horn of the car woke the sleeping cop."               
 [41] "The fruit peel was cut in thick slices."                  
 [42] "The Navy attacked the big task force."                    
 [43] "See the cat glaring at the scared mouse."                 
 [44] "The hat brim was wide and too droopy."                    
 [45] "The grass curled around the fence post."                  
 [46] "Always close the barn door tight."                        
 [47] "The slush lay deep along the street."                     
 [48] "A pound of sugar costs more than eggs."                   
 [49] "The play seems dull and quite stupid."                    
 [50] "The bill was paid every third week."                      
 [51] "Open the crate but don't break the glass."                
 [52] "Add the sum to the product of these three."               
 [53] "The ripe taste of cheese improves with age."              
 [54] "Act on these orders with great speed."                    
 [55] "The bark of the pine tree was shiny and dark."            
 [56] "Leaves turn brown and yellow in the fall."                
 [57] "The pennant waved when the wind blew."                    
 [58] "Hemp is a weed found in parts of the tropics."            
 [59] "Type out three lists of orders."                          
 [60] "The harder he tried the less he got done."                
 [61] "The boss ran the show with a watchful eye."               
 [62] "The cup cracked and spilled its contents."                
 [63] "Paste can cleanse the most dirty brass."                  
 [64] "The slang word for raw whiskey is booze."                 
 [65] "The wharf could be seen at the farther shore."            
 [66] "Feel the heat of the weak dying flame."                   
 [67] "The tiny girl took off her hat."                          
 [68] "A cramp is no small danger on a swim."                    
 [69] "Two plus seven is less than ten."                         
 [70] "The glow deepened in the eyes of the sweet girl."         
 [71] "Clothes and lodging are free to new men."                 
 [72] "Guess the result from the first scores."                  
 [73] "Pure bred poodles have curls."                            
 [74] "The tree top waved in a graceful way."                    
 [75] "The spot on the blotter was made by green ink."           
 [76] "Mud was spattered on the front of his white shirt."       
 [77] "The empty flask stood on the tin tray."                   
 [78] "A speedy man can beat this track mark."                   
 [79] "The coffee stand is too high for the couch."              
 [80] "The pencils have all been used."                          
 [81] "Drop the two when you add the figures."                   
 [82] "Wood is best for making toys and blocks."                 
 [83] "The office paint was a dull, sad tan."                    
 [84] "He knew the skill of the great young actress."            
 [85] "A rag will soak up spilled water."                        
 [86] "A shower of dirt fell from the hot pipes."                
 [87] "Steam hissed from the broken valve."                      
 [88] "The child almost hurt the small dog."                     
 [89] "Torn scraps littered the stone floor."                    
 [90] "Sunday is the best part of the week."                     
 [91] "The doctor cured him with these pills."                   
 [92] "The new girl was fired today at noon."                    
 [93] "They felt gay when the ship arrived in port."             
 [94] "Add the store's account to the last cent."                
 [95] "Acid burns holes in wool cloth."                          
 [96] "Eight miles of woodland burned to waste."                 
 [97] "The third act was dull and tired the players."            
 [98] "A young child should not suffer fright."                  
 [99] "Add the column and put the sum here."                     
[100] "We admire and love a good cook."                          
[101] "There the flood mark is ten inches."                      
[102] "The fruit of a fig tree is apple shaped."                 
[103] "The paper box is full of thumb tacks."                    
[104] "Sell your gift to a buyer at a good gain."                
[105] "The petals fall with the next puff of wind."              
[106] "Bring your best compass to the third class."              
[107] "The brown house was on fire to the attic."                
[108] "A blue crane is a tall wading bird."                      
[109] "A fresh start will work such wonders."                    
[110] "The hostess taught the new maid to serve."                
[111] "He wrote his last novel there at the inn."                
[112] "Even the worst will beat his low score."                  
[113] "The loss of the second ship was hard to take."            
[114] "The fly made its way along the wall."                     
[115] "Do that with a wooden stick."                             
[116] "The doorknob was made of bright clean brass."             
[117] "The wreck occurred by the bank on Main Street."           
[118] "Schools for ladies teach charm and grace."                
[119] "The lamp shone with a steady green flame."                
[120] "They took the axe and the saw to the forest."             
[121] "The ancient coin was quite dull and worn."                
[122] "The shaky barn fell with a loud crash."                   
[123] "Jazz and swing fans like fast music."                     
[124] "Rake the rubbish up and then burn it."                    
[125] "Slash the gold cloth into fine ribbons."                  
[126] "They are pushed back each time they attack."              
[127] "Whitings are small fish caught in nets."                  
[128] "Jerk the rope and the bell rings weakly."                 
[129] "A waxed floor makes us lose balance."                     
[130] "On the islands the sea breeze is soft and mild."          
[131] "The play began as soon as we sat down."                   
[132] "This will lead the world to more sound and fury."         
[133] "Add salt before you fry the egg."                         
[134] "The birch looked stark white and lonesome."               
[135] "The box is held by a bright red snapper."                 
[136] "To make pure ice, you freeze water."                      
[137] "The first worm gets snapped early."                       
[138] "Jump the fence and hurry up the bank."                    
[139] "Yell and clap as the curtain slides back."                
[140] "They are men who walk the middle of the road."            
[141] "In some form or other we need fun."                       
[142] "The prince ordered his head chopped off."                 
[143] "Ducks fly north but lack a compass."                      
[144] "Fruit flavors are used in fizz drinks."                   
[145] "These pills do less good than others."                    
[146] "Canned pears lack full flavor."                           
[147] "Carry the pail to the wall and spill it there."           
[148] "The rude laugh filled the empty room."                    
[149] "High seats are best for football fans."                   
[150] "A dash of pepper spoils beef stew."                       
[151] "A zestful food is the hot-cross bun."                     
[152] "The horse trotted around the field at a brisk pace."      
[153] "The red tape bound the smuggled food."                    
[154] "Look in the corner to find the tan shirt."                
[155] "The cold drizzle will halt the bond drive."               
[156] "The junk yard had a mouldy smell."                        
[157] "The flint sputtered and lit a pine torch."                
[158] "All sat frozen and watched the screen."                   
[159] "To reach the end he needs much courage."                  
[160] "A ridge on a smooth surface is a bump or flaw."           
[161] "Hedge apples may stain your hands green."                 
[162] "The mute muffled the high tones of the horn."             
[163] "The heap of fallen leaves was set on fire."               
[164] "His shirt was clean but one button was gone."             
[165] "The barrel of beer was a brew of malt and hops."          
[166] "The plant grew large and green in the window."            
[167] "The beam dropped down on the workman's head."             
[168] "Pink clouds floated with the breeze."                     
[169] "She danced like a swan, tall and graceful."               
[170] "The tube was blown and the tire flat and useless."        
[171] "It is late morning on the old wall clock."                
[172] "Let's all join as we sing the last chorus."               
[173] "The last switch cannot be turned off."                    
[174] "The fight will end in just six minutes."                  
[175] "The store walls were lined with colored frocks."          
[176] "The peace league met to discuss their plans."             
[177] "The quick fox jumped on the sleeping cat."                
[178] "The nozzle of the fire hose was bright brass."            
[179] "Screw the round cap on as tight as needed."               
[180] "Fill the ink jar with sticky glue."                       
[181] "We need grain to keep our mules healthy."                 
[182] "The crunch of feet in the snow was the only sound."       
[183] "The copper bowl shone in the sun's rays."                 
[184] "Boards will warp unless kept dry."                        
[185] "The plush chair leaned against the wall."                 
[186] "Glass will clink when struck by metal."                   
[187] "Bathe and relax in the cool green grass."                 
[188] "Nine rows of soldiers stood in a line."                   
[189] "The beach is dry and shallow at low tide."                
[190] "The kitten chased the dog down the street."               
[191] "Pages bound in cloth make a book."                        
[192] "Women form less than half of the group."                  
[193] "A gem in the rough needs work to polish."                 
[194] "He used the lathe to make brass objects."                 
[195] "The clan gathered on each dull night."                    
[196] "Tack the strip of carpet to the worn floor."              
[197] "Each penny shone like new."                               
[198] "The man went to the woods to gather sticks."              
[199] "The logs fell and tumbled into the clear stream."         
[200] "Brass rings are sold by these natives."                   
[201] "It takes a good trap to capture a bear."                  
[202] "Feed the white mouse some flower seeds."                  
[203] "The thaw came early and freed the stream."                
[204] "He took the lead and kept it the whole distance."         
[205] "The key you designed will fit the lock."                  
[206] "Plead to the council to free the poor thief."             
[207] "Better hash is made of rare beef."                        
[208] "Tend the sheep while the dog wanders."                    
[209] "A sash of gold silk will trim her dress."                 
[210] "A siege will crack the strong defense."                   
[211] "Grape juice and water mix well."                          
[212] "Fake stones shine but cost little."                       
[213] "Much of the story makes good sense."                      
[214] "A lathe cuts and trims any wood."                         
[215] "His hip struck the knee of the next player."              
[216] "The stale smell of old beer lingers."                     
[217] "The desk was firm on the shaky floor."                    
[218] "Beef is scarcer than some lamb."                          
[219] "Raise the sail and steer the ship northward."             
[220] "No cement will hold hard wood."                           
[221] "We now have a new base for shipping."                     
[222] "The sheep were led home by a dog."                        
[223] "Three for a dime, the young peddler cried."               
[224] "The sense of smell is better than that of touch."         
[225] "No hardship seemed to make him sad."                      
[226] "The news struck doubt into restless minds."               
[227] "Once we stood beside the shore."                          
[228] "A chink in the wall allowed a draft to blow."             
[229] "He takes the oath of office each March."                  
[230] "The sand drifts over the sills of the old house."         
[231] "The point of the steel pen was bent and twisted."         
[232] "There is a lag between thought and act."                  
[233] "Seed is needed to plant the spring corn."                 
[234] "The chap slipped into the crowd and was lost."            
[235] "Hats are worn to tea and not to dinner."                  
[236] "Screen the porch with woven straw mats."                  
[237] "This horse will nose his way to the finish."              
[238] "The dry wax protects the deep scratch."                   
[239] "He picked up the dice for a second roll."                 
[240] "These coins will be needed to pay his debt."              
[241] "The nag pulled the frail cart along."                     
[242] "The smell of burned rags itches my nose."                 
[243] "New pants lack cuffs and pockets."                        
[244] "The marsh will freeze when cold enough."                  
[245] "The bloom of the rose lasts a few days."                  
[246] "Bottles hold four kinds of rum."                          
[247] "He wheeled the bike past the winding road."               
[248] "A clean neck means a neat collar."                        
[249] "The couch cover and hall drapes were blue."               
[250] "The stems of the tall glasses cracked and broke."         
[251] "The wall phone rang loud and often."                      
[252] "The clothes dried on a thin wooden rack."                 
[253] "The cleat sank deeply into the soft turf."                
[254] "The bills were mailed promptly on the tenth of the month."
[255] "To have is better than to wait and hope."                 
[256] "The price is fair for a good antique clock."              
[257] "The bunch of grapes was pressed into wine."               
[258] "He sent the figs, but kept the ripe cherries."            
[259] "The hinge on the door creaked with old age."              
[260] "The screen before the fire kept in the sparks."           
[261] "Fly by night and you waste little time."                  
[262] "Thick glasses helped him read the print."                 
[263] "The chair looked strong but had no bottom."               
[264] "A fur muff is stylish once more."                         
[265] "The tin box held priceless stones."                       
[266] "We need an end of all such matter."                       
[267] "The case was puzzling to the old and wise."               
[268] "The youth drove with zest, but little skill."             
[269] "Five years he lived with a shaggy dog."                   
[270] "Crack the walnut with your sharp side teeth."             
[271] "He offered proof in the form of a large chart."           
[272] "Send the stuff in a thick paper bag."                     
[273] "The three story house was built of stone."                
[274] "In the rear of the ground floor was a large passage."     
[275] "Oats are a food eaten by horse and man."                  
[276] "Their eyelids droop for want of sleep."                   
[277] "Tuck the sheet under the edge of the mat."                
[278] "We like to see clear weather."                            
[279] "The work of the tailor is seen on each side."             
[280] "Take a chance and win a china doll."                      
[281] "The square wooden crate was packed to be shipped."        
[282] "The dusty bench stood by the stone wall."                 
[283] "We dress to suit the weather of most days."               
[284] "A bowl of rice is free with chicken stew."                
[285] "The water in this well is a source of good health."       
[286] "Take shelter in this tent, but keep still."               
[287] "That guy is the writer of a few banned books."            
[288] "The little tales they tell are false."                    
[289] "The door was barred, locked, and bolted as well."         
[290] "Ripe pears are fit for a queen's table."                  
[291] "The kite dipped and swayed, but stayed aloft."            
[292] "The pleasant hours fly by much too soon."                 
[293] "The room was crowded with a wild mob."                    
[294] "This strong arm shall shield your honor."                 
[295] "The beetle droned in the hot June sun."                   
[296] "Press the pedal with your left foot."                     
[297] "The black trunk fell from the landing."                   
[298] "The bank pressed for payment of the debt."                
[299] "A strong bid may scare your partner stiff."               
[300] "Even a just cause needs power to win."                    
[301] "Peep under the tent and see the clowns."                  
[302] "A thing of small note can cause despair."                 
[303] "Flood the mails with requests for this book."             
[304] "A thick coat of black paint covered all."                 
[305] "He wrote his name boldly at the top of the sheet."        
[306] "Dill pickles are sour but taste fine."                    
[307] "Either mud or dust are found at all times."               
[308] "If you mumble your speech will be lost."                  
[309] "At night the alarm roused him from a deep sleep."         
[310] "Fill your pack with bright trinkets for the poor."        
[311] "The small red neon lamp went out."                        
[312] "Clams are small, round, soft, and tasty."                 
[313] "Breathe deep and smell the piny air."                     
[314] "It matters not if he reads these words or those."         
[315] "A toad and a frog are hard to tell apart."                
[316] "A break in the dam almost caused a flood."                
[317] "Paint the sockets in the wall dull green."                
[318] "The child crawled into the dense grass."                  
[319] "Trample the spark, else the flames will spread."          
[320] "A round hole was drilled through the thin board."         
[321] "Footprints showed the path he took up the beach."         
[322] "Prod the old mule with a crooked stick."                  
[323] "It is a band of steel three inches wide."                 
[324] "It was hidden from sight by a mass of leaves and shrubs." 
[325] "The weight of the package was seen on the high scale."    
[326] "Wake and rise, and step into the green outdoors."         
[327] "The green light in the brown box flickered."              
[328] "The brass tube circled the high wall."                    
[329] "Hold the hammer near the end to drive the nail."          
[330] "They took their kids from the public school."             
[331] "Drive the screw straight into the wood."                  
[332] "Keep the hatch tight and the watch constant."             
[333] "Paper will dry out when wet."                             
[334] "A sullen smile gets few friends."                         
[335] "Slide the tray across the glass top."                     
[336] "Light maple makes for a swell room."                      
[337] "Dull stories make her laugh."                             
[338] "A stiff cord will do to fasten your shoe."                
[339] "Choose between the high road and the low."                
[340] "A plea for funds seems to come again."                    
[341] "He lent his coat to the tall gaunt stranger."             
[342] "There is a strong chance it will happen once more."       
[343] "Greet the new guests and leave quickly."                  
[344] "Sweet words work better than fierce."                     
[345] "A thin stripe runs down the middle."                      
[346] "The ram scared the school children off."                  
[347] "The team with the best timing looks good."                
[348] "The farmer swapped his horse for a brown ox."             
[349] "Sit on the perch and tell the others what to do."         
[350] "A steep trail is painful for our feet."                   
[351] "Green moss grows on the northern side."                   
[352] "Tea in thin china has a sweet taste."                     
[353] "Pitch the straw through the door of the stable."          
[354] "The latch on the back gate needed a nail."                
[355] "The goose was brought straight from the old market."      
[356] "A whiff of it will cure the most stubborn cold."          
[357] "She flaps her cape as she parades the street."            
[358] "The loss of the cruiser was a blow to the fleet."         
[359] "Loop the braid to the left and then over."                
[360] "Calves thrive on tender spring grass."                    
[361] "Post no bills on this office wall."                       
[362] "Tear a thin sheet from the yellow pad."                   
[363] "A cruise in warm waters in a sleek yacht is fun."         
[364] "It was done before the boy could see it."                 
[365] "Crouch before you jump or miss the mark."                 
[366] "The square peg will settle in the round hole."            
[367] "Poached eggs and tea must suffice."                       
[368] "Bad nerves are jangled by a door slam."                   
[369] "Ship maps are different from those for planes."           
[370] "Dimes showered down from all sides."                      
[371] "The horse balked and threw the tall rider."               
[372] "The hitch between the horse and cart broke."              
[373] "The roof should be tilted at a sharp slant."              
[374] "A smatter of French is worse than none."                  
[375] "The mule trod the treadmill day and night."               
[376] "Cod is the main business of the north shore."             
[377] "Cap the jar with a tight brass cover."                    
[378] "The poor boy missed the boat again."                      
[379] "A round mat will cover the dull spot."                    
[380] "The first part of the plan needs changing."               
[381] "A good book informs of what we ought to know."            
[382] "The mail comes in three batches per day."                 
[383] "You cannot brew tea in a cold pot."                       
[384] "See the player scoot to third base."                      
[385] "Slide the bill between the two leaves."                   
[386] "We don't like to admit our small faults."                 
[387] "Dig deep in the earth for pirate's gold."                 
[388] "A flat pack takes less luggage space."                    
[389] "Green ice frosted the punch bowl."                        
[390] "A stuffed chair slipped from the moving van."             
[391] "The stitch will serve but needs to be shortened."         
[392] "A thin book fits in the side pocket."                     
[393] "The gloss on top made it unfit to read."                  
[394] "The hail pattered on the burnt brown grass."              
[395] "Seven seals were stamped on great sheets."                
[396] "Our troops are set to strike heavy blows."                
[397] "The store was jammed before the sale could start."        
[398] "It was a bad error on the part of the new judge."         
[399] "One step more and the board will collapse."               
[400] "The pot boiled but the contents failed to jell."          
[401] "The baby puts his right foot in his mouth."               
[402] "The streets are narrow and full of sharp turns."          
[403] "Open your book to the first page."                        
[404] "Fish evade the net and swim off."                         
[405] "Dip the pail once and let it settle."                     
[406] "Will you please answer that phone."                       
[407] "The big red apple fell to the ground."                    
[408] "He sent the boy on a short errand."                       
[409] "Leave now and you will arrive on time."                   
[410] "The corner store was robbed last night."                  
[411] "A gold ring will please most any girl."                   
[412] "The long journey home took a year."                       
[413] "A pink shell was found on the sandy beach."               
[414] "Small children came to see him."                          
[415] "The grass and bushes were wet with dew."                  
[416] "She called his name many times."                          
[417] "When you hear the bell, come quickly."                    </code></pre>
</div>
<div class="sourceCode cell-code" id="cb72" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb72-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">str_view</span>(sentences, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"(.)</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\\</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">1"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code> [1] │ The birch canoe slid on the sm&lt;oo&gt;th planks.
 [2] │ Glue the sh&lt;ee&gt;t to the dark blue background.
 [3] │ It's easy to te&lt;ll&gt; the depth of a we&lt;ll&gt;.
 [8] │ The hogs were fed cho&lt;pp&gt;ed corn and garbage.
[10] │ A large size in stockings is hard to se&lt;ll&gt;.
[14] │ Kick the ba&lt;ll&gt; straight and fo&lt;ll&gt;ow through.
[15] │ Help the woman get back to her f&lt;ee&gt;t.
[16] │ A pot of tea helps to pa&lt;ss&gt; the evening.
[18] │ The soft cushion broke the man's fa&lt;ll&gt;.
[19] │ The salt br&lt;ee&gt;ze came acro&lt;ss&gt; from the sea.
[20] │ The girl at the b&lt;oo&gt;th sold fifty bonds.
[21] │ The sma&lt;ll&gt; pup gnawed a hole in the sock.
[22] │ The fish twisted and turned on the bent h&lt;oo&gt;k.
[23] │ Pre&lt;ss&gt; the pants and sew a bu&lt;tt&gt;on on the vest.
[25] │ The beauty of the view stu&lt;nn&gt;ed the young boy.
[27] │ Her purse was fu&lt;ll&gt; of usele&lt;ss&gt; trash.
[28] │ The colt reared and threw the ta&lt;ll&gt; rider.
[34] │ Wipe the grease o&lt;ff&gt; his dirty face.
[37] │ The stray cat gave birth to ki&lt;tt&gt;ens.
[39] │ The meal was c&lt;oo&gt;ked before the be&lt;ll&gt; rang.
... and 397 more</code></pre>
</div>
</div>
</div>
</div>
</div>
<ol start="6" type="1">
<li>Count the number of occurrences of each word that ends with <code>all</code> in <code>sentences</code>.</li>
</ol>
<div class="callout callout-style-default callout-caution callout-titled">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-5-contents" aria-controls="callout-5" aria-expanded="false" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Solution
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-5" class="callout-5-contents callout-collapse collapse">
<div class="callout-body-container callout-body">
<div class="cell">
<div class="sourceCode cell-code" id="cb74" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb74-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">str_extract_all</span>(sentences, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">" [a-z]+(a)(l)</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\\</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">2"</span> ) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb74-2">  unlist <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb74-3">  table</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>.
     ball      call      fall  football      hall     shall     small     stall 
        1         1         4         1         1         2         9         1 
     tall      wall 
        6        12 </code></pre>
</div>
</div>
</div>
</div>
</div>
<ol start="7" type="1">
<li>Download and read into R the text file <a href="https://github.com/iqb-research/IQB-Methods/blob/main/docs/r_sig/25_02_10_regex/faust.txt"><code>faust.txt</code></a>. Plot the 50 most common words in Goethes Faust.</li>
</ol>
<div class="callout callout-style-default callout-tip callout-titled">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-6-contents" aria-controls="callout-6" aria-expanded="false" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Hint
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-6" class="callout-6-contents callout-collapse collapse">
<div class="callout-body-container callout-body">
<p>Use <code>readLines</code> for reading in <code>.txt</code> files.<br>
You might want to look in the examples of the <code>str_extract_all()</code> documentation. It might help with extracting words!</p>
</div>
</div>
</div>
<div class="callout callout-style-default callout-caution callout-titled">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-7-contents" aria-controls="callout-7" aria-expanded="false" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Solution
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-7" class="callout-7-contents callout-collapse collapse">
<div class="callout-body-container callout-body">
<div class="cell">
<div class="sourceCode cell-code" id="cb76" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb76-1">faust <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">readLines</span>(here<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">here</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"docs"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"r_sig"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"25_02_10_regex"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"faust.txt"</span>), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">warn =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">FALSE</span>)</span>
<span id="cb76-2"></span>
<span id="cb76-3">word_count <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">str_extract_all</span>(faust, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">boundary</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"word"</span>)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb76-4">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">unlist</span>() </span>
<span id="cb76-5">word_count <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tolower</span>(word_count) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb76-6">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">table</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb76-7">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">as.data.frame</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb76-8">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">arrange</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">desc</span>(Freq)) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Sorting by frequency</span></span>
<span id="cb76-9"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">colnames</span>(word_count) <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Word"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Count"</span>)</span>
<span id="cb76-10"></span>
<span id="cb76-11"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Convert Word column to character for proper sorting</span></span>
<span id="cb76-12">word_count<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>Word <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">as.character</span>(word_count<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>Word)</span>
<span id="cb76-13"></span>
<span id="cb76-14"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Plot the top 50 most frequent words</span></span>
<span id="cb76-15"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggplot</span>(word_count  <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">head</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">50</span>), <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">reorder</span>(Word, Count), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> Count)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb76-16">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_col</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">fill =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"steelblue"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb76-17">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">coord_flip</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Flip for better readability</span></span>
<span id="cb76-18">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">theme_minimal</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb76-19">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">labs</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">title =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Top 10 Most Frequent Words in Faust"</span>,</span>
<span id="cb76-20">       <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Words"</span>,</span>
<span id="cb76-21">       <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Count"</span>)</span></code></pre></div>
<div class="cell-output-display">
<div>
<figure class="figure">
<p><img src="https://iqb-research.github.io/IQB-Methods/docs/r_sig/25_02_10_regex/index_files/figure-html/unnamed-chunk-36-1.png" class="img-fluid figure-img" width="672"></p>
</figure>
</div>
</div>
</div>
</div>
</div>
</div>
<ol start="8" type="1">
<li>Extract the email addresses from the following text:</li>
</ol>
<div class="cell">
<div class="sourceCode cell-code" id="cb77" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb77-1">text <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Hello Team,</span></span>
<span id="cb77-2"></span>
<span id="cb77-3"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">Please reach out to John at john.doe96@example.com for project updates. If you have any financial queries, contact Sarah at sarah_finance@company.org.</span></span>
<span id="cb77-4"></span>
<span id="cb77-5"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">For general inquiries, you can email info@business.net or our HR department at hr-department@enterprise.co.uk.</span></span>
<span id="cb77-6"></span>
<span id="cb77-7"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">Best regards,</span></span>
<span id="cb77-8"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">Admin Team (admin@corporate.com)"</span></span></code></pre></div>
</div>
<div class="callout callout-style-default callout-caution callout-titled">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-8-contents" aria-controls="callout-8" aria-expanded="false" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Caution
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-8" class="callout-8-contents callout-collapse collapse">
<div class="callout-body-container callout-body">
<div class="cell">
<div class="sourceCode cell-code" id="cb78" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb78-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">str_extract_all</span>(text, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\\</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">.[a-zA-Z]{2,}"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[[1]]
[1] "john.doe96@example.com"         "sarah_finance@company.org"     
[3] "info@business.net"              "hr-department@enterprise.co.uk"
[5] "admin@corporate.com"           </code></pre>
</div>
</div>
</div>
</div>
</div>


</section>


<div id="quarto-appendix" class="default"><section id="footnotes" class="footnotes footnotes-end-of-document"><h2 class="anchored quarto-appendix-heading">Footnotes</h2>

<ol>
<li id="fn1"><p>Image by <a href="https://unsplash.com/de/@bang_gecko?utm_content=creditCopyText&amp;utm_medium=referral&amp;utm_source=unsplash">verdian chua</a> on <a href="https://unsplash.com/de/fotos/braune-und-weisse-eidechse-auf-brauner-holzoberflache-68hC4vYTSFo?utm_content=creditCopyText&amp;utm_medium=referral&amp;utm_source=unsplash">Unsplash</a>.↩︎</p></li>
</ol>
</section></div> ]]></description>
  <category>R</category>
  <category>R-SIG</category>
  <category>intro</category>
  <category>tutorial</category>
  <guid>https://iqb-research.github.io/IQB-Methods/docs/r_sig/25_02_10_regex/</guid>
  <pubDate>Thu, 02 Oct 2025 00:00:00 GMT</pubDate>
  <media:content url="https://iqb-research.github.io/IQB-Methods/docs/r_sig/25_02_10_regex/expression.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Reproducible manuscripts with Git</title>
  <dc:creator>Nicklas Hafiz</dc:creator>
  <link>https://iqb-research.github.io/IQB-Methods/docs/r_sig/24_09_09_quarto_git/</link>
  <description><![CDATA[ 




<p><img src="https://iqb-research.github.io/IQB-Methods/docs/r_sig/24_09_09_quarto_git/manuscript.jpg" class="img-fluid"><sup>1</sup></p>
<section id="motivation" class="level1">
<h1>Motivation</h1>
<p>We have already talked about <a href="https://iqb-research.github.io/IQB-Methods/docs/r_sig/24_07_15_quarto_1/">reproducible manuscripts with Quarto</a>. Now, one big plus of writing in a markdown language is that it is very easy to use with a version control systems like Git, enabling us to leverage the many advantages of version control.</p>
</section>
<section id="git" class="level1">
<h1>Git</h1>
<p>Git is a version control system. Some advantages:</p>
<ul>
<li><strong>History</strong>: You can see the history of your project, who did what and when. Changes in the project can be easily tracked.</li>
<li><strong>Collaboration</strong>: You can easily work together with others on the same project.</li>
<li><strong>Backup</strong>: Your project lies online, so you don’t have to worry about backing it up.</li>
</ul>
<p>Mainly it is used for working on code. However, markdown files are also text files, and can therefore be easily version controlled with Git. For this text I assume you are already kind of proficient in working with <a href="https://github.com/">GitHub</a>. If not, you can take a look at this <a href="https://docs.github.com/en/get-started/start-your-journey/hello-world">Getting Started Guide</a>.</p>
<div class="callout callout-style-default callout-tip callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Tip
</div>
</div>
<div class="callout-body-container callout-body">
<p>To make your project truly reproducible, you might want to also use <a href="https://iqb-research.github.io/IQB-Methods/docs/r_sig/23_11_06_renv/">renv</a>.<br>
If you want to dive even deeper into reproducible workflows, take a look at <span class="citation" data-cites="peikert2021reproducible">Peikert and Brandmaier (2021)</span>.</p>
</div>
</div>
</section>
<section id="quarto-git" class="level1">
<h1>Quarto + Git</h1>
<p>Generally, there isn’t much new stuff here, if you already work with GitHub. You set up your repo and track your R and Quarto files with Git. In light of reproducibility, this is as transparent as we can get. If we use GitHub throughout the whole project, and make the project public, everyone can track what we have done, which decisions we made and why.<br>
We can use Issues to discuss certain points with coauthors and can use Pull Requests and Reviews to discuss changes in the manuscript or analysis.</p>
</section>
<section id="github-actions" class="level1">
<h1>GitHub Actions</h1>
<p>It is considered bad practice to commit rendered documents like PDF or HTML to GitHub. Instead, build them with GitHub Actions. This way, it is always clear what the current version is, and how your code relates to the built output document. GitHub Actions are a way to automate your workflow. You can set up a workflow that runs every time you push to your repository. This can be used to check your code, run tests, or even build your manuscript. The setup is a bit more complex, the complete documentation can be found <a href="https://quarto.org/docs/publishing/github-pages.html">here</a>.<br>
In this section, I’ll present one possible workflow.</p>
<div class="callout callout-style-default callout-warning callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Warning
</div>
</div>
<div class="callout-body-container callout-body">
<p>Even if your repository is private, publishing a document like shown in this workflow will make it public, so in theory everyone can see it.</p>
</div>
</div>
<section id="renv" class="level3">
<h3 class="anchored" data-anchor-id="renv">1. <code>renv</code></h3>
<p>First, you have to <a href="https://iqb-research.github.io/IQB-Methods/docs/r_sig/23_11_06_renv/">setup <code>renv</code></a>.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1">renv<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">init</span>()</span></code></pre></div>
</div>
<p>This will create a <code>.LOCK</code> file containing the package versions and a folder in which your project specific packages are saved.</p>
</section>
<section id="render" class="level3">
<h3 class="anchored" data-anchor-id="render">2. render</h3>
<p>Now you can render your quarto project once, using the Terminal (not the Console):</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb2-1">quarto render</span></code></pre></div>
</div>
<p>Commit and push your changes!</p>
<div class="{callout-tip}">
<p>Don’t commit your output file, like html. You can exclude it from appearing in your git-interface by adding <code>*.html</code> to your <code>.gitignore</code> file.</p>
</div>
</section>
<section id="gh-pages-branch" class="level3">
<h3 class="anchored" data-anchor-id="gh-pages-branch">3. gh-pages branch</h3>
<p>After that, you have to set up a <code>gh-pages</code> branch (make sure you have commited all changes before building the branch), again in the Terminal:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb3-1">git checkout <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">--</span>orphan gh<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>pages</span>
<span id="cb3-2">git reset <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">--</span>hard <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># make sure all changes are committed before running this!</span></span>
<span id="cb3-3">git commit <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">--</span>allow<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>empty <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>m <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Initialising gh-pages branch"</span></span>
<span id="cb3-4">git push origin gh<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>pages</span></code></pre></div>
</div>
<p>Your published content will be build from this branch. You don’t have to touch it after setting it up, the Actions we’ll build will take care of that.</p>
</section>
<section id="publish" class="level3">
<h3 class="anchored" data-anchor-id="publish">4. publish</h3>
<p>Finally, you can publish your quarto document:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb4-1">quarto publish gh<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>pages documentname.qmd</span></code></pre></div>
</div>
</section>
<section id="action" class="level3">
<h3 class="anchored" data-anchor-id="action">5. Action</h3>
<p>To trigger this publishing everytime you push to your main branch on GitHub, build a new directory in your project called <code>.github/workflows</code>. Into this directory, you put a file <code>publish.yml</code> and fill it with the following code:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb5-1">on<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span></span>
<span id="cb5-2">  workflow_dispatch<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span></span>
<span id="cb5-3">  push<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span></span>
<span id="cb5-4">    branches<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> main</span>
<span id="cb5-5"></span>
<span id="cb5-6">name<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> Quarto Publish</span>
<span id="cb5-7"></span>
<span id="cb5-8">jobs<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span></span>
<span id="cb5-9">  build<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>deploy<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span></span>
<span id="cb5-10">    runs<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>on<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> ubuntu<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>latest</span>
<span id="cb5-11">    permissions<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span></span>
<span id="cb5-12">      contents<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> write</span>
<span id="cb5-13">    steps<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span></span>
<span id="cb5-14">      <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> name<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> Check out repository</span>
<span id="cb5-15">        uses<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> actions<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>checkout<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span>v4</span>
<span id="cb5-16"></span>
<span id="cb5-17">      <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> name<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> Set up Quarto</span>
<span id="cb5-18">        uses<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> quarto<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>dev<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>quarto<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>actions<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>setup<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span>v2</span>
<span id="cb5-19"></span>
<span id="cb5-20">      <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> name<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> Install R</span>
<span id="cb5-21">        uses<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> r<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>lib<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>actions<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>setup<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>r<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span>v2</span>
<span id="cb5-22">        with<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span></span>
<span id="cb5-23">          r<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>version<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'4.4.1'</span></span>
<span id="cb5-24"></span>
<span id="cb5-25">      <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> name<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> Install R Dependencies</span>
<span id="cb5-26">        uses<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> r<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>lib<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>actions<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>setup<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>renv<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span>v2</span>
<span id="cb5-27">        with<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span></span>
<span id="cb5-28">          cache<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>version<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb5-29"></span>
<span id="cb5-30">      <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> name<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> Render and Publish</span>
<span id="cb5-31">        uses<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> quarto<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>dev<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>quarto<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>actions<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>publish<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span>v2</span>
<span id="cb5-32">        with<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span></span>
<span id="cb5-33">          target<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> gh<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>pages</span>
<span id="cb5-34">        env<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span></span>
<span id="cb5-35">          GITHUB_TOKEN<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">$</span>{{ secrets.GITHUB_TOKEN }}</span></code></pre></div>
</div>
<div class="callout callout-style-default callout-important callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Important
</div>
</div>
<div class="callout-body-container callout-body">
<p>You need to check the Read and write permissions box under Workflow permissions in the Actions section of your repository Settings.</p>
</div>
</div>
<div class="callout callout-style-default callout-tip callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Tip
</div>
</div>
<div class="callout-body-container callout-body">
<p>You can find the link to the published site under <code>Settings - Pages</code>. Copy it to put in the <code>About</code> field of your repo.</p>
</div>
</div>
<div class="callout callout-style-default callout-note callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Note
</div>
</div>
<div class="callout-body-container callout-body">
<p>There are <a href="https://quarto.org/docs/publishing/github-pages.html#github-action">other workflows</a> available as well.</p>
</div>
</div>
</section>
</section>
<section id="caveats" class="level1">
<h1>Caveats</h1>
<p>Some words of warning: Everything is online. So you should be careful to upload sensitive data. Also, the fact that the whole process would be visible to everyone might feel weird. Still, even if you leave the Repo on private, it still is a great thing!</p>
</section>
<section id="exercises" class="level1">
<h1>Exercises</h1>
<ol type="1">
<li>Set up a GitHub repository for the quarto project you worked on in the last sessions. If you don’t upload your stuff to a cloud.</li>
<li>Make up some small Issue that you can write into the Issue section on GitHub.</li>
<li>Fix this Issue on <strong>a new branch</strong>. Commit the changes, using <code>closes #Issuenumber</code> in the commit message, push everything and open a pull request.</li>
<li>Assign someone from the group as reviewer.</li>
<li>Review a pull-request assigned to you.</li>
<li>Setup a actions workflow that automatically renders your document.</li>
</ol>



</section>


<div id="quarto-appendix" class="default"><section class="quarto-appendix-contents" id="quarto-bibliography"><h2 class="anchored quarto-appendix-heading">References</h2><div id="refs" class="references csl-bib-body hanging-indent" data-entry-spacing="0">
<div id="ref-peikert2021reproducible" class="csl-entry">
Peikert, Aaron, and Andreas M Brandmaier. 2021. <span>“A Reproducible Data Analysis Workflow with r Markdown, Git, Make, and Docker.”</span> <em>Quantitative and Computational Methods in Behavioral Sciences</em>, 1–27.
</div>
</div></section><section id="footnotes" class="footnotes footnotes-end-of-document"><h2 class="anchored quarto-appendix-heading">Footnotes</h2>

<ol>
<li id="fn1"><p>Image by <a href="https://unsplash.com/de/@towfiqu999999?utm_content=creditCopyText&amp;utm_medium=referral&amp;utm_source=unsplash">Towfiqu barbhuiya</a> on <a href="https://unsplash.com/de/fotos/eine-nahaufnahme-eines-papierstapels-auf-einem-tisch-KKHs1e2yiwc?utm_content=creditCopyText&amp;utm_medium=referral&amp;utm_source=unsplash">Unsplash</a>.↩︎</p></li>
</ol>
</section></div> ]]></description>
  <category>R</category>
  <category>quarto</category>
  <category>R-SIG</category>
  <category>git</category>
  <category>intro</category>
  <category>tutorial</category>
  <guid>https://iqb-research.github.io/IQB-Methods/docs/r_sig/24_09_09_quarto_git/</guid>
  <pubDate>Mon, 09 Sep 2024 00:00:00 GMT</pubDate>
  <media:content url="https://iqb-research.github.io/IQB-Methods/docs/r_sig/24_09_09_quarto_git/manuscript.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Reproducible manuscripts with Quarto</title>
  <dc:creator>Nicklas Hafiz</dc:creator>
  <link>https://iqb-research.github.io/IQB-Methods/docs/r_sig/24_07_15_quarto_1/</link>
  <description><![CDATA[ 




<p><img src="https://iqb-research.github.io/IQB-Methods/docs/r_sig/24_07_15_quarto_1/manuscript.jpg" class="img-fluid"><sup>1</sup></p>
<section id="introduction" class="level1">
<h1>Introduction</h1>
<p><a href="https://quarto.org/">Quarto</a> is an open-source scientific and technical publishing system. It allows us to combine code and markdown text to produce reproducible manuscripts that can automatically incorporate and evaluate our code when rendering. We can also build slides and even websites (like the one you are currently on).</p>
</section>
<section id="components" class="level1">
<h1>Components</h1>
<section id="yaml-header" class="level2">
<h2 class="anchored" data-anchor-id="yaml-header">YAML header</h2>
<p>Quarto documents have the ending <code>.qmd</code>.</p>
<p>The YAML header, which begins on the top of the document with <code>---</code>, and also ends with <code>---</code>, contains global options for the document:</p>
<pre><code>---
title: "Reproducible manuscripts with Quarto"
description: "R-SIG 15.07.2024"
author: 
  - name: Nicklas Hafiz
  - affiliation: PhD student at the IQB, Methods team
categories: [R, quarto]
date: 07-15-2024
bibliography: references.bib
csl: apa7.csl
format: pdf
---</code></pre>
<p>An overview of possible YAML-fields can be found <a href="https://quarto.org/docs/reference/formats/pdf.html">here</a>.<br>
Note the <code>format</code> field, which lets us quickly convert our document between <code>pdf</code>, <code>word</code> and <code>html</code>, and also lets us use one of many templates.</p>
</section>
<section id="markdown-text" class="level2">
<h2 class="anchored" data-anchor-id="markdown-text">Markdown text</h2>
<p>The body of the document is written in markdown language. Some expressions:</p>
<ul>
<li><code>#</code> for headers. Add as many <code>#</code> as you like for subheaders.</li>
<li><code>**bold**</code>: <strong>bold</strong></li>
<li><code>*italic*</code>: <strong>italic</strong></li>
<li>``<code>code\</code></li>
<li>Lists: <code>-</code> for bullet points, <code>1.</code> for numbered lists (beware: the line above the list has to be empty)</li>
<li>Linebreaks: Two spaces at the end of a line.</li>
<li>Links: <code>[text](url)</code></li>
</ul>
</section>
<section id="code-chunks" class="level2">
<h2 class="anchored" data-anchor-id="code-chunks">Code chunks</h2>
<p>We can run code in different languages (like R, Julia, Python …) directly from our Quarto-file. In RStudio you can press <code>Strg-Alt-i</code> to insert a new r code chunk.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb2-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(tidyverse)</span></code></pre></div>
<div class="cell-output cell-output-stderr">
<pre><code>── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──
✔ dplyr     1.1.4     ✔ readr     2.1.5
✔ forcats   1.0.0     ✔ stringr   1.5.1
✔ ggplot2   3.5.1     ✔ tibble    3.2.1
✔ lubridate 1.9.4     ✔ tidyr     1.3.1
✔ purrr     1.0.2     
── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──
✖ dplyr::filter() masks stats::filter()
✖ dplyr::lag()    masks stats::lag()
ℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors</code></pre>
</div>
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb4-1">athletes <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">readRDS</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">file =</span> here<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">here</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"raw_data"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"athletes.rds"</span>))</span>
<span id="cb4-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">head</span>(athletes)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>  NOC     ID                  Name Sex Age Height Weight        Team
1 AFG 132181           Najam Yahya   M  NA     NA     NA Afghanistan
2 AFG  87371 Ahmad Jahan Nuristani   M  NA     NA     NA Afghanistan
3 AFG  44977     Mohammad Halilula   M  28    163     57 Afghanistan
4 AFG    502     Ahmad Shah Abouwi   M  NA     NA     NA Afghanistan
5 AFG 109153    Shakar Khan Shakar   M  24     NA     74 Afghanistan
6 AFG  29626  Sultan Mohammad Dost   M  28    168     73 Afghanistan
        Games Year Season      City     Sport
1 1956 Summer 1956 Summer Melbourne    Hockey
2 1948 Summer 1948 Summer    London    Hockey
3 1980 Summer 1980 Summer    Moskva Wrestling
4 1956 Summer 1956 Summer Melbourne    Hockey
5 1964 Summer 1964 Summer     Tokyo Wrestling
6 1960 Summer 1960 Summer      Roma Wrestling
                                    Event Medal      Region
1                     Hockey Men's Hockey  &lt;NA&gt; Afghanistan
2                     Hockey Men's Hockey  &lt;NA&gt; Afghanistan
3 Wrestling Men's Bantamweight, Freestyle  &lt;NA&gt; Afghanistan
4                     Hockey Men's Hockey  &lt;NA&gt; Afghanistan
5 Wrestling Men's Welterweight, Freestyle  &lt;NA&gt; Afghanistan
6 Wrestling Men's Welterweight, Freestyle  &lt;NA&gt; Afghanistan</code></pre>
</div>
</div>
<p>We can tweak the code execution via different <a href="https://quarto.org/docs/computations/execution-options.html">execution options</a>, which are written on top of the chunk:</p>
<div class="sourceCode" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb6-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#| echo: false</span></span>
<span id="cb6-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#| message: false</span></span>
<span id="cb6-3"></span>
<span id="cb6-4"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(tidyverse)</span>
<span id="cb6-5">athletes <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">readRDS</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">file =</span> here<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">here</span>(  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"raw_data"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"athletes.rds"</span>))</span>
<span id="cb6-6"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">head</span>(athletes)</span></code></pre></div>
<p>becomes:</p>
<div class="cell">
<div class="cell-output cell-output-stdout">
<pre><code>  NOC     ID                  Name Sex Age Height Weight        Team
1 AFG 132181           Najam Yahya   M  NA     NA     NA Afghanistan
2 AFG  87371 Ahmad Jahan Nuristani   M  NA     NA     NA Afghanistan
3 AFG  44977     Mohammad Halilula   M  28    163     57 Afghanistan
4 AFG    502     Ahmad Shah Abouwi   M  NA     NA     NA Afghanistan
5 AFG 109153    Shakar Khan Shakar   M  24     NA     74 Afghanistan
6 AFG  29626  Sultan Mohammad Dost   M  28    168     73 Afghanistan
        Games Year Season      City     Sport
1 1956 Summer 1956 Summer Melbourne    Hockey
2 1948 Summer 1948 Summer    London    Hockey
3 1980 Summer 1980 Summer    Moskva Wrestling
4 1956 Summer 1956 Summer Melbourne    Hockey
5 1964 Summer 1964 Summer     Tokyo Wrestling
6 1960 Summer 1960 Summer      Roma Wrestling
                                    Event Medal      Region
1                     Hockey Men's Hockey  &lt;NA&gt; Afghanistan
2                     Hockey Men's Hockey  &lt;NA&gt; Afghanistan
3 Wrestling Men's Bantamweight, Freestyle  &lt;NA&gt; Afghanistan
4                     Hockey Men's Hockey  &lt;NA&gt; Afghanistan
5 Wrestling Men's Welterweight, Freestyle  &lt;NA&gt; Afghanistan
6 Wrestling Men's Welterweight, Freestyle  &lt;NA&gt; Afghanistan</code></pre>
</div>
</div>
<p>We can also define global execution options for the whole ´.qmd´ file in the YAML header:</p>
<pre><code>---
title: "Reproducible manuscripts with Quarto"
description: "R-SIG 15.07.2024"
author: 
  - name: Nicklas Hafiz
  - affiliation: PhD student at the IQB, Methods team
categories: [R, quarto]
date: 07-15-2024
bibliography: references.bib
csl: apa7.csl
format: pdf
execute:
  echo: false
  warning: false
  message: false
---</code></pre>
</section>
<section id="tables" class="level2">
<h2 class="anchored" data-anchor-id="tables">Tables</h2>
<p>Tables can be a bit tricky. The great thing is: once you have styled them, they get updated automatically if some data changes. Also, there are a lot of different packages for building tables in markdown, here are some options:</p>
<section id="markdown" class="level3">
<h3 class="anchored" data-anchor-id="markdown">Markdown</h3>
<p>For some simple tables, the normal markdown syntax might be enough, see <a href="https://quarto.org/docs/authoring/tables.html">here</a>.</p>
<pre><code>| Column 1 | Column 2 | Column 3 |
|----------|----------|----------|
| A1       | B1       | C1       |
| A2       | B2       | C2       |</code></pre>
<table class="caption-top table">
<thead>
<tr class="header">
<th>Column 1</th>
<th>Column 2</th>
<th>Column 3</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>A1</td>
<td>B1</td>
<td>C1</td>
</tr>
<tr class="even">
<td>A2</td>
<td>B2</td>
<td>C2</td>
</tr>
</tbody>
</table>
</section>
<section id="kable" class="level3">
<h3 class="anchored" data-anchor-id="kable">Kable</h3>
<p>With <code>knitr::kable()</code> you can build tables programmatically from code chunks:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb10-1">judo_athletes_ger <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> athletes <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb10-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">filter</span>(Sport <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Judo"</span>, Region <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Germany"</span>, <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">is.na</span>(Medal)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb10-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">select</span>(Year, Name, Sex, Age, Height, Weight, Region, Medal) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb10-4">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">arrange</span>(Year, Sex)</span>
<span id="cb10-5"></span>
<span id="cb10-6">knitr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">kable</span>(judo_athletes_ger)</span></code></pre></div>
<div class="cell-output-display">
<table class="caption-top table table-sm table-striped small">
<colgroup>
<col style="width: 7%">
<col style="width: 38%">
<col style="width: 5%">
<col style="width: 5%">
<col style="width: 10%">
<col style="width: 10%">
<col style="width: 11%">
<col style="width: 10%">
</colgroup>
<thead>
<tr class="header">
<th style="text-align: right;">Year</th>
<th style="text-align: left;">Name</th>
<th style="text-align: left;">Sex</th>
<th style="text-align: right;">Age</th>
<th style="text-align: right;">Height</th>
<th style="text-align: right;">Weight</th>
<th style="text-align: left;">Region</th>
<th style="text-align: left;">Medal</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: right;">1964</td>
<td style="text-align: left;">Wolfgang Hofmann</td>
<td style="text-align: left;">M</td>
<td style="text-align: right;">23</td>
<td style="text-align: right;">177</td>
<td style="text-align: right;">80</td>
<td style="text-align: left;">Germany</td>
<td style="text-align: left;">Silver</td>
</tr>
<tr class="even">
<td style="text-align: right;">1964</td>
<td style="text-align: left;">Klaus Glahn</td>
<td style="text-align: left;">M</td>
<td style="text-align: right;">22</td>
<td style="text-align: right;">187</td>
<td style="text-align: right;">101</td>
<td style="text-align: left;">Germany</td>
<td style="text-align: left;">Bronze</td>
</tr>
<tr class="odd">
<td style="text-align: right;">1972</td>
<td style="text-align: left;">Paul Barth</td>
<td style="text-align: left;">M</td>
<td style="text-align: right;">26</td>
<td style="text-align: right;">181</td>
<td style="text-align: right;">90</td>
<td style="text-align: left;">Germany</td>
<td style="text-align: left;">Bronze</td>
</tr>
<tr class="even">
<td style="text-align: right;">1972</td>
<td style="text-align: left;">Klaus Glahn</td>
<td style="text-align: left;">M</td>
<td style="text-align: right;">30</td>
<td style="text-align: right;">187</td>
<td style="text-align: right;">101</td>
<td style="text-align: left;">Germany</td>
<td style="text-align: left;">Silver</td>
</tr>
<tr class="odd">
<td style="text-align: right;">1972</td>
<td style="text-align: left;">Dietmar Htger</td>
<td style="text-align: left;">M</td>
<td style="text-align: right;">25</td>
<td style="text-align: right;">172</td>
<td style="text-align: right;">70</td>
<td style="text-align: left;">Germany</td>
<td style="text-align: left;">Bronze</td>
</tr>
<tr class="even">
<td style="text-align: right;">1976</td>
<td style="text-align: left;">Gnther Neureuther</td>
<td style="text-align: left;">M</td>
<td style="text-align: right;">20</td>
<td style="text-align: right;">186</td>
<td style="text-align: right;">95</td>
<td style="text-align: left;">Germany</td>
<td style="text-align: left;">Silver</td>
</tr>
<tr class="odd">
<td style="text-align: right;">1980</td>
<td style="text-align: left;">Detlef Ultsch</td>
<td style="text-align: left;">M</td>
<td style="text-align: right;">24</td>
<td style="text-align: right;">170</td>
<td style="text-align: right;">80</td>
<td style="text-align: left;">Germany</td>
<td style="text-align: left;">Bronze</td>
</tr>
<tr class="even">
<td style="text-align: right;">1980</td>
<td style="text-align: left;">Dietmar Lorenz</td>
<td style="text-align: left;">M</td>
<td style="text-align: right;">30</td>
<td style="text-align: right;">180</td>
<td style="text-align: right;">93</td>
<td style="text-align: left;">Germany</td>
<td style="text-align: left;">Gold</td>
</tr>
<tr class="odd">
<td style="text-align: right;">1980</td>
<td style="text-align: left;">Harald Heinke</td>
<td style="text-align: left;">M</td>
<td style="text-align: right;">25</td>
<td style="text-align: right;">178</td>
<td style="text-align: right;">78</td>
<td style="text-align: left;">Germany</td>
<td style="text-align: left;">Bronze</td>
</tr>
<tr class="even">
<td style="text-align: right;">1980</td>
<td style="text-align: left;">Dietmar Lorenz</td>
<td style="text-align: left;">M</td>
<td style="text-align: right;">30</td>
<td style="text-align: right;">180</td>
<td style="text-align: right;">93</td>
<td style="text-align: left;">Germany</td>
<td style="text-align: left;">Bronze</td>
</tr>
<tr class="odd">
<td style="text-align: right;">1980</td>
<td style="text-align: left;">Karl-Heinz Lehmann</td>
<td style="text-align: left;">M</td>
<td style="text-align: right;">23</td>
<td style="text-align: right;">169</td>
<td style="text-align: right;">71</td>
<td style="text-align: left;">Germany</td>
<td style="text-align: left;">Bronze</td>
</tr>
<tr class="even">
<td style="text-align: right;">1984</td>
<td style="text-align: left;">Frank Wieneke</td>
<td style="text-align: left;">M</td>
<td style="text-align: right;">22</td>
<td style="text-align: right;">179</td>
<td style="text-align: right;">78</td>
<td style="text-align: left;">Germany</td>
<td style="text-align: left;">Gold</td>
</tr>
<tr class="odd">
<td style="text-align: right;">1984</td>
<td style="text-align: left;">Arthur Schnabel</td>
<td style="text-align: left;">M</td>
<td style="text-align: right;">35</td>
<td style="text-align: right;">182</td>
<td style="text-align: right;">104</td>
<td style="text-align: left;">Germany</td>
<td style="text-align: left;">Bronze</td>
</tr>
<tr class="even">
<td style="text-align: right;">1984</td>
<td style="text-align: left;">Gnther Neureuther</td>
<td style="text-align: left;">M</td>
<td style="text-align: right;">28</td>
<td style="text-align: right;">186</td>
<td style="text-align: right;">95</td>
<td style="text-align: left;">Germany</td>
<td style="text-align: left;">Bronze</td>
</tr>
<tr class="odd">
<td style="text-align: right;">1988</td>
<td style="text-align: left;">Frank Wieneke</td>
<td style="text-align: left;">M</td>
<td style="text-align: right;">26</td>
<td style="text-align: right;">179</td>
<td style="text-align: right;">78</td>
<td style="text-align: left;">Germany</td>
<td style="text-align: left;">Silver</td>
</tr>
<tr class="even">
<td style="text-align: right;">1988</td>
<td style="text-align: left;">Marcus “Marc” Meiling</td>
<td style="text-align: left;">M</td>
<td style="text-align: right;">26</td>
<td style="text-align: right;">194</td>
<td style="text-align: right;">95</td>
<td style="text-align: left;">Germany</td>
<td style="text-align: left;">Silver</td>
</tr>
<tr class="odd">
<td style="text-align: right;">1988</td>
<td style="text-align: left;">Henry Sthr</td>
<td style="text-align: left;">M</td>
<td style="text-align: right;">28</td>
<td style="text-align: right;">194</td>
<td style="text-align: right;">120</td>
<td style="text-align: left;">Germany</td>
<td style="text-align: left;">Silver</td>
</tr>
<tr class="even">
<td style="text-align: right;">1988</td>
<td style="text-align: left;">Sven Loll</td>
<td style="text-align: left;">M</td>
<td style="text-align: right;">24</td>
<td style="text-align: right;">182</td>
<td style="text-align: right;">71</td>
<td style="text-align: left;">Germany</td>
<td style="text-align: left;">Silver</td>
</tr>
<tr class="odd">
<td style="text-align: right;">1988</td>
<td style="text-align: left;">Torsten Brcht (Oehmigen-)</td>
<td style="text-align: left;">M</td>
<td style="text-align: right;">24</td>
<td style="text-align: right;">178</td>
<td style="text-align: right;">78</td>
<td style="text-align: left;">Germany</td>
<td style="text-align: left;">Bronze</td>
</tr>
<tr class="even">
<td style="text-align: right;">1992</td>
<td style="text-align: left;">Richard Trautmann</td>
<td style="text-align: left;">M</td>
<td style="text-align: right;">23</td>
<td style="text-align: right;">168</td>
<td style="text-align: right;">65</td>
<td style="text-align: left;">Germany</td>
<td style="text-align: left;">Bronze</td>
</tr>
<tr class="odd">
<td style="text-align: right;">1992</td>
<td style="text-align: left;">Udo Gnther Quellmalz</td>
<td style="text-align: left;">M</td>
<td style="text-align: right;">25</td>
<td style="text-align: right;">175</td>
<td style="text-align: right;">65</td>
<td style="text-align: left;">Germany</td>
<td style="text-align: left;">Bronze</td>
</tr>
<tr class="even">
<td style="text-align: right;">1996</td>
<td style="text-align: left;">Johanna Hagn</td>
<td style="text-align: left;">F</td>
<td style="text-align: right;">23</td>
<td style="text-align: right;">168</td>
<td style="text-align: right;">NA</td>
<td style="text-align: left;">Germany</td>
<td style="text-align: left;">Bronze</td>
</tr>
<tr class="odd">
<td style="text-align: right;">1996</td>
<td style="text-align: left;">Udo Gnther Quellmalz</td>
<td style="text-align: left;">M</td>
<td style="text-align: right;">29</td>
<td style="text-align: right;">175</td>
<td style="text-align: right;">65</td>
<td style="text-align: left;">Germany</td>
<td style="text-align: left;">Gold</td>
</tr>
<tr class="even">
<td style="text-align: right;">1996</td>
<td style="text-align: left;">Frank Mller</td>
<td style="text-align: left;">M</td>
<td style="text-align: right;">25</td>
<td style="text-align: right;">189</td>
<td style="text-align: right;">125</td>
<td style="text-align: left;">Germany</td>
<td style="text-align: left;">Bronze</td>
</tr>
<tr class="odd">
<td style="text-align: right;">1996</td>
<td style="text-align: left;">Richard Trautmann</td>
<td style="text-align: left;">M</td>
<td style="text-align: right;">27</td>
<td style="text-align: right;">168</td>
<td style="text-align: right;">65</td>
<td style="text-align: left;">Germany</td>
<td style="text-align: left;">Bronze</td>
</tr>
<tr class="even">
<td style="text-align: right;">1996</td>
<td style="text-align: left;">Marko Spittka</td>
<td style="text-align: left;">M</td>
<td style="text-align: right;">25</td>
<td style="text-align: right;">179</td>
<td style="text-align: right;">88</td>
<td style="text-align: left;">Germany</td>
<td style="text-align: left;">Bronze</td>
</tr>
<tr class="odd">
<td style="text-align: right;">2000</td>
<td style="text-align: left;">Anna-Maria Gradante</td>
<td style="text-align: left;">F</td>
<td style="text-align: right;">23</td>
<td style="text-align: right;">154</td>
<td style="text-align: right;">48</td>
<td style="text-align: left;">Germany</td>
<td style="text-align: left;">Bronze</td>
</tr>
<tr class="even">
<td style="text-align: right;">2004</td>
<td style="text-align: left;">Yvonne Bnisch</td>
<td style="text-align: left;">F</td>
<td style="text-align: right;">23</td>
<td style="text-align: right;">168</td>
<td style="text-align: right;">61</td>
<td style="text-align: left;">Germany</td>
<td style="text-align: left;">Gold</td>
</tr>
<tr class="odd">
<td style="text-align: right;">2004</td>
<td style="text-align: left;">Julia Matijass</td>
<td style="text-align: left;">F</td>
<td style="text-align: right;">30</td>
<td style="text-align: right;">161</td>
<td style="text-align: right;">48</td>
<td style="text-align: left;">Germany</td>
<td style="text-align: left;">Bronze</td>
</tr>
<tr class="even">
<td style="text-align: right;">2004</td>
<td style="text-align: left;">Annett Bhm</td>
<td style="text-align: left;">F</td>
<td style="text-align: right;">24</td>
<td style="text-align: right;">179</td>
<td style="text-align: right;">83</td>
<td style="text-align: left;">Germany</td>
<td style="text-align: left;">Bronze</td>
</tr>
<tr class="odd">
<td style="text-align: right;">2004</td>
<td style="text-align: left;">Michael Jurack</td>
<td style="text-align: left;">M</td>
<td style="text-align: right;">25</td>
<td style="text-align: right;">190</td>
<td style="text-align: right;">100</td>
<td style="text-align: left;">Germany</td>
<td style="text-align: left;">Bronze</td>
</tr>
<tr class="even">
<td style="text-align: right;">2008</td>
<td style="text-align: left;">Ole Bischof</td>
<td style="text-align: left;">M</td>
<td style="text-align: right;">28</td>
<td style="text-align: right;">180</td>
<td style="text-align: right;">81</td>
<td style="text-align: left;">Germany</td>
<td style="text-align: left;">Gold</td>
</tr>
<tr class="odd">
<td style="text-align: right;">2012</td>
<td style="text-align: left;">Kerstin Thiele</td>
<td style="text-align: left;">F</td>
<td style="text-align: right;">25</td>
<td style="text-align: right;">168</td>
<td style="text-align: right;">70</td>
<td style="text-align: left;">Germany</td>
<td style="text-align: left;">Silver</td>
</tr>
<tr class="even">
<td style="text-align: right;">2012</td>
<td style="text-align: left;">Dimitri Peters</td>
<td style="text-align: left;">M</td>
<td style="text-align: right;">28</td>
<td style="text-align: right;">188</td>
<td style="text-align: right;">100</td>
<td style="text-align: left;">Germany</td>
<td style="text-align: left;">Bronze</td>
</tr>
<tr class="odd">
<td style="text-align: right;">2012</td>
<td style="text-align: left;">Ole Bischof</td>
<td style="text-align: left;">M</td>
<td style="text-align: right;">32</td>
<td style="text-align: right;">180</td>
<td style="text-align: right;">81</td>
<td style="text-align: left;">Germany</td>
<td style="text-align: left;">Silver</td>
</tr>
<tr class="even">
<td style="text-align: right;">2012</td>
<td style="text-align: left;">Andreas Tlzer</td>
<td style="text-align: left;">M</td>
<td style="text-align: right;">32</td>
<td style="text-align: right;">192</td>
<td style="text-align: right;">131</td>
<td style="text-align: left;">Germany</td>
<td style="text-align: left;">Bronze</td>
</tr>
<tr class="odd">
<td style="text-align: right;">2016</td>
<td style="text-align: left;">Laura Vargas Koch</td>
<td style="text-align: left;">F</td>
<td style="text-align: right;">26</td>
<td style="text-align: right;">173</td>
<td style="text-align: right;">70</td>
<td style="text-align: left;">Germany</td>
<td style="text-align: left;">Bronze</td>
</tr>
</tbody>
</table>
</div>
</div>
<p>To get more styling options, mainly for HTML table output, you can use <a href="https://cran.r-project.org/web/packages/kableExtra/vignettes/awesome_table_in_html.html">kableExtra</a>.</p>
</section>
<section id="apa-tables" class="level3">
<h3 class="anchored" data-anchor-id="apa-tables">APA tables</h3>
<p>For APA tables, I’ve found the <a href="https://rempsyc.remi-theriault.com/articles/table">rempsyc</a> package which helps in building APA tables, but there are other options like <a href="https://davidgohel.github.io/flextable/">flextable</a> or <a href="https://gt.rstudio.com/">gt</a> as well:</p>
<div class="sourceCode" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb11-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#| label: tbl-judo</span></span>
<span id="cb11-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#| tbl-cap: Table with penguins species flipper length.</span></span>
<span id="cb11-3"></span>
<span id="cb11-4"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(rempsyc)</span>
<span id="cb11-5"></span>
<span id="cb11-6"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">nice_table</span>(</span>
<span id="cb11-7">  judo_athletes_ger</span>
<span id="cb11-8">)</span></code></pre></div>
<div class="cell">
<div id="tbl-judo" class="cell quarto-float quarto-figure quarto-figure-center anchored">
<figure class="quarto-float quarto-float-tbl figure">
<figcaption class="quarto-float-caption-top quarto-float-caption quarto-float-tbl" id="tbl-judo-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
Table&nbsp;1: German olympic medal winners in Judo.
</figcaption>
<div aria-describedby="tbl-judo-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
<div class="cell-output-display">
<div class="tabwid"><style>.cl-80a7268a{table-layout:auto;}.cl-809f4d7a{font-family:'Times New Roman';font-size:12pt;font-weight:normal;font-style:normal;text-decoration:none;color:rgba(0, 0, 0, 1.00);background-color:transparent;}.cl-80a24200{margin:0;text-align:center;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);padding-bottom:5pt;padding-top:5pt;padding-left:5pt;padding-right:5pt;line-height: 2;background-color:transparent;}.cl-80a24214{margin:0;text-align:left;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);padding-bottom:5pt;padding-top:5pt;padding-left:5pt;padding-right:5pt;line-height: 2;background-color:transparent;}.cl-80a2601e{background-color:transparent;vertical-align: middle;border-bottom: 0.5pt solid rgba(0, 0, 0, 1.00);border-top: 0.5pt solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-80a26028{background-color:transparent;vertical-align: middle;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-80a26032{background-color:transparent;vertical-align: middle;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-80a2603c{background-color:transparent;vertical-align: middle;border-bottom: 0.5pt solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-80a2603d{background-color:transparent;vertical-align: middle;border-bottom: 0.5pt solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}</style><table data-quarto-disable-processing="true" class="cl-80a7268a"><thead><tr style="overflow-wrap:break-word;"><th class="cl-80a2601e"><p class="cl-80a24200"><span class="cl-809f4d7a">Year</span></p></th><th class="cl-80a2601e"><p class="cl-80a24200"><span class="cl-809f4d7a">Name</span></p></th><th class="cl-80a2601e"><p class="cl-80a24200"><span class="cl-809f4d7a">Sex</span></p></th><th class="cl-80a2601e"><p class="cl-80a24200"><span class="cl-809f4d7a">Age</span></p></th><th class="cl-80a2601e"><p class="cl-80a24200"><span class="cl-809f4d7a">Height</span></p></th><th class="cl-80a2601e"><p class="cl-80a24200"><span class="cl-809f4d7a">Weight</span></p></th><th class="cl-80a2601e"><p class="cl-80a24200"><span class="cl-809f4d7a">Region</span></p></th><th class="cl-80a2601e"><p class="cl-80a24200"><span class="cl-809f4d7a">Medal</span></p></th></tr></thead><tbody><tr style="overflow-wrap:break-word;"><td class="cl-80a26028"><p class="cl-80a24214"><span class="cl-809f4d7a">1,964</span></p></td><td class="cl-80a26032"><p class="cl-80a24200"><span class="cl-809f4d7a">Wolfgang Hofmann</span></p></td><td class="cl-80a26032"><p class="cl-80a24200"><span class="cl-809f4d7a">M</span></p></td><td class="cl-80a26032"><p class="cl-80a24200"><span class="cl-809f4d7a">23</span></p></td><td class="cl-80a26032"><p class="cl-80a24200"><span class="cl-809f4d7a">177</span></p></td><td class="cl-80a26032"><p class="cl-80a24200"><span class="cl-809f4d7a">80.00</span></p></td><td class="cl-80a26032"><p class="cl-80a24200"><span class="cl-809f4d7a">Germany</span></p></td><td class="cl-80a26032"><p class="cl-80a24200"><span class="cl-809f4d7a">Silver</span></p></td></tr><tr style="overflow-wrap:break-word;"><td class="cl-80a26028"><p class="cl-80a24214"><span class="cl-809f4d7a">1,964</span></p></td><td class="cl-80a26032"><p class="cl-80a24200"><span class="cl-809f4d7a">Klaus Glahn</span></p></td><td class="cl-80a26032"><p class="cl-80a24200"><span class="cl-809f4d7a">M</span></p></td><td class="cl-80a26032"><p class="cl-80a24200"><span class="cl-809f4d7a">22</span></p></td><td class="cl-80a26032"><p class="cl-80a24200"><span class="cl-809f4d7a">187</span></p></td><td class="cl-80a26032"><p class="cl-80a24200"><span class="cl-809f4d7a">101.00</span></p></td><td class="cl-80a26032"><p class="cl-80a24200"><span class="cl-809f4d7a">Germany</span></p></td><td class="cl-80a26032"><p class="cl-80a24200"><span class="cl-809f4d7a">Bronze</span></p></td></tr><tr style="overflow-wrap:break-word;"><td class="cl-80a26028"><p class="cl-80a24214"><span class="cl-809f4d7a">1,972</span></p></td><td class="cl-80a26032"><p class="cl-80a24200"><span class="cl-809f4d7a">Paul Barth</span></p></td><td class="cl-80a26032"><p class="cl-80a24200"><span class="cl-809f4d7a">M</span></p></td><td class="cl-80a26032"><p class="cl-80a24200"><span class="cl-809f4d7a">26</span></p></td><td class="cl-80a26032"><p class="cl-80a24200"><span class="cl-809f4d7a">181</span></p></td><td class="cl-80a26032"><p class="cl-80a24200"><span class="cl-809f4d7a">90.00</span></p></td><td class="cl-80a26032"><p class="cl-80a24200"><span class="cl-809f4d7a">Germany</span></p></td><td class="cl-80a26032"><p class="cl-80a24200"><span class="cl-809f4d7a">Bronze</span></p></td></tr><tr style="overflow-wrap:break-word;"><td class="cl-80a26028"><p class="cl-80a24214"><span class="cl-809f4d7a">1,972</span></p></td><td class="cl-80a26032"><p class="cl-80a24200"><span class="cl-809f4d7a">Klaus Glahn</span></p></td><td class="cl-80a26032"><p class="cl-80a24200"><span class="cl-809f4d7a">M</span></p></td><td class="cl-80a26032"><p class="cl-80a24200"><span class="cl-809f4d7a">30</span></p></td><td class="cl-80a26032"><p class="cl-80a24200"><span class="cl-809f4d7a">187</span></p></td><td class="cl-80a26032"><p class="cl-80a24200"><span class="cl-809f4d7a">101.00</span></p></td><td class="cl-80a26032"><p class="cl-80a24200"><span class="cl-809f4d7a">Germany</span></p></td><td class="cl-80a26032"><p class="cl-80a24200"><span class="cl-809f4d7a">Silver</span></p></td></tr><tr style="overflow-wrap:break-word;"><td class="cl-80a26028"><p class="cl-80a24214"><span class="cl-809f4d7a">1,972</span></p></td><td class="cl-80a26032"><p class="cl-80a24200"><span class="cl-809f4d7a">Dietmar Htger</span></p></td><td class="cl-80a26032"><p class="cl-80a24200"><span class="cl-809f4d7a">M</span></p></td><td class="cl-80a26032"><p class="cl-80a24200"><span class="cl-809f4d7a">25</span></p></td><td class="cl-80a26032"><p class="cl-80a24200"><span class="cl-809f4d7a">172</span></p></td><td class="cl-80a26032"><p class="cl-80a24200"><span class="cl-809f4d7a">70.00</span></p></td><td class="cl-80a26032"><p class="cl-80a24200"><span class="cl-809f4d7a">Germany</span></p></td><td class="cl-80a26032"><p class="cl-80a24200"><span class="cl-809f4d7a">Bronze</span></p></td></tr><tr style="overflow-wrap:break-word;"><td class="cl-80a26028"><p class="cl-80a24214"><span class="cl-809f4d7a">1,976</span></p></td><td class="cl-80a26032"><p class="cl-80a24200"><span class="cl-809f4d7a">Gnther Neureuther</span></p></td><td class="cl-80a26032"><p class="cl-80a24200"><span class="cl-809f4d7a">M</span></p></td><td class="cl-80a26032"><p class="cl-80a24200"><span class="cl-809f4d7a">20</span></p></td><td class="cl-80a26032"><p class="cl-80a24200"><span class="cl-809f4d7a">186</span></p></td><td class="cl-80a26032"><p class="cl-80a24200"><span class="cl-809f4d7a">95.00</span></p></td><td class="cl-80a26032"><p class="cl-80a24200"><span class="cl-809f4d7a">Germany</span></p></td><td class="cl-80a26032"><p class="cl-80a24200"><span class="cl-809f4d7a">Silver</span></p></td></tr><tr style="overflow-wrap:break-word;"><td class="cl-80a26028"><p class="cl-80a24214"><span class="cl-809f4d7a">1,980</span></p></td><td class="cl-80a26032"><p class="cl-80a24200"><span class="cl-809f4d7a">Detlef Ultsch</span></p></td><td class="cl-80a26032"><p class="cl-80a24200"><span class="cl-809f4d7a">M</span></p></td><td class="cl-80a26032"><p class="cl-80a24200"><span class="cl-809f4d7a">24</span></p></td><td class="cl-80a26032"><p class="cl-80a24200"><span class="cl-809f4d7a">170</span></p></td><td class="cl-80a26032"><p class="cl-80a24200"><span class="cl-809f4d7a">80.00</span></p></td><td class="cl-80a26032"><p class="cl-80a24200"><span class="cl-809f4d7a">Germany</span></p></td><td class="cl-80a26032"><p class="cl-80a24200"><span class="cl-809f4d7a">Bronze</span></p></td></tr><tr style="overflow-wrap:break-word;"><td class="cl-80a26028"><p class="cl-80a24214"><span class="cl-809f4d7a">1,980</span></p></td><td class="cl-80a26032"><p class="cl-80a24200"><span class="cl-809f4d7a">Dietmar Lorenz</span></p></td><td class="cl-80a26032"><p class="cl-80a24200"><span class="cl-809f4d7a">M</span></p></td><td class="cl-80a26032"><p class="cl-80a24200"><span class="cl-809f4d7a">30</span></p></td><td class="cl-80a26032"><p class="cl-80a24200"><span class="cl-809f4d7a">180</span></p></td><td class="cl-80a26032"><p class="cl-80a24200"><span class="cl-809f4d7a">93.00</span></p></td><td class="cl-80a26032"><p class="cl-80a24200"><span class="cl-809f4d7a">Germany</span></p></td><td class="cl-80a26032"><p class="cl-80a24200"><span class="cl-809f4d7a">Gold</span></p></td></tr><tr style="overflow-wrap:break-word;"><td class="cl-80a26028"><p class="cl-80a24214"><span class="cl-809f4d7a">1,980</span></p></td><td class="cl-80a26032"><p class="cl-80a24200"><span class="cl-809f4d7a">Harald Heinke</span></p></td><td class="cl-80a26032"><p class="cl-80a24200"><span class="cl-809f4d7a">M</span></p></td><td class="cl-80a26032"><p class="cl-80a24200"><span class="cl-809f4d7a">25</span></p></td><td class="cl-80a26032"><p class="cl-80a24200"><span class="cl-809f4d7a">178</span></p></td><td class="cl-80a26032"><p class="cl-80a24200"><span class="cl-809f4d7a">78.00</span></p></td><td class="cl-80a26032"><p class="cl-80a24200"><span class="cl-809f4d7a">Germany</span></p></td><td class="cl-80a26032"><p class="cl-80a24200"><span class="cl-809f4d7a">Bronze</span></p></td></tr><tr style="overflow-wrap:break-word;"><td class="cl-80a26028"><p class="cl-80a24214"><span class="cl-809f4d7a">1,980</span></p></td><td class="cl-80a26032"><p class="cl-80a24200"><span class="cl-809f4d7a">Dietmar Lorenz</span></p></td><td class="cl-80a26032"><p class="cl-80a24200"><span class="cl-809f4d7a">M</span></p></td><td class="cl-80a26032"><p class="cl-80a24200"><span class="cl-809f4d7a">30</span></p></td><td class="cl-80a26032"><p class="cl-80a24200"><span class="cl-809f4d7a">180</span></p></td><td class="cl-80a26032"><p class="cl-80a24200"><span class="cl-809f4d7a">93.00</span></p></td><td class="cl-80a26032"><p class="cl-80a24200"><span class="cl-809f4d7a">Germany</span></p></td><td class="cl-80a26032"><p class="cl-80a24200"><span class="cl-809f4d7a">Bronze</span></p></td></tr><tr style="overflow-wrap:break-word;"><td class="cl-80a26028"><p class="cl-80a24214"><span class="cl-809f4d7a">1,980</span></p></td><td class="cl-80a26032"><p class="cl-80a24200"><span class="cl-809f4d7a">Karl-Heinz Lehmann</span></p></td><td class="cl-80a26032"><p class="cl-80a24200"><span class="cl-809f4d7a">M</span></p></td><td class="cl-80a26032"><p class="cl-80a24200"><span class="cl-809f4d7a">23</span></p></td><td class="cl-80a26032"><p class="cl-80a24200"><span class="cl-809f4d7a">169</span></p></td><td class="cl-80a26032"><p class="cl-80a24200"><span class="cl-809f4d7a">71.00</span></p></td><td class="cl-80a26032"><p class="cl-80a24200"><span class="cl-809f4d7a">Germany</span></p></td><td class="cl-80a26032"><p class="cl-80a24200"><span class="cl-809f4d7a">Bronze</span></p></td></tr><tr style="overflow-wrap:break-word;"><td class="cl-80a26028"><p class="cl-80a24214"><span class="cl-809f4d7a">1,984</span></p></td><td class="cl-80a26032"><p class="cl-80a24200"><span class="cl-809f4d7a">Frank Wieneke</span></p></td><td class="cl-80a26032"><p class="cl-80a24200"><span class="cl-809f4d7a">M</span></p></td><td class="cl-80a26032"><p class="cl-80a24200"><span class="cl-809f4d7a">22</span></p></td><td class="cl-80a26032"><p class="cl-80a24200"><span class="cl-809f4d7a">179</span></p></td><td class="cl-80a26032"><p class="cl-80a24200"><span class="cl-809f4d7a">78.00</span></p></td><td class="cl-80a26032"><p class="cl-80a24200"><span class="cl-809f4d7a">Germany</span></p></td><td class="cl-80a26032"><p class="cl-80a24200"><span class="cl-809f4d7a">Gold</span></p></td></tr><tr style="overflow-wrap:break-word;"><td class="cl-80a26028"><p class="cl-80a24214"><span class="cl-809f4d7a">1,984</span></p></td><td class="cl-80a26032"><p class="cl-80a24200"><span class="cl-809f4d7a">Arthur Schnabel</span></p></td><td class="cl-80a26032"><p class="cl-80a24200"><span class="cl-809f4d7a">M</span></p></td><td class="cl-80a26032"><p class="cl-80a24200"><span class="cl-809f4d7a">35</span></p></td><td class="cl-80a26032"><p class="cl-80a24200"><span class="cl-809f4d7a">182</span></p></td><td class="cl-80a26032"><p class="cl-80a24200"><span class="cl-809f4d7a">104.00</span></p></td><td class="cl-80a26032"><p class="cl-80a24200"><span class="cl-809f4d7a">Germany</span></p></td><td class="cl-80a26032"><p class="cl-80a24200"><span class="cl-809f4d7a">Bronze</span></p></td></tr><tr style="overflow-wrap:break-word;"><td class="cl-80a26028"><p class="cl-80a24214"><span class="cl-809f4d7a">1,984</span></p></td><td class="cl-80a26032"><p class="cl-80a24200"><span class="cl-809f4d7a">Gnther Neureuther</span></p></td><td class="cl-80a26032"><p class="cl-80a24200"><span class="cl-809f4d7a">M</span></p></td><td class="cl-80a26032"><p class="cl-80a24200"><span class="cl-809f4d7a">28</span></p></td><td class="cl-80a26032"><p class="cl-80a24200"><span class="cl-809f4d7a">186</span></p></td><td class="cl-80a26032"><p class="cl-80a24200"><span class="cl-809f4d7a">95.00</span></p></td><td class="cl-80a26032"><p class="cl-80a24200"><span class="cl-809f4d7a">Germany</span></p></td><td class="cl-80a26032"><p class="cl-80a24200"><span class="cl-809f4d7a">Bronze</span></p></td></tr><tr style="overflow-wrap:break-word;"><td class="cl-80a26028"><p class="cl-80a24214"><span class="cl-809f4d7a">1,988</span></p></td><td class="cl-80a26032"><p class="cl-80a24200"><span class="cl-809f4d7a">Frank Wieneke</span></p></td><td class="cl-80a26032"><p class="cl-80a24200"><span class="cl-809f4d7a">M</span></p></td><td class="cl-80a26032"><p class="cl-80a24200"><span class="cl-809f4d7a">26</span></p></td><td class="cl-80a26032"><p class="cl-80a24200"><span class="cl-809f4d7a">179</span></p></td><td class="cl-80a26032"><p class="cl-80a24200"><span class="cl-809f4d7a">78.00</span></p></td><td class="cl-80a26032"><p class="cl-80a24200"><span class="cl-809f4d7a">Germany</span></p></td><td class="cl-80a26032"><p class="cl-80a24200"><span class="cl-809f4d7a">Silver</span></p></td></tr><tr style="overflow-wrap:break-word;"><td class="cl-80a26028"><p class="cl-80a24214"><span class="cl-809f4d7a">1,988</span></p></td><td class="cl-80a26032"><p class="cl-80a24200"><span class="cl-809f4d7a">Marcus "Marc" Meiling</span></p></td><td class="cl-80a26032"><p class="cl-80a24200"><span class="cl-809f4d7a">M</span></p></td><td class="cl-80a26032"><p class="cl-80a24200"><span class="cl-809f4d7a">26</span></p></td><td class="cl-80a26032"><p class="cl-80a24200"><span class="cl-809f4d7a">194</span></p></td><td class="cl-80a26032"><p class="cl-80a24200"><span class="cl-809f4d7a">95.00</span></p></td><td class="cl-80a26032"><p class="cl-80a24200"><span class="cl-809f4d7a">Germany</span></p></td><td class="cl-80a26032"><p class="cl-80a24200"><span class="cl-809f4d7a">Silver</span></p></td></tr><tr style="overflow-wrap:break-word;"><td class="cl-80a26028"><p class="cl-80a24214"><span class="cl-809f4d7a">1,988</span></p></td><td class="cl-80a26032"><p class="cl-80a24200"><span class="cl-809f4d7a">Henry Sthr</span></p></td><td class="cl-80a26032"><p class="cl-80a24200"><span class="cl-809f4d7a">M</span></p></td><td class="cl-80a26032"><p class="cl-80a24200"><span class="cl-809f4d7a">28</span></p></td><td class="cl-80a26032"><p class="cl-80a24200"><span class="cl-809f4d7a">194</span></p></td><td class="cl-80a26032"><p class="cl-80a24200"><span class="cl-809f4d7a">120.00</span></p></td><td class="cl-80a26032"><p class="cl-80a24200"><span class="cl-809f4d7a">Germany</span></p></td><td class="cl-80a26032"><p class="cl-80a24200"><span class="cl-809f4d7a">Silver</span></p></td></tr><tr style="overflow-wrap:break-word;"><td class="cl-80a26028"><p class="cl-80a24214"><span class="cl-809f4d7a">1,988</span></p></td><td class="cl-80a26032"><p class="cl-80a24200"><span class="cl-809f4d7a">Sven Loll</span></p></td><td class="cl-80a26032"><p class="cl-80a24200"><span class="cl-809f4d7a">M</span></p></td><td class="cl-80a26032"><p class="cl-80a24200"><span class="cl-809f4d7a">24</span></p></td><td class="cl-80a26032"><p class="cl-80a24200"><span class="cl-809f4d7a">182</span></p></td><td class="cl-80a26032"><p class="cl-80a24200"><span class="cl-809f4d7a">71.00</span></p></td><td class="cl-80a26032"><p class="cl-80a24200"><span class="cl-809f4d7a">Germany</span></p></td><td class="cl-80a26032"><p class="cl-80a24200"><span class="cl-809f4d7a">Silver</span></p></td></tr><tr style="overflow-wrap:break-word;"><td class="cl-80a26028"><p class="cl-80a24214"><span class="cl-809f4d7a">1,988</span></p></td><td class="cl-80a26032"><p class="cl-80a24200"><span class="cl-809f4d7a">Torsten Brcht (Oehmigen-)</span></p></td><td class="cl-80a26032"><p class="cl-80a24200"><span class="cl-809f4d7a">M</span></p></td><td class="cl-80a26032"><p class="cl-80a24200"><span class="cl-809f4d7a">24</span></p></td><td class="cl-80a26032"><p class="cl-80a24200"><span class="cl-809f4d7a">178</span></p></td><td class="cl-80a26032"><p class="cl-80a24200"><span class="cl-809f4d7a">78.00</span></p></td><td class="cl-80a26032"><p class="cl-80a24200"><span class="cl-809f4d7a">Germany</span></p></td><td class="cl-80a26032"><p class="cl-80a24200"><span class="cl-809f4d7a">Bronze</span></p></td></tr><tr style="overflow-wrap:break-word;"><td class="cl-80a26028"><p class="cl-80a24214"><span class="cl-809f4d7a">1,992</span></p></td><td class="cl-80a26032"><p class="cl-80a24200"><span class="cl-809f4d7a">Richard Trautmann</span></p></td><td class="cl-80a26032"><p class="cl-80a24200"><span class="cl-809f4d7a">M</span></p></td><td class="cl-80a26032"><p class="cl-80a24200"><span class="cl-809f4d7a">23</span></p></td><td class="cl-80a26032"><p class="cl-80a24200"><span class="cl-809f4d7a">168</span></p></td><td class="cl-80a26032"><p class="cl-80a24200"><span class="cl-809f4d7a">65.00</span></p></td><td class="cl-80a26032"><p class="cl-80a24200"><span class="cl-809f4d7a">Germany</span></p></td><td class="cl-80a26032"><p class="cl-80a24200"><span class="cl-809f4d7a">Bronze</span></p></td></tr><tr style="overflow-wrap:break-word;"><td class="cl-80a26028"><p class="cl-80a24214"><span class="cl-809f4d7a">1,992</span></p></td><td class="cl-80a26032"><p class="cl-80a24200"><span class="cl-809f4d7a">Udo Gnther Quellmalz</span></p></td><td class="cl-80a26032"><p class="cl-80a24200"><span class="cl-809f4d7a">M</span></p></td><td class="cl-80a26032"><p class="cl-80a24200"><span class="cl-809f4d7a">25</span></p></td><td class="cl-80a26032"><p class="cl-80a24200"><span class="cl-809f4d7a">175</span></p></td><td class="cl-80a26032"><p class="cl-80a24200"><span class="cl-809f4d7a">65.00</span></p></td><td class="cl-80a26032"><p class="cl-80a24200"><span class="cl-809f4d7a">Germany</span></p></td><td class="cl-80a26032"><p class="cl-80a24200"><span class="cl-809f4d7a">Bronze</span></p></td></tr><tr style="overflow-wrap:break-word;"><td class="cl-80a26028"><p class="cl-80a24214"><span class="cl-809f4d7a">1,996</span></p></td><td class="cl-80a26032"><p class="cl-80a24200"><span class="cl-809f4d7a">Johanna Hagn</span></p></td><td class="cl-80a26032"><p class="cl-80a24200"><span class="cl-809f4d7a">F</span></p></td><td class="cl-80a26032"><p class="cl-80a24200"><span class="cl-809f4d7a">23</span></p></td><td class="cl-80a26032"><p class="cl-80a24200"><span class="cl-809f4d7a">168</span></p></td><td class="cl-80a26032"><p class="cl-80a24200"><span class="cl-809f4d7a"></span></p></td><td class="cl-80a26032"><p class="cl-80a24200"><span class="cl-809f4d7a">Germany</span></p></td><td class="cl-80a26032"><p class="cl-80a24200"><span class="cl-809f4d7a">Bronze</span></p></td></tr><tr style="overflow-wrap:break-word;"><td class="cl-80a26028"><p class="cl-80a24214"><span class="cl-809f4d7a">1,996</span></p></td><td class="cl-80a26032"><p class="cl-80a24200"><span class="cl-809f4d7a">Udo Gnther Quellmalz</span></p></td><td class="cl-80a26032"><p class="cl-80a24200"><span class="cl-809f4d7a">M</span></p></td><td class="cl-80a26032"><p class="cl-80a24200"><span class="cl-809f4d7a">29</span></p></td><td class="cl-80a26032"><p class="cl-80a24200"><span class="cl-809f4d7a">175</span></p></td><td class="cl-80a26032"><p class="cl-80a24200"><span class="cl-809f4d7a">65.00</span></p></td><td class="cl-80a26032"><p class="cl-80a24200"><span class="cl-809f4d7a">Germany</span></p></td><td class="cl-80a26032"><p class="cl-80a24200"><span class="cl-809f4d7a">Gold</span></p></td></tr><tr style="overflow-wrap:break-word;"><td class="cl-80a26028"><p class="cl-80a24214"><span class="cl-809f4d7a">1,996</span></p></td><td class="cl-80a26032"><p class="cl-80a24200"><span class="cl-809f4d7a">Frank Mller</span></p></td><td class="cl-80a26032"><p class="cl-80a24200"><span class="cl-809f4d7a">M</span></p></td><td class="cl-80a26032"><p class="cl-80a24200"><span class="cl-809f4d7a">25</span></p></td><td class="cl-80a26032"><p class="cl-80a24200"><span class="cl-809f4d7a">189</span></p></td><td class="cl-80a26032"><p class="cl-80a24200"><span class="cl-809f4d7a">125.00</span></p></td><td class="cl-80a26032"><p class="cl-80a24200"><span class="cl-809f4d7a">Germany</span></p></td><td class="cl-80a26032"><p class="cl-80a24200"><span class="cl-809f4d7a">Bronze</span></p></td></tr><tr style="overflow-wrap:break-word;"><td class="cl-80a26028"><p class="cl-80a24214"><span class="cl-809f4d7a">1,996</span></p></td><td class="cl-80a26032"><p class="cl-80a24200"><span class="cl-809f4d7a">Richard Trautmann</span></p></td><td class="cl-80a26032"><p class="cl-80a24200"><span class="cl-809f4d7a">M</span></p></td><td class="cl-80a26032"><p class="cl-80a24200"><span class="cl-809f4d7a">27</span></p></td><td class="cl-80a26032"><p class="cl-80a24200"><span class="cl-809f4d7a">168</span></p></td><td class="cl-80a26032"><p class="cl-80a24200"><span class="cl-809f4d7a">65.00</span></p></td><td class="cl-80a26032"><p class="cl-80a24200"><span class="cl-809f4d7a">Germany</span></p></td><td class="cl-80a26032"><p class="cl-80a24200"><span class="cl-809f4d7a">Bronze</span></p></td></tr><tr style="overflow-wrap:break-word;"><td class="cl-80a26028"><p class="cl-80a24214"><span class="cl-809f4d7a">1,996</span></p></td><td class="cl-80a26032"><p class="cl-80a24200"><span class="cl-809f4d7a">Marko Spittka</span></p></td><td class="cl-80a26032"><p class="cl-80a24200"><span class="cl-809f4d7a">M</span></p></td><td class="cl-80a26032"><p class="cl-80a24200"><span class="cl-809f4d7a">25</span></p></td><td class="cl-80a26032"><p class="cl-80a24200"><span class="cl-809f4d7a">179</span></p></td><td class="cl-80a26032"><p class="cl-80a24200"><span class="cl-809f4d7a">88.00</span></p></td><td class="cl-80a26032"><p class="cl-80a24200"><span class="cl-809f4d7a">Germany</span></p></td><td class="cl-80a26032"><p class="cl-80a24200"><span class="cl-809f4d7a">Bronze</span></p></td></tr><tr style="overflow-wrap:break-word;"><td class="cl-80a26028"><p class="cl-80a24214"><span class="cl-809f4d7a">2,000</span></p></td><td class="cl-80a26032"><p class="cl-80a24200"><span class="cl-809f4d7a">Anna-Maria Gradante</span></p></td><td class="cl-80a26032"><p class="cl-80a24200"><span class="cl-809f4d7a">F</span></p></td><td class="cl-80a26032"><p class="cl-80a24200"><span class="cl-809f4d7a">23</span></p></td><td class="cl-80a26032"><p class="cl-80a24200"><span class="cl-809f4d7a">154</span></p></td><td class="cl-80a26032"><p class="cl-80a24200"><span class="cl-809f4d7a">48.00</span></p></td><td class="cl-80a26032"><p class="cl-80a24200"><span class="cl-809f4d7a">Germany</span></p></td><td class="cl-80a26032"><p class="cl-80a24200"><span class="cl-809f4d7a">Bronze</span></p></td></tr><tr style="overflow-wrap:break-word;"><td class="cl-80a26028"><p class="cl-80a24214"><span class="cl-809f4d7a">2,004</span></p></td><td class="cl-80a26032"><p class="cl-80a24200"><span class="cl-809f4d7a">Yvonne Bnisch</span></p></td><td class="cl-80a26032"><p class="cl-80a24200"><span class="cl-809f4d7a">F</span></p></td><td class="cl-80a26032"><p class="cl-80a24200"><span class="cl-809f4d7a">23</span></p></td><td class="cl-80a26032"><p class="cl-80a24200"><span class="cl-809f4d7a">168</span></p></td><td class="cl-80a26032"><p class="cl-80a24200"><span class="cl-809f4d7a">61.00</span></p></td><td class="cl-80a26032"><p class="cl-80a24200"><span class="cl-809f4d7a">Germany</span></p></td><td class="cl-80a26032"><p class="cl-80a24200"><span class="cl-809f4d7a">Gold</span></p></td></tr><tr style="overflow-wrap:break-word;"><td class="cl-80a26028"><p class="cl-80a24214"><span class="cl-809f4d7a">2,004</span></p></td><td class="cl-80a26032"><p class="cl-80a24200"><span class="cl-809f4d7a">Julia Matijass</span></p></td><td class="cl-80a26032"><p class="cl-80a24200"><span class="cl-809f4d7a">F</span></p></td><td class="cl-80a26032"><p class="cl-80a24200"><span class="cl-809f4d7a">30</span></p></td><td class="cl-80a26032"><p class="cl-80a24200"><span class="cl-809f4d7a">161</span></p></td><td class="cl-80a26032"><p class="cl-80a24200"><span class="cl-809f4d7a">48.00</span></p></td><td class="cl-80a26032"><p class="cl-80a24200"><span class="cl-809f4d7a">Germany</span></p></td><td class="cl-80a26032"><p class="cl-80a24200"><span class="cl-809f4d7a">Bronze</span></p></td></tr><tr style="overflow-wrap:break-word;"><td class="cl-80a26028"><p class="cl-80a24214"><span class="cl-809f4d7a">2,004</span></p></td><td class="cl-80a26032"><p class="cl-80a24200"><span class="cl-809f4d7a">Annett Bhm</span></p></td><td class="cl-80a26032"><p class="cl-80a24200"><span class="cl-809f4d7a">F</span></p></td><td class="cl-80a26032"><p class="cl-80a24200"><span class="cl-809f4d7a">24</span></p></td><td class="cl-80a26032"><p class="cl-80a24200"><span class="cl-809f4d7a">179</span></p></td><td class="cl-80a26032"><p class="cl-80a24200"><span class="cl-809f4d7a">83.00</span></p></td><td class="cl-80a26032"><p class="cl-80a24200"><span class="cl-809f4d7a">Germany</span></p></td><td class="cl-80a26032"><p class="cl-80a24200"><span class="cl-809f4d7a">Bronze</span></p></td></tr><tr style="overflow-wrap:break-word;"><td class="cl-80a26028"><p class="cl-80a24214"><span class="cl-809f4d7a">2,004</span></p></td><td class="cl-80a26032"><p class="cl-80a24200"><span class="cl-809f4d7a">Michael Jurack</span></p></td><td class="cl-80a26032"><p class="cl-80a24200"><span class="cl-809f4d7a">M</span></p></td><td class="cl-80a26032"><p class="cl-80a24200"><span class="cl-809f4d7a">25</span></p></td><td class="cl-80a26032"><p class="cl-80a24200"><span class="cl-809f4d7a">190</span></p></td><td class="cl-80a26032"><p class="cl-80a24200"><span class="cl-809f4d7a">100.00</span></p></td><td class="cl-80a26032"><p class="cl-80a24200"><span class="cl-809f4d7a">Germany</span></p></td><td class="cl-80a26032"><p class="cl-80a24200"><span class="cl-809f4d7a">Bronze</span></p></td></tr><tr style="overflow-wrap:break-word;"><td class="cl-80a26028"><p class="cl-80a24214"><span class="cl-809f4d7a">2,008</span></p></td><td class="cl-80a26032"><p class="cl-80a24200"><span class="cl-809f4d7a">Ole Bischof</span></p></td><td class="cl-80a26032"><p class="cl-80a24200"><span class="cl-809f4d7a">M</span></p></td><td class="cl-80a26032"><p class="cl-80a24200"><span class="cl-809f4d7a">28</span></p></td><td class="cl-80a26032"><p class="cl-80a24200"><span class="cl-809f4d7a">180</span></p></td><td class="cl-80a26032"><p class="cl-80a24200"><span class="cl-809f4d7a">81.00</span></p></td><td class="cl-80a26032"><p class="cl-80a24200"><span class="cl-809f4d7a">Germany</span></p></td><td class="cl-80a26032"><p class="cl-80a24200"><span class="cl-809f4d7a">Gold</span></p></td></tr><tr style="overflow-wrap:break-word;"><td class="cl-80a26028"><p class="cl-80a24214"><span class="cl-809f4d7a">2,012</span></p></td><td class="cl-80a26032"><p class="cl-80a24200"><span class="cl-809f4d7a">Kerstin Thiele</span></p></td><td class="cl-80a26032"><p class="cl-80a24200"><span class="cl-809f4d7a">F</span></p></td><td class="cl-80a26032"><p class="cl-80a24200"><span class="cl-809f4d7a">25</span></p></td><td class="cl-80a26032"><p class="cl-80a24200"><span class="cl-809f4d7a">168</span></p></td><td class="cl-80a26032"><p class="cl-80a24200"><span class="cl-809f4d7a">70.00</span></p></td><td class="cl-80a26032"><p class="cl-80a24200"><span class="cl-809f4d7a">Germany</span></p></td><td class="cl-80a26032"><p class="cl-80a24200"><span class="cl-809f4d7a">Silver</span></p></td></tr><tr style="overflow-wrap:break-word;"><td class="cl-80a26028"><p class="cl-80a24214"><span class="cl-809f4d7a">2,012</span></p></td><td class="cl-80a26032"><p class="cl-80a24200"><span class="cl-809f4d7a">Dimitri Peters</span></p></td><td class="cl-80a26032"><p class="cl-80a24200"><span class="cl-809f4d7a">M</span></p></td><td class="cl-80a26032"><p class="cl-80a24200"><span class="cl-809f4d7a">28</span></p></td><td class="cl-80a26032"><p class="cl-80a24200"><span class="cl-809f4d7a">188</span></p></td><td class="cl-80a26032"><p class="cl-80a24200"><span class="cl-809f4d7a">100.00</span></p></td><td class="cl-80a26032"><p class="cl-80a24200"><span class="cl-809f4d7a">Germany</span></p></td><td class="cl-80a26032"><p class="cl-80a24200"><span class="cl-809f4d7a">Bronze</span></p></td></tr><tr style="overflow-wrap:break-word;"><td class="cl-80a26028"><p class="cl-80a24214"><span class="cl-809f4d7a">2,012</span></p></td><td class="cl-80a26032"><p class="cl-80a24200"><span class="cl-809f4d7a">Ole Bischof</span></p></td><td class="cl-80a26032"><p class="cl-80a24200"><span class="cl-809f4d7a">M</span></p></td><td class="cl-80a26032"><p class="cl-80a24200"><span class="cl-809f4d7a">32</span></p></td><td class="cl-80a26032"><p class="cl-80a24200"><span class="cl-809f4d7a">180</span></p></td><td class="cl-80a26032"><p class="cl-80a24200"><span class="cl-809f4d7a">81.00</span></p></td><td class="cl-80a26032"><p class="cl-80a24200"><span class="cl-809f4d7a">Germany</span></p></td><td class="cl-80a26032"><p class="cl-80a24200"><span class="cl-809f4d7a">Silver</span></p></td></tr><tr style="overflow-wrap:break-word;"><td class="cl-80a26028"><p class="cl-80a24214"><span class="cl-809f4d7a">2,012</span></p></td><td class="cl-80a26032"><p class="cl-80a24200"><span class="cl-809f4d7a">Andreas Tlzer</span></p></td><td class="cl-80a26032"><p class="cl-80a24200"><span class="cl-809f4d7a">M</span></p></td><td class="cl-80a26032"><p class="cl-80a24200"><span class="cl-809f4d7a">32</span></p></td><td class="cl-80a26032"><p class="cl-80a24200"><span class="cl-809f4d7a">192</span></p></td><td class="cl-80a26032"><p class="cl-80a24200"><span class="cl-809f4d7a">131.00</span></p></td><td class="cl-80a26032"><p class="cl-80a24200"><span class="cl-809f4d7a">Germany</span></p></td><td class="cl-80a26032"><p class="cl-80a24200"><span class="cl-809f4d7a">Bronze</span></p></td></tr><tr style="overflow-wrap:break-word;"><td class="cl-80a2603c"><p class="cl-80a24214"><span class="cl-809f4d7a">2,016</span></p></td><td class="cl-80a2603d"><p class="cl-80a24200"><span class="cl-809f4d7a">Laura Vargas Koch</span></p></td><td class="cl-80a2603d"><p class="cl-80a24200"><span class="cl-809f4d7a">F</span></p></td><td class="cl-80a2603d"><p class="cl-80a24200"><span class="cl-809f4d7a">26</span></p></td><td class="cl-80a2603d"><p class="cl-80a24200"><span class="cl-809f4d7a">173</span></p></td><td class="cl-80a2603d"><p class="cl-80a24200"><span class="cl-809f4d7a">70.00</span></p></td><td class="cl-80a2603d"><p class="cl-80a24200"><span class="cl-809f4d7a">Germany</span></p></td><td class="cl-80a2603d"><p class="cl-80a24200"><span class="cl-809f4d7a">Bronze</span></p></td></tr></tbody></table></div>
</div>
</div>
</figure>
</div>
</div>
</section>
<section id="labels" class="level3">
<h3 class="anchored" data-anchor-id="labels">Labels</h3>
<p>Tables that are build programmatically can be labeled with <code>#| label: tbl-judo</code> at the top of the chunk. This will always put the correct number in the caption and also lets you cross-reference the table in your text by writing <code>@tbl-judo</code> Table&nbsp;1.<br>
The <a href="https://github.com/wjschne/apaquarto">apaquarto</a> template will take care of correctly rendering it to APA-style.<br>
Captions can be written with <code>#| tbl-cap: German olympic medal winners in Judo.</code>.</p>
</section>
</section>
<section id="formatting-model-output" class="level2">
<h2 class="anchored" data-anchor-id="formatting-model-output">Formatting model output</h2>
<p>There are some packages out there that help you to format output of statistical models. Let’s fit a simple logistic regression model to predict an athletes medal win by country (Germany or Japan) in Judo:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb12-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(tidyverse)</span>
<span id="cb12-2"></span>
<span id="cb12-3">athletes_judo <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">readRDS</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">file =</span> here<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">here</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"raw_data"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"athletes.rds"</span>)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb12-4">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mutate</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">Medal_bi =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ifelse</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">is.na</span>(Medal), <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb12-5">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">filter</span>(Sport <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Judo"</span>, Region <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%in%</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Germany"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Japan"</span>))</span>
<span id="cb12-6"></span>
<span id="cb12-7"></span>
<span id="cb12-8">model <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">glm</span>(Medal_bi <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span> Region, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">family =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">binomial</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">link =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"logit"</span>), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">data =</span> athletes_judo)</span></code></pre></div>
</div>
<p>Normally, the output looks something like this:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb13-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">summary</span>(model)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>
Call:
glm(formula = Medal_bi ~ Region, family = binomial(link = "logit"), 
    data = athletes_judo)

Coefficients:
            Estimate Std. Error z value Pr(&gt;|z|)    
(Intercept)  -0.9740     0.1930  -5.048 4.46e-07 ***
RegionJapan   1.5982     0.2671   5.983 2.19e-09 ***
---
Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1

(Dispersion parameter for binomial family taken to be 1)

    Null deviance: 364.15  on 263  degrees of freedom
Residual deviance: 325.42  on 262  degrees of freedom
AIC: 329.42

Number of Fisher Scoring iterations: 4</code></pre>
</div>
</div>
<section id="tidy-up" class="level3">
<h3 class="anchored" data-anchor-id="tidy-up">Tidy up!</h3>
<p>Now we have multiple options to easily extract the results of this regression. Most prominently, there is the <a href="https://broom.tidymodels.org/">broom</a> package:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb15-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(broom)</span>
<span id="cb15-2"></span>
<span id="cb15-3">model_broom <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tidy</span>(model)</span>
<span id="cb15-4">model_broom</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 2 × 5
  term        estimate std.error statistic       p.value
  &lt;chr&gt;          &lt;dbl&gt;     &lt;dbl&gt;     &lt;dbl&gt;         &lt;dbl&gt;
1 (Intercept)   -0.974     0.193     -5.05 0.000000446  
2 RegionJapan    1.60      0.267      5.98 0.00000000219</code></pre>
</div>
</div>
<p>If we want to convert the estimates to Odds:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb17-1">model_broom <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tidy</span>(model, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">exponentiate =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>)</span>
<span id="cb17-2">model_broom</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 2 × 5
  term        estimate std.error statistic       p.value
  &lt;chr&gt;          &lt;dbl&gt;     &lt;dbl&gt;     &lt;dbl&gt;         &lt;dbl&gt;
1 (Intercept)    0.378     0.193     -5.05 0.000000446  
2 RegionJapan    4.94      0.267      5.98 0.00000000219</code></pre>
</div>
</div>
<p>And if we want to extract the fit statistics:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb19" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb19-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">glance</span>(model)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 1 × 8
  null.deviance df.null logLik   AIC   BIC deviance df.residual  nobs
          &lt;dbl&gt;   &lt;int&gt;  &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;    &lt;dbl&gt;       &lt;int&gt; &lt;int&gt;
1          364.     263  -163.  329.  337.     325.         262   264</code></pre>
</div>
</div>
<div class="callout callout-style-default callout-tip callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Tip
</div>
</div>
<div class="callout-body-container callout-body">
<p>This works with <strong>many</strong> different model types, from t-tests over linear models to GLMs and multi level models and even <code>lavaan</code> output. They might be split out over multiple packages, multi level models for example can be tidied with <a href="https://cran.r-project.org/web/packages/broom.mixed/vignettes/broom_mixed_intro.html">broom.mixed</a>.</p>
</div>
</div>
</section>
<section id="reporting" class="level3">
<h3 class="anchored" data-anchor-id="reporting">Reporting</h3>
<p>We can also let R write our report section for us ;):</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb21" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb21-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(report)</span>
<span id="cb21-2"></span>
<span id="cb21-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">report</span>(model)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>We fitted a logistic model (estimated using ML) to predict Medal_bi with Region
(formula: Medal_bi ~ Region). The model's explanatory power is moderate (Tjur's
R2 = 0.14). The model's intercept, corresponding to Region = Germany, is at
-0.97 (95% CI [-1.36, -0.61], p &lt; .001). Within this model:

  - The effect of Region [Japan] is statistically significant and positive (beta
= 1.60, 95% CI [1.08, 2.13], p &lt; .001; Std. beta = 1.60, 95% CI [1.08, 2.13])

Standardized parameters were obtained by fitting the model on a standardized
version of the dataset. 95% Confidence Intervals (CIs) and p-values were
computed using a Wald z-distribution approximation.</code></pre>
</div>
</div>
<p>If you want, take a look at <a href="https://easystats.github.io/report/"><code>report</code></a>, it has many more functions to make the reporting workflow of your model a lot easier.</p>
<div class="callout callout-style-default callout-note callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Automate in-text values
</div>
</div>
<div class="callout-body-container callout-body">
<p>Even when not using <code>report</code> or some similar package, we can still extract the values automatically from a model and put them programmatically into the text. This can be achieved by simply adding an <strong>inline-codechunck</strong> into our markdown text:</p>
<p><img src="https://iqb-research.github.io/IQB-Methods/docs/r_sig/24_07_15_quarto_1/inline_code.png" class="img-fluid"></p>
<p>The model’s intercept, corresponding to Region = Germany, is at 0.38.</p>
<div class="callout callout-style-default callout-tip callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Tip
</div>
</div>
<div class="callout-body-container callout-body">
<p>Maybe put the data extraction into an own object to keep the text more readable:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb23" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb23-1">model_intercept <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> model_broom <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">filter</span>(term <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"(Intercept)"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">pull</span>(estimate) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">round</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span></code></pre></div>
</div>
<p><img src="https://iqb-research.github.io/IQB-Methods/docs/r_sig/24_07_15_quarto_1/inline_code2.png" class="img-fluid"></p>
<p>The model’s intercept, corresponding to Region = Germany, is at 0.38.</p>
</div>
</div>
</div>
</div>
</section>
<section id="apa-tables-1" class="level3">
<h3 class="anchored" data-anchor-id="apa-tables-1">APA tables</h3>
<p>For example with <a href="https://rempsyc.remi-theriault.com/"><code>rempsyc</code></a>:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb24" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb24-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(rempsyc)</span>
<span id="cb24-2"></span>
<span id="cb24-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">nice_table</span>(model_broom, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">broom =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"glm"</span>)</span></code></pre></div>
<div class="cell-output-display">
<div class="tabwid"><style>.cl-81a477b8{table-layout:auto;}.cl-819efd56{font-family:'Times New Roman';font-size:12pt;font-weight:normal;font-style:normal;text-decoration:none;color:rgba(0, 0, 0, 1.00);background-color:transparent;}.cl-819efd60{font-family:'Times New Roman';font-size:12pt;font-weight:normal;font-style:italic;text-decoration:none;color:rgba(0, 0, 0, 1.00);background-color:transparent;}.cl-81a14eb2{margin:0;text-align:center;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);padding-bottom:5pt;padding-top:5pt;padding-left:5pt;padding-right:5pt;line-height: 2;background-color:transparent;}.cl-81a14ec6{margin:0;text-align:left;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);padding-bottom:5pt;padding-top:5pt;padding-left:5pt;padding-right:5pt;line-height: 2;background-color:transparent;}.cl-81a16848{background-color:transparent;vertical-align: middle;border-bottom: 0.5pt solid rgba(0, 0, 0, 1.00);border-top: 0.5pt solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-81a16852{background-color:transparent;vertical-align: middle;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-81a1685c{background-color:transparent;vertical-align: middle;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-81a16866{background-color:transparent;vertical-align: middle;border-bottom: 0.5pt solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-81a16867{background-color:transparent;vertical-align: middle;border-bottom: 0.5pt solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}</style><table data-quarto-disable-processing="true" class="cl-81a477b8"><thead><tr style="overflow-wrap:break-word;"><th class="cl-81a16848"><p class="cl-81a14eb2"><span class="cl-819efd56">Term</span></p></th><th class="cl-81a16848"><p class="cl-81a14eb2"><span class="cl-819efd56">estimate</span></p></th><th class="cl-81a16848"><p class="cl-81a14eb2"><span class="cl-819efd60">SE</span></p></th><th class="cl-81a16848"><p class="cl-81a14eb2"><span class="cl-819efd60">t</span></p></th><th class="cl-81a16848"><p class="cl-81a14eb2"><span class="cl-819efd60">p</span></p></th></tr></thead><tbody><tr style="overflow-wrap:break-word;"><td class="cl-81a16852"><p class="cl-81a14ec6"><span class="cl-819efd56">(Intercept)</span></p></td><td class="cl-81a1685c"><p class="cl-81a14eb2"><span class="cl-819efd56">0.38</span></p></td><td class="cl-81a1685c"><p class="cl-81a14eb2"><span class="cl-819efd56">0.19</span></p></td><td class="cl-81a1685c"><p class="cl-81a14eb2"><span class="cl-819efd56">-5.05</span></p></td><td class="cl-81a1685c"><p class="cl-81a14eb2"><span class="cl-819efd56">&lt; .001***</span></p></td></tr><tr style="overflow-wrap:break-word;"><td class="cl-81a16866"><p class="cl-81a14ec6"><span class="cl-819efd56">RegionJapan</span></p></td><td class="cl-81a16867"><p class="cl-81a14eb2"><span class="cl-819efd56">4.94</span></p></td><td class="cl-81a16867"><p class="cl-81a14eb2"><span class="cl-819efd56">0.27</span></p></td><td class="cl-81a16867"><p class="cl-81a14eb2"><span class="cl-819efd56">5.98</span></p></td><td class="cl-81a16867"><p class="cl-81a14eb2"><span class="cl-819efd56">&lt; .001***</span></p></td></tr></tbody></table></div>
</div>
</div>
</section>
</section>
<section id="plots" class="level2">
<h2 class="anchored" data-anchor-id="plots">Plots</h2>
<p>Plots can be very easily created from within a code chunk:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb25" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb25-1">best_by_sport <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> athletes <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb25-2">  <span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## Get all gold medalists</span></span>
<span id="cb25-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">filter</span>(Medal <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Gold"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb25-4">  <span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## Group them by sport and region</span></span>
<span id="cb25-5">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">group_by</span>(Sport, Region) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb25-6">  <span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## count the number of medals each country has per sport category</span></span>
<span id="cb25-7">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">count</span>(Medal) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb25-8">  <span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## Now only group by sport, so we can extract the maximum medal row by sport, and not by sport and country</span></span>
<span id="cb25-9">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">group_by</span>(Sport) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb25-10">  <span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## Extract the country with the most medals</span></span>
<span id="cb25-11">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">slice</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">which.max</span>(n))</span>
<span id="cb25-12"></span>
<span id="cb25-13"></span>
<span id="cb25-14"></span>
<span id="cb25-15">p1 <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggplot</span>(</span>
<span id="cb25-16">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">data =</span> best_by_sport,</span>
<span id="cb25-17">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(</span>
<span id="cb25-18">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> Sport,</span>
<span id="cb25-19">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> n</span>
<span id="cb25-20">  )</span>
<span id="cb25-21">) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb25-22">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_col</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">fill =</span> Region, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">reorder</span>(Sport, n))) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb25-23">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_text</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">label =</span> Region), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">hjust =</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.3</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">angle =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">90</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">size =</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">2.5</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb25-24">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">theme_classic</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb25-25">  <span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## And turn the axis labels again, because the new theme has overwritten our theme</span></span>
<span id="cb25-26">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">theme</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">axis.text.x =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">element_text</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">angle =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">90</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">vjust =</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">hjust =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb25-27">  <span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## Specify which colors are used for the filling. They are from the package viridsLite, so you might need to install it.</span></span>
<span id="cb25-28">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">scale_fill_manual</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">values =</span> viridisLite<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">viridis</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">19</span>)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb25-29">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggtitle</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Country with the most Olympic gold medal winners by sport"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb25-30">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">xlab</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Sport"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb25-31">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ylab</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Number of gold medal winners"</span>)</span></code></pre></div>
</div>
<p>Again, we can tweak the layout, captions etc. via the chunk options, see <a href="https://quarto.org/docs/authoring/figures.html#computations">here</a> for an overview.</p>
<pre><code>#| fig-height: 8
#| fig-width: 11

p1</code></pre>
<div class="cell">
<div class="cell-output-display">
<div>
<figure class="figure">
<p><img src="https://iqb-research.github.io/IQB-Methods/docs/r_sig/24_07_15_quarto_1/index_files/figure-html/plot output-1.png" class="img-fluid figure-img" width="1056"></p>
</figure>
</div>
</div>
</div>
</section>
<section id="citations" class="level2">
<h2 class="anchored" data-anchor-id="citations">Citations</h2>
<p>Citations are saved in <code>.bib</code> files. The <code>.bib</code> format can be chosen to download or copy on almost every website, often next to APA and others. It looks like this:</p>
<pre><code>@article{allport1936trait,
  title={Trait-names: A psycho-lexical study.},
  author={Allport, Gordon W and Odbert, Henry S},
  journal={Psychological monographs},
  volume={47},
  number={1},
  pages={i},
  year={1936},
  publisher={Psychological Review Company}
}

@book{darwin1859,
  added-at = {2008-05-27T04:02:47.000+0200},
  address = {London},
  author = {Darwin, Charles},
  biburl = {https://www.bibsonomy.org/bibtex/2d70d713c717fb28384fb073c9f6dfbc2/neilernst},
  citeulike-article-id = {2376343},
  interhash = {c738acbb887362be5b0e6abc51be42d3},
  intrahash = {d70d713c717fb28384fb073c9f6dfbc2},
  keywords = {evolution},
  note = { or the Preservation of Favored Races in the Struggle for Life},
  priority = {2},
  publisher = {Murray},
  timestamp = {2008-05-27T04:02:47.000+0200},
  title = {On the Origin of Species by Means of Natural Selection},
  year = 1859
}</code></pre>
<p>Of course, you should still check if the fields are filled in correctly. If you have created a <code>references.bib</code> file in your project directory, you can include it in your quarto document by adding <code>bibliography: references.bib</code> to your YAML header.<br>
To cite a reference in you text, you can use an <code>@</code> in front of the tag like <code>@darwin1859</code> <span class="citation" data-cites="darwin1859">Darwin (1859)</span> , or <code>[@allport1936trait]</code> <span class="citation" data-cites="allport1936trait">(Allport &amp; Odbert, 1936)</span>.</p>
<section id="referencing-r-packages" class="level3">
<h3 class="anchored" data-anchor-id="referencing-r-packages">Referencing R packages</h3>
<p>R packages are an important part of your analysis, and should be cited as such. The package <a href="https://cran.r-project.org/web/packages/grateful/readme/README.html"><code>grateful</code></a> helps you with that.<br>
To use it, put a <code>grateful-refs.bib</code> file into your YAML header:</p>
<pre><code>---
title: "Reproducible manuscripts with Quarto"
description: "R-SIG 15.07.2024"
author: 
  - name: Nicklas Hafiz
  - affiliation: PhD student at the IQB, Methods team
categories: [R, quarto]
date: 07-15-2024
bibliography: 
  - references.bib
  - grateful-refs.bib
csl: apa7.csl
format: pdf
---</code></pre>
<p>By using this list syntax, we can add multiple <code>.bib</code>-files to our quarto document. Then we only have to call the citation function in a code chunk:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb29" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb29-1">grateful<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">cite_packages</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">output =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"paragraph"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">out.dir =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"."</span>)</span></code></pre></div>
<div class="cell-output-display">
<p>We used R version 4.4.3 <span class="citation" data-cites="base">(R Core Team, 2025)</span> and the following R packages: flextable v. 0.9.7 <span class="citation" data-cites="flextable">(Gohel &amp; Skintzos, 2024)</span>, here v. 1.0.1 <span class="citation" data-cites="here">(Müller, 2020)</span>, knitr v. 1.49 <span class="citation" data-cites="knitr2014 knitr2015 knitr2024">(Xie, 2014, 2015, 2024)</span>, rempsyc v. 0.1.8 <span class="citation" data-cites="rempsyc">(Thériault, 2023)</span>, report v. 0.5.9 <span class="citation" data-cites="report">(Makowski et al., 2023)</span>, rmarkdown v. 2.29 <span class="citation" data-cites="rmarkdown2018 rmarkdown2020 rmarkdown2024">(Allaire et al., 2024; Xie et al., 2018, 2020)</span>, tidyverse v. 2.0.0 <span class="citation" data-cites="tidyverse">(Wickham et al., 2019)</span>, viridisLite v. 0.4.2 <span class="citation" data-cites="viridisLite">(Garnier et al., 2023)</span>.</p>
</div>
</div>
</section>
<section id="citation-styles" class="level3">
<h3 class="anchored" data-anchor-id="citation-styles">Citation styles</h3>
<p>Again, because we have our references in a plain text format, we can easily convert between different citation styles. One way to do this is to provide th <code>csl</code> argument in the YAML header, like so:</p>
<pre><code>---
title: "Reproducible manuscripts with Quarto"
description: "R-SIG 15.07.2024"
author: 
  - name: Nicklas Hafiz
  - affiliation: PhD student at the IQB, Methods team
categories: [R, quarto]
date: 07-15-2024
bibliography: references.bib
csl: apa7.csl
format: pdf
---</code></pre>
<p><code>.csl</code> files can just be put into your project folder. They define the citation style, and can for example be downloaded from <a href="https://www.zotero.org/styles">Zoteros style repository</a>.</p>
</section>
<section id="reference-section" class="level3">
<h3 class="anchored" data-anchor-id="reference-section">Reference section</h3>
<p>The references will be automatically generated at the end of your document. Alternatively, you can include it where you want with</p>
<pre><code>::: {#refs}
:::</code></pre>
<div id="refs" class="references csl-bib-body hanging-indent" data-entry-spacing="0" data-line-spacing="2">
<div id="ref-rmarkdown2024" class="csl-entry">
Allaire, J., Xie, Y., Dervieux, C., McPherson, J., Luraschi, J., Ushey, K., Atkins, A., Wickham, H., Cheng, J., Chang, W., &amp; Iannone, R. (2024). <em><span class="nocase">rmarkdown</span>: Dynamic documents for r</em>. <a href="https://github.com/rstudio/rmarkdown">https://github.com/rstudio/rmarkdown</a>
</div>
<div id="ref-allport1936trait" class="csl-entry">
Allport, G. W., &amp; Odbert, H. S. (1936). Trait-names: A psycho-lexical study. <em>Psychological Monographs</em>, <em>47</em>(1).
</div>
<div id="ref-darwin1859" class="csl-entry">
Darwin, C. (1859). <em>On the origin of species by means of natural selection</em>. Murray.
</div>
<div id="ref-viridisLite" class="csl-entry">
Garnier, Simon, Ross, Noam, Rudis, Robert, Camargo, Pedro, A., Sciaini, Marco, Scherer, &amp; Cédric. (2023). <em><span class="nocase">viridis(Lite)</span> - colorblind-friendly color maps for r</em>. <a href="https://doi.org/10.5281/zenodo.4678327">https://doi.org/10.5281/zenodo.4678327</a>
</div>
<div id="ref-flextable" class="csl-entry">
Gohel, D., &amp; Skintzos, P. (2024). <em><span class="nocase">flextable</span>: Functions for tabular reporting</em>. <a href="https://ardata-fr.github.io/flextable-book/">https://ardata-fr.github.io/flextable-book/</a>
</div>
<div id="ref-report" class="csl-entry">
Makowski, D., Lüdecke, D., Patil, I., Thériault, R., Ben-Shachar, M. S., &amp; Wiernik, B. M. (2023). Automated results reporting as a practical tool to improve reproducibility and methodological best practices adoption. <em>CRAN</em>. <a href="https://easystats.github.io/report/">https://easystats.github.io/report/</a>
</div>
<div id="ref-here" class="csl-entry">
Müller, K. (2020). <em><span class="nocase">here</span>: A simpler way to find your files</em>. <a href="https://here.r-lib.org/">https://here.r-lib.org/</a>
</div>
<div id="ref-base" class="csl-entry">
R Core Team. (2025). <em><span>R</span>: A language and environment for statistical computing</em>. R Foundation for Statistical Computing. <a href="https://www.R-project.org/">https://www.R-project.org/</a>
</div>
<div id="ref-rempsyc" class="csl-entry">
Thériault, R. (2023). <span class="nocase">rempsyc</span>: Convenience functions for psychology. <em>Journal of Open Source Software</em>, <em>8</em>(87), 5466. <a href="https://doi.org/10.21105/joss.05466">https://doi.org/10.21105/joss.05466</a>
</div>
<div id="ref-tidyverse" class="csl-entry">
Wickham, H., Averick, M., Bryan, J., Chang, W., McGowan, L. D., François, R., Grolemund, G., Hayes, A., Henry, L., Hester, J., Kuhn, M., Pedersen, T. L., Miller, E., Bache, S. M., Müller, K., Ooms, J., Robinson, D., Seidel, D. P., Spinu, V., … Yutani, H. (2019). Welcome to the <span class="nocase">tidyverse</span>. <em>Journal of Open Source Software</em>, <em>4</em>(43), 1686. <a href="https://doi.org/10.21105/joss.01686">https://doi.org/10.21105/joss.01686</a>
</div>
<div id="ref-knitr2014" class="csl-entry">
Xie, Y. (2014). <span class="nocase">knitr</span>: A comprehensive tool for reproducible research in <span>R</span>. In V. Stodden, F. Leisch, &amp; R. D. Peng (Eds.), <em>Implementing reproducible computational research</em>. Chapman; Hall/CRC.
</div>
<div id="ref-knitr2015" class="csl-entry">
Xie, Y. (2015). <em>Dynamic documents with <span>R</span> and knitr</em> (2nd ed.). Chapman; Hall/CRC. <a href="https://yihui.org/knitr/">https://yihui.org/knitr/</a>
</div>
<div id="ref-knitr2024" class="csl-entry">
Xie, Y. (2024). <em><span class="nocase">knitr</span>: A general-purpose package for dynamic report generation in r</em>. <a href="https://yihui.org/knitr/">https://yihui.org/knitr/</a>
</div>
<div id="ref-rmarkdown2018" class="csl-entry">
Xie, Y., Allaire, J. J., &amp; Grolemund, G. (2018). <em>R markdown: The definitive guide</em>. Chapman; Hall/CRC. <a href="https://bookdown.org/yihui/rmarkdown">https://bookdown.org/yihui/rmarkdown</a>
</div>
<div id="ref-rmarkdown2020" class="csl-entry">
Xie, Y., Dervieux, C., &amp; Riederer, E. (2020). <em>R markdown cookbook</em>. Chapman; Hall/CRC. <a href="https://bookdown.org/yihui/rmarkdown-cookbook">https://bookdown.org/yihui/rmarkdown-cookbook</a>
</div>
</div>
</section>
</section>
</section>
<section id="templates-apa" class="level1">
<h1>Templates &amp; APA</h1>
<section id="own-templates" class="level2">
<h2 class="anchored" data-anchor-id="own-templates">Own Templates</h2>
<p>You can always create your <a href="https://quarto.org/docs/journals/templates.html">own template</a> Luckily, some people have done a lot of the work for us, and therefore we can use templates provided for <a href="https://github.com/quarto-journals/">specific journals</a>. Oooor more generally, APA templates:</p>
</section>
<section id="papaja" class="level2">
<h2 class="anchored" data-anchor-id="papaja">Papaja</h2>
<p>There are some markdown templates that format your text in APA style. Most famously, the <a href="https://github.com/crsh/papaja"><code>papaja</code></a> package lets you write APA conform manuscripts. Sadly only in R Markdown, not in Quarto.</p>
</section>
<section id="apaquarto" class="level2">
<h2 class="anchored" data-anchor-id="apaquarto">apaquarto</h2>
<p>Alternatively, I’ve found (but not yet tested in a whole project) the <a href="https://wjschne.github.io/apaquarto/">apaquarto</a> extension. You can install via the <strong>Terminal</strong> (not the R Console):</p>
<pre><code>## Set the working directory
cd path/to/my/folder

## Use the Quarto Template
quarto use wjschne/apaquarto</code></pre>
<div class="callout callout-style-default callout-note callout-titled">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-4-contents" aria-controls="callout-4" aria-expanded="false" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Via R Console
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-4" class="callout-4-contents callout-collapse collapse">
<div class="callout-body-container callout-body">
<p>Alternativley, you can also try to install via the R Console, however, it didn’t work for quite some people:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb33" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb33-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">setwd</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"home/my_project"</span>) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Make sure the folder is empty</span></span>
<span id="cb33-2">quarto<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">quarto_use_template</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"wjschne/apaquarto"</span>)</span></code></pre></div>
</div>
</div>
</div>
</div>
<p>This will create the necessary files in your folder. Update the <code>.qmd</code> file with the same name as your folder. I’d suggest to also create a RStudio-project there, and maybe structure your files into multiple folders (data, R-Scripts …).<br>
The template will label your tables and figures correctly, and format the bibliography as well as the whole document.<br>
The tables can be build with the packages presented in the last chapter.</p>
</section>
<section id="word-templates" class="level2">
<h2 class="anchored" data-anchor-id="word-templates">Word templates</h2>
<p>If you want a word file as output (maybe some journal or co-author requires you to), you can do that easily by setting <code>format: docx</code> in your yaml header. If you don’t use a template like <code>apaquarto</code>, you can also style your own <a href="https://quarto.org/docs/output-formats/ms-word-templates.html">word template</a> simply by changing the styles in a template word file and then load the template file into your quarto document with</p>
<pre><code>format:
  docx:
    reference-doc: custom-reference-doc.docx</code></pre>
<p>in the YAML header. Take a look at the <a href="https://quarto.org/docs/output-formats/ms-word-templates.html">official documentation</a> for more detailled info.</p>
<div class="callout callout-style-default callout-tip callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Split your project
</div>
</div>
<div class="callout-body-container callout-body">
<p>I recommend that you split up your project into many subfiles, that get merged in the end in a main document. In my opinion, this makes everything a lot easier to overview, because working with quarto makes it easy to just put <strong>everything</strong> from data preperation to reporting into one huge, confousing document. For example, you can put R-Functions into a own script and source it with <code>source(functions.R)</code>. You can also put each chapter into a own <code>.qmd</code> file, and merge them together in a main document. Take a look at <a href="https://quarto.org/docs/authoring/includes.html">include</a> for some input on how to do that.</p>
</div>
</div>
</section>
</section>
<section id="exercises" class="level1">
<h1>Exercises</h1>
<div class="tabset-margin-container"></div><div class="panel-tabset">
<ul class="nav nav-tabs"><li class="nav-item"><a class="nav-link active" id="tabset-1-1-tab" data-bs-toggle="tab" data-bs-target="#tabset-1-1" aria-controls="tabset-1-1" aria-selected="true">Markdown Exercises</a></li><li class="nav-item"><a class="nav-link" id="tabset-1-2-tab" data-bs-toggle="tab" data-bs-target="#tabset-1-2" aria-controls="tabset-1-2" aria-selected="false">APA Exercises</a></li><li class="nav-item"><a class="nav-link" id="tabset-1-3-tab" data-bs-toggle="tab" data-bs-target="#tabset-1-3" aria-controls="tabset-1-3" aria-selected="false">Bonus</a></li></ul>
<div class="tab-content">
<div id="tabset-1-1" class="tab-pane active" aria-labelledby="tabset-1-1-tab">
<ol start="0" type="1">
<li>Set up a new RStudio project in a new directory.</li>
<li>Create an empty Quarto file.</li>
<li>Fill it with a “mini-Analysis” of the <code>characters</code> and <code>psych_stats</code> data sets. You can use the code from the <a href="https://nickhaf.github.io/r_tutorial/qmd/plotting/plotting_exercise.html">Plotting Exercise</a>, for now <strong>not</strong> in APA style (we will do this next week). This Quarto file should contain:</li>
</ol>
<ul>
<li>A YAML header.</li>
<li>Invisible code chunks for data preparation (you will have to merge the <code>characters</code> and <code>psych_stats</code> data sets, take a look at Tip&nbsp;1).</li>
<li>Some little text body (not important whats written there).</li>
<li>A little labeled table that also gets mentioned in the text body.</li>
<li>At least one plot that gets mentioned in the text body.</li>
<li>Own references.</li>
</ul>
<p>Don’t spent too much time on what to write and on the code, you can just copy the code we wrote in the previous plotting exercises.</p>
<div id="tip-prep" class="callout callout-style-default callout-tip callout-titled">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-6-contents" aria-controls="callout-6" aria-expanded="false" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Tip&nbsp;1: Hint
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-6" class="callout-6-contents callout-collapse collapse">
<div class="callout-body-container callout-body">
<p>Prepare your data with:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb35" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb35-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># install.packages("tidyverse")</span></span>
<span id="cb35-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># install.packages("here")</span></span>
<span id="cb35-3"></span>
<span id="cb35-4"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(tidyverse)</span>
<span id="cb35-5"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(here)</span></code></pre></div>
<div class="cell-output cell-output-stderr">
<pre><code>here() starts at /home/runner/work/IQB-Methods/IQB-Methods</code></pre>
</div>
<div class="sourceCode cell-code" id="cb37" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb37-1"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## Load the data</span></span>
<span id="cb37-2">characters <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">readRDS</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">file =</span> here<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">here</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"raw_data"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"characters.rds"</span>))</span>
<span id="cb37-3">psych_stats <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">read.csv</span>(</span>
<span id="cb37-4">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">file =</span> here<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">here</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"raw_data"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"psych_stats.csv"</span>),</span>
<span id="cb37-5">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">sep =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">";"</span></span>
<span id="cb37-6">)</span>
<span id="cb37-7"></span>
<span id="cb37-8"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## Reshape into long format:</span></span>
<span id="cb37-9">psych_stats <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> psych_stats <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb37-10">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">pivot_longer</span>(</span>
<span id="cb37-11">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">cols =</span> messy_neat<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span>innocent_jaded,</span>
<span id="cb37-12">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">names_to =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"question"</span>,</span>
<span id="cb37-13">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">values_to =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"rating"</span></span>
<span id="cb37-14">  )</span>
<span id="cb37-15"></span>
<span id="cb37-16"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## Merge it</span></span>
<span id="cb37-17">characters_stats <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">merge</span>(</span>
<span id="cb37-18">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> characters,</span>
<span id="cb37-19">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> psych_stats,</span>
<span id="cb37-20">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">by.x =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"id"</span>,</span>
<span id="cb37-21">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">by.y =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"char_id"</span></span>
<span id="cb37-22">)</span></code></pre></div>
</div>
</div>
</div>
</div>
<ol start="3" type="1">
<li>Add a small “mini-analysis”, where you fit some kind of model and describe it in the text and/or in a table.</li>
</ol>
<div class="callout callout-style-default callout-tip callout-titled">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-7-contents" aria-controls="callout-7" aria-expanded="false" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Hint
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-7" class="callout-7-contents callout-collapse collapse">
<div class="callout-body-container callout-body">
<p>One idea would be a linear mixed model investigating the influence of the notability rating on the rating on a specific item, like <code>messy_neat</code></p>
<div class="cell">
<div class="sourceCode cell-code" id="cb38" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb38-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(lme4)</span>
<span id="cb38-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(lmerTest) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># for pvalues of fixed effects. </span></span>
<span id="cb38-3"></span>
<span id="cb38-4">mod_dat <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> characters_stats <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb38-5">  dplyr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">filter</span>(question <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"messy_neat"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb38-6">  dplyr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">group_by</span>(uni_name) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb38-7">  <span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## center for interpretability:</span></span>
<span id="cb38-8">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mutate</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">notability_uni_mean =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mean</span>(notability, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">na.rm =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb38-9">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mutate</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">notability_centered =</span> notability <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> notability_uni_mean)</span>
<span id="cb38-10"></span>
<span id="cb38-11">mod1 <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">lmer</span>(rating <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span> notability_centered <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|</span>name) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|</span>uni_name), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">data =</span> mod_dat)</span></code></pre></div>
</div>
</div>
</div>
</div>
<ol start="4" type="1">
<li>Render your file into pdf, word and html.</li>
</ol>
</div>
<div id="tabset-1-2" class="tab-pane" aria-labelledby="tabset-1-2-tab">
<ol start="0" type="1">
<li>Create a fresh, empty folder for this exercise.</li>
<li>Install the <code>apaquarto</code> template.</li>
</ol>
<div class="callout callout-style-default callout-tip callout-titled">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-8-contents" aria-controls="callout-8" aria-expanded="false" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Hint
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-8" class="callout-8-contents callout-collapse collapse">
<div class="callout-body-container callout-body">
<ul>
<li><p>Make sure you have a current version of quarto installed. If not, download from <a href="https://quarto.org/docs/download/">here</a> and install. Restart RStudio, it should find the new quarto installation automatically.</p></li>
<li><p>Make sure to set the working directory to an empty folder before installing:</p></li>
</ul>
<div class="cell">
<div class="sourceCode cell-code" id="cb39" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb39-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">setwd</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"home/my_project"</span>) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Make sure the folder is empty</span></span>
<span id="cb39-2">quarto<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">quarto_use_template</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"wjschne/apaquarto"</span>)</span></code></pre></div>
</div>
</div>
</div>
</div>
<ol start="2" type="1">
<li><p>Create a RStudio project in your directory and open it.</p></li>
<li><p>Repeat the analysis you’ve done in the previous exercise (just copy the code), but this time focus on the APA formating aspect of everything. Try to use as many features we’ve talked about before in your script, especially the automatic table and figure captions and numeration.</p></li>
<li><p>Convert your manuscript into a word file and a PDF.</p></li>
</ol>
</div>
<div id="tabset-1-3" class="tab-pane" aria-labelledby="tabset-1-3-tab">
<ol start="5" type="1">
<li>Split up your document into multiple files. This is kind of a preference thing, however I find it easier to keep an overview if I split up my chapters and R code and don’t have a huge <code>.qmd</code> file containing everything. So try it! Create a folder called <code>docs</code> or something similar. It can contain files for functions, for data preperation etc, and can be loaded into your main script with <code>source()</code>. Create another folder called <code>chapters</code> where you put the <code>.qmd</code> files for the single chapters of your work. In the parent directory use a main <code>.qmd</code> file that brings everything together (either with source, or, in the case of other <code>.qmd</code> files, with <code>{{&lt; include _content.qmd &gt;}}</code> ).</li>
</ol>
</div>
</div>
</div>


</section>


<div id="quarto-appendix" class="default"><section id="footnotes" class="footnotes footnotes-end-of-document"><h2 class="anchored quarto-appendix-heading">Footnotes</h2>

<ol>
<li id="fn1"><p>Image by <a href="https://unsplash.com/de/@towfiqu999999?utm_content=creditCopyText&amp;utm_medium=referral&amp;utm_source=unsplash">Towfiqu barbhuiya</a> on <a href="https://unsplash.com/de/fotos/eine-nahaufnahme-eines-papierstapels-auf-einem-tisch-KKHs1e2yiwc?utm_content=creditCopyText&amp;utm_medium=referral&amp;utm_source=unsplash">Unsplash</a>.↩︎</p></li>
</ol>
</section></div> ]]></description>
  <category>R</category>
  <category>quarto</category>
  <category>R-SIG</category>
  <category>intro</category>
  <category>tutorial</category>
  <guid>https://iqb-research.github.io/IQB-Methods/docs/r_sig/24_07_15_quarto_1/</guid>
  <pubDate>Mon, 15 Jul 2024 00:00:00 GMT</pubDate>
  <media:content url="https://iqb-research.github.io/IQB-Methods/docs/r_sig/24_07_15_quarto_1/manuscript.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Plotting with ggplot2</title>
  <dc:creator>Nicklas Hafiz</dc:creator>
  <link>https://iqb-research.github.io/IQB-Methods/docs/r_sig/24_06_03_ggplot2/</link>
  <description><![CDATA[ 




<p><img src="https://iqb-research.github.io/IQB-Methods/docs/r_sig/24_06_03_ggplot2/plotting.jpg" class="img-fluid"><sup>1</sup></p>
<p>A ggplot2-tutorial I’ve created can be found <a href="https://nickhaf.github.io/r_tutorial/qmd/plotting/plotting.html">here</a>.</p>




<div id="quarto-appendix" class="default"><section id="footnotes" class="footnotes footnotes-end-of-document"><h2 class="anchored quarto-appendix-heading">Footnotes</h2>

<ol>
<li id="fn1"><p>Image by <a href="https://www.bing.com/images/create/a-scientist-moulding-a-plot-of-data-by-hand/1-66587edc1e8f43589fdc865731f162f6?id=Pw2nhqhO37f3lXFK0VoYZQ%3D%3D&amp;view=detailv2&amp;idpp=genimg&amp;idpclose=1&amp;thid=OIG2.1wR3ZVvAOQy3uyh0hWET&amp;form=SYDBIC">Bing Copilot</a>.↩︎</p></li>
</ol>
</section></div> ]]></description>
  <category>R</category>
  <category>tidyverse</category>
  <category>plots</category>
  <category>R-SIG</category>
  <category>tutorial</category>
  <guid>https://iqb-research.github.io/IQB-Methods/docs/r_sig/24_06_03_ggplot2/</guid>
  <pubDate>Mon, 03 Jun 2024 00:00:00 GMT</pubDate>
  <media:content url="https://iqb-research.github.io/IQB-Methods/docs/r_sig/24_06_03_ggplot2/plotting.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Column-wise operations in the tidyverse</title>
  <dc:creator>Nicklas Hafiz</dc:creator>
  <link>https://iqb-research.github.io/IQB-Methods/docs/r_sig/24_04_08_tidyverse_column_wise/</link>
  <description><![CDATA[ 




<p><img src="https://iqb-research.github.io/IQB-Methods/docs/r_sig/24_04_08_tidyverse_column_wise/columns.jpg" class="img-fluid"><sup>1</sup></p>
<div class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(tidyverse)</span>
<span id="cb1-2"></span>
<span id="cb1-3">athletes <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">readRDS</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">file =</span> here<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">here</span>(  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"raw_data"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"athletes.rds"</span>))</span></code></pre></div>
</div>
<section id="column-wise-operations-with-across" class="level2">
<h2 class="anchored" data-anchor-id="column-wise-operations-with-across">Column-wise operations with <code>across()</code></h2>
<p>Instead of looping over columns with a <a href="https://iqb-research.github.io/IQB-Methods/posts/r_sig/23_03_20_forloops/">for-loop</a>, we can also use <code>across()</code> in combination with other <code>tidyverse</code> functions.</p>
<div class="callout callout-style-default callout-note callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
<code>mutate_...()</code>
</div>
</div>
<div class="callout-body-container callout-body">
<p>The functions <code>mutate_all()</code>, <code>mutate_at()</code>, and <code>mutate_if()</code> do the same, but are superseded. This means they still work, but the <code>tidyverse</code> team recommends to use <code>across()</code> instead.</p>
</div>
</div>
<p>Across can take column names and a function that should be applied to the selected columns:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb2-1"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## Here we transform the Height and Weight columns to the type character:</span></span>
<span id="cb2-2">athletes <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb2-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mutate</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">across</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(Height, Weight), as.character)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb2-4">  str</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>'data.frame':   270767 obs. of  16 variables:
 $ NOC   : chr  "AFG" "AFG" "AFG" "AFG" ...
 $ ID    : int  132181 87371 44977 502 109153 29626 1076 121376 80210 87374 ...
 $ Name  : chr  "Najam Yahya" "Ahmad Jahan Nuristani" "Mohammad Halilula" "Ahmad Shah Abouwi" ...
 $ Sex   : chr  "M" "M" "M" "M" ...
 $ Age   : int  NA NA 28 NA 24 28 28 NA NA NA ...
 $ Height: chr  NA NA "163" NA ...
 $ Weight: chr  NA NA "57" NA ...
 $ Team  : chr  "Afghanistan" "Afghanistan" "Afghanistan" "Afghanistan" ...
 $ Games : chr  "1956 Summer" "1948 Summer" "1980 Summer" "1956 Summer" ...
 $ Year  : int  1956 1948 1980 1956 1964 1960 1936 1956 1972 1956 ...
 $ Season: chr  "Summer" "Summer" "Summer" "Summer" ...
 $ City  : chr  "Melbourne" "London" "Moskva" "Melbourne" ...
 $ Sport : chr  "Hockey" "Hockey" "Wrestling" "Hockey" ...
 $ Event : chr  "Hockey Men's Hockey" "Hockey Men's Hockey" "Wrestling Men's Bantamweight, Freestyle" "Hockey Men's Hockey" ...
 $ Medal : chr  NA NA NA NA ...
 $ Region: chr  "Afghanistan" "Afghanistan" "Afghanistan" "Afghanistan" ...</code></pre>
</div>
</div>
<p>But it is also possible to select columns based on a selection function:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb4-1"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## And here we transform all numeric columns into character:</span></span>
<span id="cb4-2">athletes <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb4-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mutate</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">across</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">where</span>(is.numeric), as.character)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb4-4">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">str</span>()</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>'data.frame':   270767 obs. of  16 variables:
 $ NOC   : chr  "AFG" "AFG" "AFG" "AFG" ...
 $ ID    : chr  "132181" "87371" "44977" "502" ...
 $ Name  : chr  "Najam Yahya" "Ahmad Jahan Nuristani" "Mohammad Halilula" "Ahmad Shah Abouwi" ...
 $ Sex   : chr  "M" "M" "M" "M" ...
 $ Age   : chr  NA NA "28" NA ...
 $ Height: chr  NA NA "163" NA ...
 $ Weight: chr  NA NA "57" NA ...
 $ Team  : chr  "Afghanistan" "Afghanistan" "Afghanistan" "Afghanistan" ...
 $ Games : chr  "1956 Summer" "1948 Summer" "1980 Summer" "1956 Summer" ...
 $ Year  : chr  "1956" "1948" "1980" "1956" ...
 $ Season: chr  "Summer" "Summer" "Summer" "Summer" ...
 $ City  : chr  "Melbourne" "London" "Moskva" "Melbourne" ...
 $ Sport : chr  "Hockey" "Hockey" "Wrestling" "Hockey" ...
 $ Event : chr  "Hockey Men's Hockey" "Hockey Men's Hockey" "Wrestling Men's Bantamweight, Freestyle" "Hockey Men's Hockey" ...
 $ Medal : chr  NA NA NA NA ...
 $ Region: chr  "Afghanistan" "Afghanistan" "Afghanistan" "Afghanistan" ...</code></pre>
</div>
</div>
<p>We can also specify our own transformation function.</p>
</section>
<section id="using-tidyverse-functions-in-loops" class="level2">
<h2 class="anchored" data-anchor-id="using-tidyverse-functions-in-loops">Using tidyverse functions in loops</h2>
<p>When using tidyverse syntax within a loop, we might run into the problem that the tidyverse function can’t deal with our iteration counter like we are used to:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb6-1"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## Trying to transform the Height and Weight column to character using a for-loop.</span></span>
<span id="cb6-2"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## Note: Normally across() would be a better option in this case (and most of the time anyways).</span></span>
<span id="cb6-3"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##       But sometimes a good old fashioned for-loop might be easier to programm to get the job done, </span></span>
<span id="cb6-4"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##       in which case one should keep some specifics in mind: </span></span>
<span id="cb6-5"></span>
<span id="cb6-6"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## This throws an error: </span></span>
<span id="cb6-7">athletes_2 <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> athletes</span>
<span id="cb6-8"></span>
<span id="cb6-9"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span>(i <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Height"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Weight"</span>)){</span>
<span id="cb6-10">  athletes_2 <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> athletes_2 <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb6-11">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mutate</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">i =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">as.character</span>(.<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>i))</span>
<span id="cb6-12">}</span></code></pre></div>
</div>
<p>This doesn’t work, because we are trying to program a function using <a href="https://dplyr.tidyverse.org/articles/programming.html#data-masking">data masking</a>. Data masking just means that we don’t have to type <code>athletes$Height</code> in a <code>tidyverse</code> function, but simply <code>Height</code>, because the function knows this refers to a column in the current data.frame.</p>
<section id="loops" class="level3">
<h3 class="anchored" data-anchor-id="loops">Loops</h3>
<ul>
<li>In the case of <code>mutate()</code>, we have to use <strong>dynamic dots</strong>, which need to used if we want to create names programmatically: <code>:=</code> instead of <code>=</code>.</li>
<li>We need to <strong>embrace</strong> the changeable variable (either in a function or a loop) like this: <code>{var}</code>.</li>
<li>In <code>mutate()</code>, we can also simply write <code>"{var}_..."</code> to paste together a new column name.</li>
<li>If we just want to extract data, we can use the <code>.data</code> pronoun with <code>[[</code> (<a href="https://dplyr.tidyverse.org/articles/programming.html#indirection">see here</a>). <code>.data</code> helps to clear up ambiguity, it makes clear you want to extract a column from the current data.frame. This is something different than the <code>.</code>, which can be read like “data up to this point” and references the data that gets put into the function where the <code>.</code> is used. The <code>.</code> actually stands for a data.frame, while <code>.data</code> is used for symbol evaluation.</li>
</ul>
<div class="cell">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb7-1">athletes_2 <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> athletes</span>
<span id="cb7-2"></span>
<span id="cb7-3"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span>(i <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Height"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Weight"</span>)){</span>
<span id="cb7-4">  athletes_2 <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> athletes_2 <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb7-5">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mutate</span>({{i}} <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">as.character</span>(.[[i]]))</span>
<span id="cb7-6">}</span>
<span id="cb7-7"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">str</span>(athletes_2)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>'data.frame':   270767 obs. of  16 variables:
 $ NOC   : chr  "AFG" "AFG" "AFG" "AFG" ...
 $ ID    : int  132181 87371 44977 502 109153 29626 1076 121376 80210 87374 ...
 $ Name  : chr  "Najam Yahya" "Ahmad Jahan Nuristani" "Mohammad Halilula" "Ahmad Shah Abouwi" ...
 $ Sex   : chr  "M" "M" "M" "M" ...
 $ Age   : int  NA NA 28 NA 24 28 28 NA NA NA ...
 $ Height: chr  NA NA "163" NA ...
 $ Weight: chr  NA NA "57" NA ...
 $ Team  : chr  "Afghanistan" "Afghanistan" "Afghanistan" "Afghanistan" ...
 $ Games : chr  "1956 Summer" "1948 Summer" "1980 Summer" "1956 Summer" ...
 $ Year  : int  1956 1948 1980 1956 1964 1960 1936 1956 1972 1956 ...
 $ Season: chr  "Summer" "Summer" "Summer" "Summer" ...
 $ City  : chr  "Melbourne" "London" "Moskva" "Melbourne" ...
 $ Sport : chr  "Hockey" "Hockey" "Wrestling" "Hockey" ...
 $ Event : chr  "Hockey Men's Hockey" "Hockey Men's Hockey" "Wrestling Men's Bantamweight, Freestyle" "Hockey Men's Hockey" ...
 $ Medal : chr  NA NA NA NA ...
 $ Region: chr  "Afghanistan" "Afghanistan" "Afghanistan" "Afghanistan" ...</code></pre>
</div>
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb9-1"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span>(i <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Height"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Weight"</span>)){</span>
<span id="cb9-2">  athletes_2 <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> athletes_2 <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb9-3">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mutate</span>({{i}} <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">as.character</span>({{i}}))</span>
<span id="cb9-4">}</span>
<span id="cb9-5"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">str</span>(athletes_2)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>'data.frame':   270767 obs. of  16 variables:
 $ NOC   : chr  "AFG" "AFG" "AFG" "AFG" ...
 $ ID    : int  132181 87371 44977 502 109153 29626 1076 121376 80210 87374 ...
 $ Name  : chr  "Najam Yahya" "Ahmad Jahan Nuristani" "Mohammad Halilula" "Ahmad Shah Abouwi" ...
 $ Sex   : chr  "M" "M" "M" "M" ...
 $ Age   : int  NA NA 28 NA 24 28 28 NA NA NA ...
 $ Height: chr  "Height" "Height" "Height" "Height" ...
 $ Weight: chr  "Weight" "Weight" "Weight" "Weight" ...
 $ Team  : chr  "Afghanistan" "Afghanistan" "Afghanistan" "Afghanistan" ...
 $ Games : chr  "1956 Summer" "1948 Summer" "1980 Summer" "1956 Summer" ...
 $ Year  : int  1956 1948 1980 1956 1964 1960 1936 1956 1972 1956 ...
 $ Season: chr  "Summer" "Summer" "Summer" "Summer" ...
 $ City  : chr  "Melbourne" "London" "Moskva" "Melbourne" ...
 $ Sport : chr  "Hockey" "Hockey" "Wrestling" "Hockey" ...
 $ Event : chr  "Hockey Men's Hockey" "Hockey Men's Hockey" "Wrestling Men's Bantamweight, Freestyle" "Hockey Men's Hockey" ...
 $ Medal : chr  NA NA NA NA ...
 $ Region: chr  "Afghanistan" "Afghanistan" "Afghanistan" "Afghanistan" ...</code></pre>
</div>
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb11-1"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## With programmatically built new columns: </span></span>
<span id="cb11-2">athletes_3 <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> athletes</span>
<span id="cb11-3"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span>(i <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Height"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Weight"</span>)){</span>
<span id="cb11-4">  athletes_3 <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> athletes_3 <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb11-5">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mutate</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"{i}_char"</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">as.character</span>(.[[i]]))</span>
<span id="cb11-6">}</span>
<span id="cb11-7"></span>
<span id="cb11-8"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">str</span>(athletes_3)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>'data.frame':   270767 obs. of  18 variables:
 $ NOC        : chr  "AFG" "AFG" "AFG" "AFG" ...
 $ ID         : int  132181 87371 44977 502 109153 29626 1076 121376 80210 87374 ...
 $ Name       : chr  "Najam Yahya" "Ahmad Jahan Nuristani" "Mohammad Halilula" "Ahmad Shah Abouwi" ...
 $ Sex        : chr  "M" "M" "M" "M" ...
 $ Age        : int  NA NA 28 NA 24 28 28 NA NA NA ...
 $ Height     : int  NA NA 163 NA NA 168 NA NA NA NA ...
 $ Weight     : num  NA NA 57 NA 74 73 NA NA 57 NA ...
 $ Team       : chr  "Afghanistan" "Afghanistan" "Afghanistan" "Afghanistan" ...
 $ Games      : chr  "1956 Summer" "1948 Summer" "1980 Summer" "1956 Summer" ...
 $ Year       : int  1956 1948 1980 1956 1964 1960 1936 1956 1972 1956 ...
 $ Season     : chr  "Summer" "Summer" "Summer" "Summer" ...
 $ City       : chr  "Melbourne" "London" "Moskva" "Melbourne" ...
 $ Sport      : chr  "Hockey" "Hockey" "Wrestling" "Hockey" ...
 $ Event      : chr  "Hockey Men's Hockey" "Hockey Men's Hockey" "Wrestling Men's Bantamweight, Freestyle" "Hockey Men's Hockey" ...
 $ Medal      : chr  NA NA NA NA ...
 $ Region     : chr  "Afghanistan" "Afghanistan" "Afghanistan" "Afghanistan" ...
 $ Height_char: chr  NA NA "163" NA ...
 $ Weight_char: chr  NA NA "57" NA ...</code></pre>
</div>
</div>
<p>Beware of overwriting the same data.frame you put into <code>mutate()</code>! Otherwise the resulting data.frame will always be overwritten by the old one that always gets put into the function.</p>
</section>
<section id="functions" class="level3">
<h3 class="anchored" data-anchor-id="functions">Functions</h3>
<p>This also applies if we want to define a function with column names as arguments, using <code>tidyverse</code> inside. Here we need to embrace our variable as well to make it data masking friendly:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb13-1"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## This doesn't work:</span></span>
<span id="cb13-2">print_col <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(dat, var){</span>
<span id="cb13-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(dat <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">pull</span>(var))</span>
<span id="cb13-4">}</span>
<span id="cb13-5"></span>
<span id="cb13-6">athletes <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb13-7">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print_col</span>(Region)</span></code></pre></div>
</div>
<div class="cell" data-output.lines="4">
<div class="sourceCode cell-code" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb14-1"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## This works:</span></span>
<span id="cb14-2">print_col <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(dat, var){</span>
<span id="cb14-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(dat <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">pull</span>({{var}}))</span>
<span id="cb14-4">}</span>
<span id="cb14-5"></span>
<span id="cb14-6">athletes <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb14-7">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print_col</span>(Region)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>    [1] "Afghanistan"                      "Afghanistan"                     
    [3] "Afghanistan"                      "Afghanistan"                     
    [5] "Afghanistan"                      "Afghanistan"                     
    [7] "Afghanistan"                      "Afghanistan"                     
...</code></pre>
</div>
</div>
<div class="callout callout-style-default callout-note callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
!!sym()
</div>
</div>
<div class="callout-body-container callout-body">
<p>In previous SIG-Sessions we have used <code>!!sym()</code> for this, which also works, but is more to remember:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb16" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb16-1">athletes_2 <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> athletes</span>
<span id="cb16-2"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span>(i <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Height"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Weight"</span>)){</span>
<span id="cb16-3">  athletes_2 <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> athletes_2 <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb16-4">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mutate</span>(<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!!</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sym</span>(i) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">as.character</span>(<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!!</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sym</span>(i)))</span>
<span id="cb16-5">}</span>
<span id="cb16-6"></span>
<span id="cb16-7"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">str</span>(athletes_2)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>'data.frame':   270767 obs. of  16 variables:
 $ NOC   : chr  "AFG" "AFG" "AFG" "AFG" ...
 $ ID    : int  132181 87371 44977 502 109153 29626 1076 121376 80210 87374 ...
 $ Name  : chr  "Najam Yahya" "Ahmad Jahan Nuristani" "Mohammad Halilula" "Ahmad Shah Abouwi" ...
 $ Sex   : chr  "M" "M" "M" "M" ...
 $ Age   : int  NA NA 28 NA 24 28 28 NA NA NA ...
 $ Height: chr  NA NA "163" NA ...
 $ Weight: chr  NA NA "57" NA ...
 $ Team  : chr  "Afghanistan" "Afghanistan" "Afghanistan" "Afghanistan" ...
 $ Games : chr  "1956 Summer" "1948 Summer" "1980 Summer" "1956 Summer" ...
 $ Year  : int  1956 1948 1980 1956 1964 1960 1936 1956 1972 1956 ...
 $ Season: chr  "Summer" "Summer" "Summer" "Summer" ...
 $ City  : chr  "Melbourne" "London" "Moskva" "Melbourne" ...
 $ Sport : chr  "Hockey" "Hockey" "Wrestling" "Hockey" ...
 $ Event : chr  "Hockey Men's Hockey" "Hockey Men's Hockey" "Wrestling Men's Bantamweight, Freestyle" "Hockey Men's Hockey" ...
 $ Medal : chr  NA NA NA NA ...
 $ Region: chr  "Afghanistan" "Afghanistan" "Afghanistan" "Afghanistan" ...</code></pre>
</div>
</div>
</div>
</div>
</section>
</section>
<section id="exercise" class="level1">
<h1>Exercise</h1>
<ol start="0" type="1">
<li>Read the <code>characters.rds</code> and the <code>psych_stats.csv</code> into R (download <a href="https://github.com/iqb-research/IQB-Methods/tree/main/raw_data">here</a>).</li>
</ol>
<div class="callout callout-style-default callout-caution callout-titled">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-3-contents" aria-controls="callout-3" aria-expanded="false" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Solution
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-3" class="callout-3-contents callout-collapse collapse">
<div class="callout-body-container callout-body">
<div class="cell">
<div class="sourceCode cell-code" id="cb18" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb18-1">characters <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">readRDS</span>(here<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">here</span>(  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"raw_data"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"characters.rds"</span>))</span>
<span id="cb18-2">psych_stats <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">read.csv</span>(here<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">here</span>(  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"raw_data"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"psych_stats.csv"</span>), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">sep =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">";"</span>)</span></code></pre></div>
</div>
</div>
</div>
</div>
<ol type="1">
<li>Write a function that can standardize a numeric column. It should take a <code>data.frame</code> and a column as arguments. To standardize, the function should subtract the mean of the column from each of its raw values and then divide each difference by the standard deviation of the original variable.<br>
Finally, it should return a numeric vector containing the standardized values. Make the function work with data masking!</li>
</ol>
<div class="callout callout-style-default callout-tip callout-titled">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-4-contents" aria-controls="callout-4" aria-expanded="false" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Hint
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-4" class="callout-4-contents callout-collapse collapse">
<div class="callout-body-container callout-body">
<p>To extract a single column as a vector to do some operations on it you can use <code>pull()</code>.</p>
</div>
</div>
</div>
<div class="callout callout-style-default callout-caution callout-titled">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-5-contents" aria-controls="callout-5" aria-expanded="false" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Solution
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-5" class="callout-5-contents callout-collapse collapse">
<div class="callout-body-container callout-body">
<div class="cell">
<div class="sourceCode cell-code" id="cb19" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb19-1">standardize_var <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(dat, var){</span>
<span id="cb19-2">  column <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> dat <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb19-3">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">pull</span>({{var}}) </span>
<span id="cb19-4">  </span>
<span id="cb19-5"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span>(<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">is.numeric</span>(column)){<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">stop</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">paste0</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Please provide a numeric column! Yours has the type '"</span>, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">typeof</span>(column), <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"'."</span>))}</span>
<span id="cb19-6"></span>
<span id="cb19-7">  column_std <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> (column <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mean</span>(column, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">na.rm =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sd</span>(column, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">na.rm =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># automatically remove NAs</span></span>
<span id="cb19-8">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">return</span>(column_std)</span>
<span id="cb19-9">}</span>
<span id="cb19-10"></span>
<span id="cb19-11"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## test the function:</span></span>
<span id="cb19-12"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># standardize_var(athletes, Region)</span></span>
<span id="cb19-13"></span>
<span id="cb19-14">standardized_col <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> psych_stats <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span> </span>
<span id="cb19-15">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">standardize_var</span>(messy_neat)</span>
<span id="cb19-16"></span>
<span id="cb19-17"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mean</span>(standardized_col) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">round</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] 0</code></pre>
</div>
<div class="sourceCode cell-code" id="cb21" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb21-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sd</span>(standardized_col)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] 1</code></pre>
</div>
</div>
</div>
</div>
</div>
<ol start="2" type="1">
<li>Apply this function within a for-loop on 10 columns of your choice. Add the standardized columns as new columns to your data frame.</li>
</ol>
<div class="callout callout-style-default callout-tip callout-titled">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-6-contents" aria-controls="callout-6" aria-expanded="false" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Hint
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-6" class="callout-6-contents callout-collapse collapse">
<div class="callout-body-container callout-body">
<p>Always overwrite the same data.frame you put into the function.</p>
<p><code>for(i in c("col_1", "col_2"){dat_new &lt;- dat %&gt;% ...}</code> won’t work because we always overwrite the dat_new object, where our new column was added, with our old data.frame.</p>
</div>
</div>
</div>
<div class="callout callout-style-default callout-caution callout-titled">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-7-contents" aria-controls="callout-7" aria-expanded="false" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Solution
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-7" class="callout-7-contents callout-collapse collapse">
<div class="callout-body-container callout-body">
<div class="cell">
<div class="sourceCode cell-code" id="cb23" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb23-1"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span>(i <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">colnames</span>(psych_stats)[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">20</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">29</span>]){</span>
<span id="cb23-2"> psych_stats <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> psych_stats <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb23-3">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mutate</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"{i}_std"</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">standardize_var</span>(., .data[[i]])) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># The point means we use the object called before the last pipe, in this case psych_stats. </span></span>
<span id="cb23-4">}</span>
<span id="cb23-5"></span>
<span id="cb23-6"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mean</span>(psych_stats<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>flexible_rigid_std)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] -1.582513e-16</code></pre>
</div>
<div class="sourceCode cell-code" id="cb25" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb25-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sd</span>(psych_stats<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>flexible_rigid_std)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] 1</code></pre>
</div>
</div>
</div>
</div>
</div>
<ol start="3" type="1">
<li>Now build the same standardization function, but it should only take a numeric vector as input, not a whole <code>data.frame</code>.</li>
</ol>
<div class="callout callout-style-default callout-caution callout-titled">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-8-contents" aria-controls="callout-8" aria-expanded="false" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Solution
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-8" class="callout-8-contents callout-collapse collapse">
<div class="callout-body-container callout-body">
<div class="cell">
<div class="sourceCode cell-code" id="cb27" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb27-1">standardize_var_2 <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(vec){</span>
<span id="cb27-2">  <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span>(<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">is.numeric</span>(vec)){<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">stop</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">paste0</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Please provide a numeric vector! Yours has the type '"</span>, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">typeof</span>(vec), <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"'."</span>))}</span>
<span id="cb27-3">  (vec<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mean</span>(vec))<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sd</span>(vec)</span>
<span id="cb27-4">}</span>
<span id="cb27-5"></span>
<span id="cb27-6"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## Testing the function</span></span>
<span id="cb27-7"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">standardize_var_2</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] -1  0  1</code></pre>
</div>
<div class="sourceCode cell-code" id="cb29" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb29-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># standardize_var_2(c("a",2,3))</span></span></code></pre></div>
</div>
</div>
</div>
</div>
<ol start="4" type="1">
<li>Apply one of your two standardization functions onto the psych_stats <code>data.frame</code> using <code>across()</code>. The standardized columns should be added to the data frame. Think carefully about which one should be used in this context and why.<br>
This exercise is a little bit harder, so use google, StackOverflow and the help function <code>?</code> within R.</li>
</ol>
<div class="callout callout-style-default callout-tip callout-titled">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-9-contents" aria-controls="callout-9" aria-expanded="false" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Hint
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-9" class="callout-9-contents callout-collapse collapse">
<div class="callout-body-container callout-body">
<ul>
<li>Look at the documentation of <code>across()</code> to see how you can give new column names into <code>mutate()</code> from within <code>across()</code>.</li>
<li>It’s probably easier to use a function that only takes a vector, and not the whole data.frame within <code>across()</code>.</li>
</ul>
</div>
</div>
</div>
<div class="callout callout-style-default callout-caution callout-titled">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-10-contents" aria-controls="callout-10" aria-expanded="false" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Solution
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-10" class="callout-10-contents callout-collapse collapse">
<div class="callout-body-container callout-body">
<div class="cell">
<div class="sourceCode cell-code" id="cb30" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb30-1">psych_stats_std <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> psych_stats <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb30-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mutate</span>(</span>
<span id="cb30-3">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">across</span>(</span>
<span id="cb30-4">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.cols =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">where</span>(is.numeric), </span>
<span id="cb30-5">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.fns =</span> standardize_var_2, </span>
<span id="cb30-6">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.names =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"{.col}_standardized"</span></span>
<span id="cb30-7">    )</span>
<span id="cb30-8">  )</span>
<span id="cb30-9"></span>
<span id="cb30-10"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mean</span>(psych_stats_std<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>innocent_jaded_standardized)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] 4.127042e-18</code></pre>
</div>
</div>
<p>I used the function that only takes a vector: using it within <code>across()</code> made it possible to just provide the function, and not having to deal with the extra data argument. The only argument in my function is the vector, and it is more naturally for across to handle, because it already applies a function to a column, so the extraction is not necessary.</p>
</div>
</div>
</div>


</section>


<div id="quarto-appendix" class="default"><section id="footnotes" class="footnotes footnotes-end-of-document"><h2 class="anchored quarto-appendix-heading">Footnotes</h2>

<ol>
<li id="fn1"><p>Image by <a href="https://unsplash.com/de/@1188low?utm_content=creditCopyText&amp;utm_medium=referral&amp;utm_source=unsplash">Darryl Low</a> on <a href="https://unsplash.com/de/fotos/graustufenfoto-eines-gebaudes-pXqZs5TG2HU?utm_content=creditCopyText&amp;utm_medium=referral&amp;utm_source=unsplash">Unsplash</a>.↩︎</p></li>
</ol>
</section></div> ]]></description>
  <category>R</category>
  <category>tidyverse</category>
  <category>loops</category>
  <category>R-SIG</category>
  <category>tutorial</category>
  <guid>https://iqb-research.github.io/IQB-Methods/docs/r_sig/24_04_08_tidyverse_column_wise/</guid>
  <pubDate>Mon, 08 Apr 2024 00:00:00 GMT</pubDate>
  <media:content url="https://iqb-research.github.io/IQB-Methods/docs/r_sig/24_04_08_tidyverse_column_wise/columns.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Data wrangling in the tidyverse</title>
  <dc:creator>Nicklas Hafiz</dc:creator>
  <link>https://iqb-research.github.io/IQB-Methods/docs/r_sig/24_03_25_tidyverse_wrangling/</link>
  <description><![CDATA[ 




<p><img src="https://iqb-research.github.io/IQB-Methods/docs/r_sig/24_03_25_tidyverse_wrangling/data_wrangling.jpg" class="img-fluid"><sup>1</sup></p>
<div class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(tidyverse)</span></code></pre></div>
</div>
<p>The <a href="https://iqb-research.github.io/IQB-Methods/posts/r_sig/24_01_26_tidyverse_intro/"><code>tidyverse</code></a> provides many tools for wrangling data, from selecting, sorting or renaming columns over filtering specific rows according to complex conditions to building new columns according to values in other columns. Let’s take a look at the most important ones. We will use the (<code>athletes</code>)[] dataset in the examples:</p>
<div class="callout callout-style-default callout-caution no-icon callout-titled">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-1-contents" aria-controls="callout-1" aria-expanded="false" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon no-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Load the data
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-1" class="callout-1-contents callout-collapse collapse">
<div class="callout-body-container callout-body">
<div class="cell">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb2-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># install.packages("tidyverse")</span></span>
<span id="cb2-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># install.packages("here")</span></span>
<span id="cb2-3"></span>
<span id="cb2-4"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(tidyverse)</span>
<span id="cb2-5"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(here)</span>
<span id="cb2-6"></span>
<span id="cb2-7">athletes <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">readRDS</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">file =</span> here<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">here</span>(  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"raw_data"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"athletes.rds"</span>))</span></code></pre></div>
</div>
</div>
</div>
</div>
<section id="select-columns" class="level2" data-number="1">
<h2 data-number="1" class="anchored" data-anchor-id="select-columns"><span class="header-section-number">1</span> <code>select()</code> columns</h2>
<p>Selecting columns from a data.frame is pretty straight forward:</p>
<div class="cell" data-output.lines="4">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb3-1">athletes <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb3-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">select</span>(Year, Sport)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>      Year                     Sport
1     1956                    Hockey
2     1948                    Hockey
3     1980                 Wrestling
...</code></pre>
</div>
</div>
<p>Note how we don’t have to put the columns in <code>""</code>, and how we can simply seperate them by <code>,</code>.<br>
<code>select()</code> becomes especially useful when combined with <a href="https://dplyr.tidyverse.org/reference/select.html">selection helpers</a>:</p>
<div class="cell" data-output.lines="4">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb5-1"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## Select all columns starting with a Se</span></span>
<span id="cb5-2">athletes <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb5-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">select</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">starts_with</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Se"</span>))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>      Sex Season
1       M Summer
2       M Summer
3       M Summer
...</code></pre>
</div>
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb7-1"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## Select all columns containing the letters "ea"</span></span>
<span id="cb7-2">athletes <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb7-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">select</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">contains</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"ea"</span>))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>                                         Team Year Season
1                                 Afghanistan 1956 Summer
2                                 Afghanistan 1948 Summer
3                                 Afghanistan 1980 Summer
...</code></pre>
</div>
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb9-1"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## Or, we can combine them:</span></span>
<span id="cb9-2">athletes <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span> </span>
<span id="cb9-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">select</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ends_with</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"t"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">contains</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"igh"</span>))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>      Height Weight
1         NA     NA
2         NA     NA
3        163   57.0
...</code></pre>
</div>
</div>
</section>
<section id="filter-rows" class="level2" data-number="2">
<h2 data-number="2" class="anchored" data-anchor-id="filter-rows"><span class="header-section-number">2</span> <code>filter()</code> rows</h2>
<p>We can use <code>filter</code> to subset rows according to their values in specific columns:</p>
<div class="cell" data-output.lines="4">
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb11-1"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## All Volleyballers</span></span>
<span id="cb11-2">athletes <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb11-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">filter</span>(Sport <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Volleyball"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb11-4">  str</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>'data.frame':   3404 obs. of  16 variables:
 $ NOC   : chr  "ALG" "ALG" "ALG" "ALG" ...
 $ ID    : int  122168 73155 47642 74593 74593 117675 249 249 90117 90100 ...
 $ Name  : chr  "Faza Tsabet" "Narimne Madani" "Sehryne Hennaoui" "Nawal Mansouri" ...
...</code></pre>
</div>
<div class="sourceCode cell-code" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb13-1"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## All Judoka between 50 and 100 kg</span></span>
<span id="cb13-2">athletes <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb13-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">filter</span>(Sport <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Judo"</span>, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">between</span>(Weight, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">50</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb13-4">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">str</span>()</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>'data.frame':   2916 obs. of  16 variables:
 $ NOC   : chr  "AFG" "AFG" "AFG" "ALB" ...
 $ ID    : int  99303 33817 7050 58601 121096 9593 78883 5689 78882 9593 ...
 $ Name  : chr  "Friba Razayee" "Ajmal Faizzada" "Mohammad Tawfiq Bakhshi" "Majlinda Kelmendi" ...
...</code></pre>
</div>
<div class="sourceCode cell-code" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb15-1"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## All athletes with missing height</span></span>
<span id="cb15-2">athletes <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb15-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">filter</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">is.na</span>(Height)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb15-4">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">str</span>()</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>'data.frame':   60083 obs. of  16 variables:
 $ NOC   : chr  "AFG" "AFG" "AFG" "AFG" ...
 $ ID    : int  132181 87371 502 109153 1076 121376 80210 87374 6323 59344 ...
 $ Name  : chr  "Najam Yahya" "Ahmad Jahan Nuristani" "Ahmad Shah Abouwi" "Shakar Khan Shakar" ...
...</code></pre>
</div>
</div>
<p>Note how we can just write our conditions without connecting them with <code>&amp;</code> (<code>filter()</code> does that automatically for us). Also, we don’t have to put the column names into ““, because <code>filter()</code> knows that this are column names of the athletes data frame, which makes coding a bit more pleasant. Also, missing rows are automatically removed, which makes sense in many cases!</p>
</section>
<section id="pivot_...-longwide-format" class="level2" data-number="3">
<h2 data-number="3" class="anchored" data-anchor-id="pivot_...-longwide-format"><span class="header-section-number">3</span> <code>pivot_...()</code> long/wide format</h2>
<p>To reshape data.frames from long to wide or wide to long format we can use <code>pivot_wider()</code> and <code>pivot_longer()</code>:</p>
<p>Let’s define a simpler data.frame first:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb17-1">inhabitants_wide <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">data.frame</span>(</span>
<span id="cb17-2">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">country =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"China"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"India"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"USA"</span>),</span>
<span id="cb17-3">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">inhabitants_2021 =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1425893465</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1407563842</span>, <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NA</span>),</span>
<span id="cb17-4">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">inhabitants_2022 =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1425857720</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1420939232</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">338903174</span>)</span>
<span id="cb17-5">)</span>
<span id="cb17-6">inhabitants_wide</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>  country inhabitants_2021 inhabitants_2022
1   China       1425893465       1425857720
2   India       1407563842       1420939232
3     USA               NA        338903174</code></pre>
</div>
</div>
<div class="cell">
<div class="sourceCode cell-code" id="cb19" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb19-1">inhabitants_long <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> inhabitants_wide <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb19-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">pivot_longer</span>(</span>
<span id="cb19-3">    <span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## Select the columns we want to reshape:</span></span>
<span id="cb19-4">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">cols =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">starts_with</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"inhabitants"</span>),</span>
<span id="cb19-5">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">names_prefix =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"inhabitants_"</span>,</span>
<span id="cb19-6">    <span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## Define a new column where the column names will go to:</span></span>
<span id="cb19-7">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">names_to =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"year"</span>,</span>
<span id="cb19-8">    <span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## Define a new column where the values will go to:</span></span>
<span id="cb19-9">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">values_to =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"inhabitants"</span></span>
<span id="cb19-10">  )</span>
<span id="cb19-11"></span>
<span id="cb19-12"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">head</span>(inhabitants_long)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 6 × 3
  country year  inhabitants
  &lt;chr&gt;   &lt;chr&gt;       &lt;dbl&gt;
1 China   2021   1425893465
2 China   2022   1425857720
3 India   2021   1407563842
4 India   2022   1420939232
5 USA     2021           NA
6 USA     2022    338903174</code></pre>
</div>
</div>
<p>In other cases, it might happen that multiple variables are put into the same column, together with an identifier column:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb21" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb21-1">inhabitants_long_2</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>  country         variable      value
1   China             area    9597000
2   China inhabitants_2022 1425857720
3   India             area    3287000
4   India inhabitants_2022 1420939232
5     USA             area    9834000
6     USA inhabitants_2022  338903174</code></pre>
</div>
</div>
<p>In that case it can make sense to spread the the distinct variables into two columns:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb23" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb23-1">inhabitants_wide_2 <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> inhabitants_long_2 <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb23-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">pivot_wider</span>(</span>
<span id="cb23-3">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">id_cols =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"country"</span>,</span>
<span id="cb23-4">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">names_from =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"variable"</span>,</span>
<span id="cb23-5">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">values_from =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"value"</span></span>
<span id="cb23-6">  )</span>
<span id="cb23-7"></span>
<span id="cb23-8">inhabitants_wide_2</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 3 × 3
  country    area inhabitants_2022
  &lt;chr&gt;     &lt;dbl&gt;            &lt;dbl&gt;
1 China   9597000       1425857720
2 India   3287000       1420939232
3 USA     9834000        338903174</code></pre>
</div>
</div>
</section>
<section id="mutate" class="level2" data-number="4">
<h2 data-number="4" class="anchored" data-anchor-id="mutate"><span class="header-section-number">4</span> <code>mutate()</code></h2>
<p>With <code>mutate()</code> we can add new columns to a data.frame or edit existing ones:</p>
<div class="cell" data-output.lines="4">
<div class="sourceCode cell-code" id="cb25" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb25-1">athletes <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb25-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mutate</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">new_column =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NA</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb25-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mutate</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">ID =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">as.character</span>(ID)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb25-4">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">str</span>()</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>'data.frame':   270767 obs. of  17 variables:
 $ NOC       : chr  "AFG" "AFG" "AFG" "AFG" ...
 $ ID        : chr  "132181" "87371" "44977" "502" ...
 $ Name      : chr  "Najam Yahya" "Ahmad Jahan Nuristani" "Mohammad Halilula" "Ahmad Shah Abouwi" ...
...</code></pre>
</div>
</div>
<section id="useful-helpers" class="level3" data-number="4.1">
<h3 data-number="4.1" class="anchored" data-anchor-id="useful-helpers"><span class="header-section-number">4.1</span> Useful helpers</h3>
<p>Like <code>select()</code>, <code>mutate()</code> really starts to shine when helper functions are added. For example we can fill a new column according to values in other columns:</p>
<div class="cell" data-output.lines="10">
<div class="sourceCode cell-code" id="cb27" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb27-1"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## Build a new column indicating if this is a contact sport athlete</span></span>
<span id="cb27-2">athletes <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb27-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mutate</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">contact_sport =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ifelse</span>(Sport <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%in%</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Wrestling"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Boxing"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Judo"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Rugby"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Taekwondo"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Rugby Sevens"</span>), </span>
<span id="cb27-4">                                <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">yes =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>, </span>
<span id="cb27-5">                                <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">no =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">FALSE</span>)</span>
<span id="cb27-6">         ) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb27-7">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">select</span>(Name, Sport, contact_sport) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb27-8">  str</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>'data.frame':   270767 obs. of  3 variables:
 $ Name         : chr  "Najam Yahya" "Ahmad Jahan Nuristani" "Mohammad Halilula" "Ahmad Shah Abouwi" ...
 $ Sport        : chr  "Hockey" "Hockey" "Wrestling" "Hockey" ...
 $ contact_sport: logi  FALSE FALSE TRUE FALSE TRUE TRUE ...</code></pre>
</div>
</div>
<p>If we have to connect multiple <code>ifelse()</code> functions, it’s better to use <code>dplyrs</code> <a href="https://iqb-research.github.io/IQB-Methods/posts/r_sig/23_12_18_case_when/"><code>case_when()</code></a>:</p>
<div class="cell" data-output.lines="10">
<div class="sourceCode cell-code" id="cb29" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb29-1"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## This gets complicated pretty quickly:</span></span>
<span id="cb29-2">athletes <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb29-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mutate</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">judo_weightclass =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">if_else</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">str_detect</span>(Event, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Middleweight"</span>), </span>
<span id="cb29-4">                                  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">true =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Middleweight"</span>, </span>
<span id="cb29-5">                                  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">false =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">if_else</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">str_detect</span>(Event, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Half-Lightweight"</span>), </span>
<span id="cb29-6">                                        <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">true =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Half-Lightweight"</span>, </span>
<span id="cb29-7">                                        <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">false =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">if_else</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">str_detect</span>(Event, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Lightweight"</span>), </span>
<span id="cb29-8">                                                    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">true =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Lightweight"</span>, </span>
<span id="cb29-9">                                                    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">false =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NA</span>)</span>
<span id="cb29-10">                                        ) </span>
<span id="cb29-11">                                        )</span>
<span id="cb29-12">                                  ) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span> </span>
<span id="cb29-13">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">filter</span>(Sport <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Judo"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb29-14">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">select</span>(Name, Sport, Event, judo_weightclass) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb29-15">  str</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>'data.frame':   3799 obs. of  4 variables:
 $ Name            : chr  "Friba Razayee" "Ajmal Faizzada" "Mohammad Tawfiq Bakhshi" "Sergio Murray" ...
 $ Sport           : chr  "Judo" "Judo" "Judo" "Judo" ...
 $ Event           : chr  "Judo Women's Middleweight" "Judo Men's Half-Lightweight" "Judo Men's Half-Heavyweight" "Judo Men's Middleweight" ...
 $ judo_weightclass: chr  "Middleweight" "Half-Lightweight" NA "Middleweight" ...</code></pre>
</div>
<div class="sourceCode cell-code" id="cb31" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb31-1"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## so do this instead:</span></span>
<span id="cb31-2">athletes <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb31-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mutate</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">judo_weightclass =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">case_when</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">str_detect</span>(Event, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Middleweight"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Middleweight"</span>, </span>
<span id="cb31-4">                                      <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">str_detect</span>(Event, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Half-Lightweight"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Half-Lightweight"</span>, </span>
<span id="cb31-5">                                      <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">str_detect</span>(Event, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Lightweight"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Lightweight"</span>,</span>
<span id="cb31-6">                                      <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"other Weightclass"</span> )</span>
<span id="cb31-7">         ) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb31-8">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">filter</span>(Sport <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Judo"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb31-9">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">select</span>(Name, Sport, Event, judo_weightclass) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb31-10">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">str</span>()</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>'data.frame':   3799 obs. of  4 variables:
 $ Name            : chr  "Friba Razayee" "Ajmal Faizzada" "Mohammad Tawfiq Bakhshi" "Sergio Murray" ...
 $ Sport           : chr  "Judo" "Judo" "Judo" "Judo" ...
 $ Event           : chr  "Judo Women's Middleweight" "Judo Men's Half-Lightweight" "Judo Men's Half-Heavyweight" "Judo Men's Middleweight" ...
 $ judo_weightclass: chr  "Middleweight" "Half-Lightweight" "other Weightclass" "Middleweight" ...</code></pre>
</div>
</div>
</section>
<section id="programmatically-using-mutate" class="level3" data-number="4.2">
<h3 data-number="4.2" class="anchored" data-anchor-id="programmatically-using-mutate"><span class="header-section-number">4.2</span> Programmatically using <code>mutate()</code></h3>
<p>If you want to use <code>mutate()</code> programmatically within a loop or a function, take a look at <a href="https://iqb-research.github.io/IQB-Methods/posts/r_sig/24_04_08_tidyverse_column_wise/">Column-wise operations in the tidyverse</a></p>
</section>
</section>
<section id="replace_..." class="level2" data-number="5">
<h2 data-number="5" class="anchored" data-anchor-id="replace_..."><span class="header-section-number">5</span> <code>..._replace_...()</code></h2>
<p>We can easily replace values in a column using <code>str_replace()</code> or <code>replace_na()</code>:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb33" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb33-1">athletes <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb33-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mutate</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">Sex =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">str_replace</span>(Sex, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"M"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Male"</span>)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb33-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mutate</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">Sex =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">str_replace</span>(Sex, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"F"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Female"</span>)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb33-4">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mutate</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">Height =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">replace_na</span>(Height, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb33-5">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">select</span>(Sex, Height) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb33-6">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">str</span>()</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>'data.frame':   270767 obs. of  2 variables:
 $ Sex   : chr  "Male" "Male" "Male" "Male" ...
 $ Height: int  0 0 163 0 0 168 0 0 0 0 ...</code></pre>
</div>
</div>
</section>
<section id="group_by" class="level2" data-number="6">
<h2 data-number="6" class="anchored" data-anchor-id="group_by"><span class="header-section-number">6</span> <code>group_by()</code></h2>
<p>We can group our data by values in specific columns and perform some sort of operation on the groups. If we wanted to know the number of medals each region has won, we can for example group by region and medal type, and then <code>count()</code> (another <code>tidyverse</code> function) the number of cases in each group:</p>
<div class="cell" data-output.lines="10">
<div class="sourceCode cell-code" id="cb35" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb35-1">medal_counts <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> athletes <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb35-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">group_by</span>(Region, Medal) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb35-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">count</span>(Medal) </span>
<span id="cb35-4"></span>
<span id="cb35-5">medal_counts</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 533 × 3
# Groups:   Region, Medal [533]
   Region         Medal      n
   &lt;chr&gt;          &lt;chr&gt;  &lt;int&gt;
 1 Afghanistan    Bronze     2
 2 Afghanistan    &lt;NA&gt;     124
 3 Albania        &lt;NA&gt;      70
 4 Algeria        Bronze     8
 5 Algeria        Gold       5
 6 Algeria        Silver     4
...</code></pre>
</div>
</div>
<p>We can also <code>summarize()</code> data:</p>
<div class="cell" data-output.lines="10">
<div class="sourceCode cell-code" id="cb37" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb37-1"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## Let's see what the mean, min and max age of athletes was in each Region:</span></span>
<span id="cb37-2">athletes <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb37-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">group_by</span>(Region) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb37-4">      <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">summarize</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">mean_age =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mean</span>(Age, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">na.rm =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>), </span>
<span id="cb37-5">                <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">min_age =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">min</span>(Age, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">na.rm =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>), </span>
<span id="cb37-6">                <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">max_age =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">max</span>(Age, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">na.rm =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>)</span>
<span id="cb37-7">                )</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 206 × 4
   Region         mean_age min_age max_age
   &lt;chr&gt;             &lt;dbl&gt;   &lt;int&gt;   &lt;int&gt;
 1 Afghanistan        23.5      17      35
 2 Albania            25.3      16      46
 3 Algeria            24.4      14      38
 4 American Samoa     27.2      16      43
 5 Andorra            23.1      15      61
 6 Angola             24.9      13      51
 7 Antigua            23.2      14      38
...</code></pre>
</div>
</div>
</section>
<section id="join_..-data.frames" class="level2" data-number="7">
<h2 data-number="7" class="anchored" data-anchor-id="join_..-data.frames"><span class="header-section-number">7</span> <code>..._join_..()</code> data.frames</h2>
<p>We have multiple options for merging data.frames in the <code>tidyverse</code>. <code>left_join()</code> can be used if we want to keep all rows of the first data.frame and only adds the rows of the second data.frame that have an identifier in the first data.frame, <code>right_join()</code> keeps all rows of the second data frame, and <code>full_join()</code> keeps all rows of both data frames.</p>
<p>Let’s merge a world coordinate data set onto our medal counts. This can be helpful if we want to plot the number of won medals in each country later on:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb39" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb39-1">world_coordinates <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">readRDS</span>(here<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">here</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"raw_data"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"world_coordinates.rds"</span>))</span></code></pre></div>
</div>
<p>Only take gold medals into account:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb40" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb40-1">medal_counts <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> medal_counts <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">filter</span>(Medal <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Gold"</span>)</span></code></pre></div>
</div>
<p>To merge two data frames that include information that belongs together, we need a common column, on which we can combine them. In our case, this is the column containing the country. They are both named <code>region</code>, but one with an upper case <code>R</code>. This doesn’t pose a problem, as we can define which columns should be taken from which data frame for merging with <code>join_by()</code>. Let’s take a quick look before merging to check if there are any countries named differently in both data sets:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb41" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb41-1">medal_counts<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>Region[<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!</span>(medal_counts<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>Region <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%in%</span> world_coordinates<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>region)]</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "Individual Olympic Athletes"</code></pre>
</div>
</div>
<p>Looks like all of the countries in our <code>medal_countries</code> data frame can also be found in our <code>world_coordinates</code> frame. Only athletes without a country will be lost when merging, but that’s ok for now, as we are interested in the country specific gold medal counts. So let’s merge:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb43" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb43-1">medal_countries <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> world_coordinates <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb43-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">left_join</span>(medal_counts, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">join_by</span>(region <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> Region))</span>
<span id="cb43-3"></span>
<span id="cb43-4"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">head</span>(medal_countries)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>       long      lat group order region subregion Medal  n
1 -69.89912 12.45200     1     1  Aruba      &lt;NA&gt;  &lt;NA&gt; NA
2 -69.89571 12.42300     1     2  Aruba      &lt;NA&gt;  &lt;NA&gt; NA
3 -69.94219 12.43853     1     3  Aruba      &lt;NA&gt;  &lt;NA&gt; NA
4 -70.00415 12.50049     1     4  Aruba      &lt;NA&gt;  &lt;NA&gt; NA
5 -70.06612 12.54697     1     5  Aruba      &lt;NA&gt;  &lt;NA&gt; NA
6 -70.05088 12.59707     1     6  Aruba      &lt;NA&gt;  &lt;NA&gt; NA</code></pre>
</div>
</div>
</section>
<section id="exercise" class="level2" data-number="8">
<h2 data-number="8" class="anchored" data-anchor-id="exercise"><span class="header-section-number">8</span> Exercise</h2>
<ol start="0" type="1">
<li>Read the <code>characters.rds</code> and the <code>psych_stats.csv</code> into R (download <a href="https://github.com/iqb-research/IQB-Methods/tree/main/raw_data">here</a>).</li>
</ol>
<div class="callout callout-style-default callout-caution callout-titled">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-2-contents" aria-controls="callout-2" aria-expanded="false" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Solution
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-2" class="callout-2-contents callout-collapse collapse">
<div class="callout-body-container callout-body">
<div class="cell">
<div class="sourceCode cell-code" id="cb45" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb45-1">characters <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">readRDS</span>(here<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">here</span>(  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"raw_data"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"characters.rds"</span>))</span>
<span id="cb45-2">psych_stats <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">read.csv</span>(here<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">here</span>(  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"raw_data"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"psych_stats.csv"</span>), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">sep =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">";"</span>)</span></code></pre></div>
</div>
</div>
</div>
</div>
<ol type="1">
<li>Reshape the <code>psych_stats</code> data frame so there are only three columns in the data set: <code>char_id</code>, <code>question</code> and <code>rating</code>.</li>
</ol>
<div class="callout callout-style-default callout-tip callout-titled">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-3-contents" aria-controls="callout-3" aria-expanded="false" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Hint
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-3" class="callout-3-contents callout-collapse collapse">
<div class="callout-body-container callout-body">
<p>You can select multiple columns like this: <code>column_1:column_10</code>.</p>
</div>
</div>
</div>
<div class="callout callout-style-default callout-caution callout-titled">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-4-contents" aria-controls="callout-4" aria-expanded="false" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Solution
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-4" class="callout-4-contents callout-collapse collapse">
<div class="callout-body-container callout-body">
<div class="cell">
<div class="sourceCode cell-code" id="cb46" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb46-1">psych_stats_long <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> psych_stats <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb46-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">pivot_longer</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">cols =</span> messy_neat<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span>innocent_jaded, </span>
<span id="cb46-3">               <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">names_to =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"question"</span>, </span>
<span id="cb46-4">               <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">values_to =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"rating"</span>)</span>
<span id="cb46-5"></span>
<span id="cb46-6"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">head</span>(psych_stats_long)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 6 × 3
  char_id question                      rating
  &lt;chr&gt;   &lt;chr&gt;                          &lt;dbl&gt;
1 F2      messy_neat                     95.7 
2 F2      disorganized_self.disciplined  95.2 
3 F2      diligent_lazy                   6.10
4 F2      on.time_tardy                   6.2 
5 F2      competitive_cooperative         6.40
6 F2      scheduled_spontaneous           6.60</code></pre>
</div>
</div>
<p>Now we have multiple rows for every character, but all question ratings are nicely aligned in one column.</p>
</div>
</div>
</div>
<ol start="2" type="1">
<li>Merge the <code>characters</code> data frame and the <code>psych_stats_long</code> data frame on a common column.</li>
</ol>
<div class="callout callout-style-default callout-tip callout-titled">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-5-contents" aria-controls="callout-5" aria-expanded="false" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Hint
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-5" class="callout-5-contents callout-collapse collapse">
<div class="callout-body-container callout-body">
<p>Identify the common columns. Are they named the same in both data frames? Look at the documentation of <code>?join_by()</code> to see, how you can merge data frames that don’t have identically named columns.</p>
</div>
</div>
</div>
<div class="callout callout-style-default callout-caution callout-titled">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-6-contents" aria-controls="callout-6" aria-expanded="false" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Solution
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-6" class="callout-6-contents callout-collapse collapse">
<div class="callout-body-container callout-body">
<p>First, let’s take a look at both data sets again:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb48" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb48-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">str</span>(characters)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>'data.frame':   889 obs. of  7 variables:
 $ id        : chr  "F2" "F1" "F5" "F4" ...
 $ name      : chr  "Monica Geller" "Rachel Green" "Chandler Bing" "Joey Tribbiani" ...
 $ uni_id    : chr  "F" "F" "F" "F" ...
 $ uni_name  : chr  "Friends" "Friends" "Friends" "Friends" ...
 $ notability: num  79.7 76.7 74.4 74.3 72.6 51.6 86.5 84.2 82.6 65.6 ...
 $ link      : chr  "https://openpsychometrics.org/tests/characters/stats/F/2" "https://openpsychometrics.org/tests/characters/stats/F/1" "https://openpsychometrics.org/tests/characters/stats/F/5" "https://openpsychometrics.org/tests/characters/stats/F/4" ...
 $ image_link: chr  "https://openpsychometrics.org/tests/characters/test-resources/pics/F/2.jpg" "https://openpsychometrics.org/tests/characters/test-resources/pics/F/1.jpg" "https://openpsychometrics.org/tests/characters/test-resources/pics/F/5.jpg" "https://openpsychometrics.org/tests/characters/test-resources/pics/F/4.jpg" ...</code></pre>
</div>
<div class="sourceCode cell-code" id="cb50" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb50-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">str</span>(psych_stats)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>'data.frame':   889 obs. of  365 variables:
 $ char_id                                     : chr  "F2" "F1" "F5" "F4" ...
 $ messy_neat                                  : num  95.7 30.2 45.3 13 20.9 ...
 $ disorganized_self.disciplined               : num  95.2 25.9 42.4 11 20.9 75.6 10.4 31.9 39.6 31.1 ...
 $ diligent_lazy                               : num  6.1 51.8 52.2 78.1 45.2 ...
 $ on.time_tardy                               : num  6.2 77.9 57.1 84.1 74 20.6 85.7 68.3 73.6 58.2 ...
 $ competitive_cooperative                     : num  6.4 28.9 42.8 44.2 55.3 ...
 $ scheduled_spontaneous                       : num  6.6 72.3 54.9 91.3 94.9 ...
 $ ADHD_OCD                                    : num  92.9 31.8 26.7 10.4 12.8 70.1 35.5 30.1 51.8 39.2 ...
 $ chaotic_orderly                             : num  92.2 27 38.2 12.6 11.2 68.8 6.8 20.6 23.4 28.8 ...
 $ motivated_unmotivated                       : num  7.8 31.8 52.3 45.6 24.7 31.5 80.9 30.5 40.8 50.7 ...
 $ bossy_meek                                  : num  7.9 30.6 64.8 60.8 40.1 ...
 $ persistent_quitter                          : num  7.9 35.8 43.9 33.8 21.3 ...
 $ overachiever_underachiever                  : num  8.2 43.8 55.8 68.8 51.3 23.2 67.7 36.7 44.1 44.4 ...
 $ muddy_washed                                : num  91 80.2 58.7 42.7 48.1 64.6 27.6 62.4 70.1 69.2 ...
 $ beautiful_ugly                              : num  9.2 5.3 26.2 11 11.4 ...
 $ slacker_workaholic                          : num  90.8 45.9 53.4 17.6 32 81.5 23.8 30.1 33.2 34.6 ...
 $ driven_unambitious                          : num  9.5 30.3 49.8 49.4 43.4 22.7 58.5 34.1 32 47.4 ...
 $ outlaw_sheriff                              : num  90.3 39.3 46.7 23.8 16.1 85.4 21.4 22.7 27.3 30.1 ...
 $ precise_vague                               : num  9.9 64.7 53.2 78 78.1 25.4 68.4 60.1 47.3 61.7 ...
 $ bad.cook_good.cook                          : num  90 11.1 28.2 31.2 29.4 35.9 27.3 46.2 43.8 52.8 ...
 $ manicured_scruffy                           : num  10.6 7.7 45.6 47.6 62.5 20.5 81.3 37.3 20.3 20.9 ...
 $ lenient_strict                              : num  89.3 34.2 28.8 11 15.4 76.7 15.2 24.2 38.9 21.5 ...
 $ relaxed_tense                               : num  89 58.8 66.4 10.4 16.9 88.9 69.9 64.2 54.5 64.8 ...
 $ demanding_unchallenging                     : num  11 23.9 58.3 66.3 57.1 28.5 35.9 37.8 16.8 60.3 ...
 $ drop.out_valedictorian                      : num  88.9 32.5 47 14.9 22.1 87.7 12.5 29.6 36.5 51.2 ...
 $ go.getter_slugabed                          : num  11.7 31.3 52.6 48.1 27.6 41.8 62.6 33.9 27.3 51.1 ...
 $ competent_incompetent                       : num  11.9 47.1 37.1 77.2 53.6 37.8 51.9 41.1 35.2 56.1 ...
 $ aloof_obsessed                              : num  88.1 62.3 52.3 35.1 33.2 80.8 75.1 54.9 70.7 61.9 ...
 $ flexible_rigid                              : num  87.8 41.8 45.9 17.3 13.9 83.7 45.9 27.4 55 32.1 ...
 $ active_slothful                             : num  12.2 33.1 61.1 56.7 31.4 48.8 73.9 19.8 29.2 35.5 ...
 $ loose_tight                                 : num  87.4 43.2 44.3 14 15.3 82.5 28.1 26 44.8 43.6 ...
 $ pointed_random                              : num  12.8 49.9 67.1 86.2 87.4 36.7 65.4 53.1 36.9 56.2 ...
 $ fresh_stinky                                : num  12.9 14.6 31.9 44.3 39.2 44.3 64.4 30.2 18.2 24.6 ...
 $ dominant_submissive                         : num  13.6 41.6 73.7 40.2 30.9 69.5 43.5 52.6 36.9 77.9 ...
 $ anxious_calm                                : num  13.7 28.8 20 66.1 58 11.9 12 32.1 37.1 29.8 ...
 $ clean_perverted                             : num  13.7 42.5 56.8 77.5 59.4 44 53.1 51.2 61.9 50.6 ...
 $ neutral_opinionated                         : num  86.3 74.6 67.2 43.4 76.6 84.2 67.3 77.9 82.5 43.9 ...
 $ always.down_picky                           : num  85.9 72.6 49.8 27.1 35.2 71.9 23.6 36.2 71.8 36.2 ...
 $ hurried_leisurely                           : num  14.6 55.1 55.9 85.9 81 22.1 48.6 45.6 49 39.3 ...
 $ attractive_repulsive                        : num  14.7 9.4 28.5 15.7 18.2 ...
 $ devoted_unfaithful                          : num  14.8 29.1 22.6 41.5 19.6 47.5 34.1 55.7 42.7 48.2 ...
 $ helpless_resourceful                        : num  85 41.4 56.6 37.9 70.6 52.4 41.4 51.5 36.2 29.8 ...
 $ deliberate_spontaneous                      : num  15.1 71.7 56.5 89.1 92.9 20.9 78.6 88.3 64 60.9 ...
 $ plays.hard_works.hard                       : num  84.7 41.3 46.5 13.7 26 81.2 28.2 30 19.9 26.4 ...
 $ imaginative_practical                       : num  84.7 37.9 54.6 17 5.4 ...
 $ frenzied_sleepy                             : num  15.5 29.9 34.7 55.6 30 31.1 59.4 25.2 19 46 ...
 $ queer_straight                              : num  84.3 84.1 65.4 84.3 45.4 77.9 10.2 4.8 73.4 64.1 ...
 $ assertive_passive                           : num  15.8 40.4 66.3 44.3 39.3 60.9 45.1 45.8 23.4 63.3 ...
 $ fast.talking_slow.talking                   : num  15.9 20.8 18.3 42.2 21.7 49.6 69.5 34.3 32.5 44.5 ...
 $ astonishing_methodical                      : num  83.8 28 49.9 19.2 17.4 83 31.2 27.4 36 32.7 ...
 $ hoarder_unprepared                          : num  16.2 70 63.5 82 54.9 35.5 60.3 64.5 48.3 67.8 ...
 $ consistent_variable                         : num  16.6 60.2 46.3 63.1 79.3 39.5 72 65.3 69.7 62.3 ...
 $ involved_remote                             : num  16.7 26.3 42.7 30.2 36.7 36.6 62.2 39.3 26.4 38.7 ...
 $ backdoor_official                           : num  83.3 51.9 47.4 24.4 20.4 76.4 29.1 29.3 53.5 36.7 ...
 $ captain_first.mate                          : num  16.7 52.7 73.5 74.2 57.9 68.4 55.9 51 19 73.6 ...
 $ refined_rugged                              : num  17.3 18.9 48.4 74.4 69.9 24.4 81.6 48 31.4 40.7 ...
 $ accommodating_stubborn                      : num  82.7 77.2 48.2 43.9 48.3 78.5 78.1 69 85.9 41.5 ...
 $ barbaric_civilized                          : num  82.6 76.5 66.6 32.9 39.9 77 33.4 44.4 36.7 55.5 ...
 $ alpha_beta                                  : num  17.7 37.9 73.9 33.6 41.9 78.2 44.3 37.4 17.5 66.6 ...
 $ loyal_traitorous                            : num  17.8 32.3 20 15.3 14.5 40.3 29.2 43.1 47.2 33.2 ...
 $ trash_treasure                              : num  82 80.1 82.2 78.4 83.2 47.8 64.5 62.2 68.2 78.4 ...
 $ fast_slow                                   : num  18.1 43.7 38.1 69 55.3 60.4 57.8 29.4 30 54.5 ...
 $ perceptive_unobservant                      : num  18.3 59.5 41.5 80 41.1 48.6 21.6 33.3 28 49 ...
 $ goof.off_studious                           : num  81.4 33.2 20.7 7.4 16.6 ...
 $ feminist_sexist                             : num  18.6 23.3 43.9 62 10.5 ...
 $ desperate_high.standards                    : num  81.1 69.2 30.7 36.8 56.7 29.2 33.7 32.5 61.7 25.8 ...
 $ impatient_patient                           : num  18.9 21.9 34 25.7 39.1 25.8 23.8 35.1 18 57.2 ...
 $ preppy_punk.rock                            : num  18.9 16.4 41.5 49.5 73.2 14.4 87.7 74.4 26.4 18.2 ...
 $ naive_paranoid                              : num  80.7 35.5 66.6 22 39.7 71.6 69.6 45.6 50.7 32.1 ...
 $ important_irrelevant                        : num  19.3 22.3 24.6 24.7 26.4 47.4 12.5 14.8 16.4 33.4 ...
 $ apprentice_master                           : num  80.6 42.3 44.9 36.3 61.5 60.8 48 48 73 31.5 ...
 $ healthy_sickly                              : num  19.6 17.8 39.1 26.9 22.6 37 88.9 65.7 56.7 45.5 ...
 $ morning.lark_night.owl                      : num  19.6 69.9 58.3 80.4 61.9 23.2 90.6 81.9 90.1 78.3 ...
 $ alert_oblivious                             : num  19.6 70.7 55.5 87.6 78.9 57.1 54.7 48.9 38.3 67.4 ...
 $ f....the.police_tattle.tale                 : num  80 57.5 56.7 34.4 13.7 ...
 $ experimental_reliable                       : num  79.7 37.8 62 35 22.2 61.7 28 26.5 30.4 39.8 ...
 $ loud_quiet                                  : num  20.4 20.8 25 10.6 15.3 39.5 71.9 42.7 13.2 55.2 ...
 $ high.IQ_low.IQ                              : num  20.5 56.7 28.8 82.6 50.6 19.3 30.9 26.1 47.7 55.6 ...
 $ oppressed_privileged                        : num  79.2 85.4 67.2 66.5 42.1 84.3 22.4 19.6 59.9 63.4 ...
 $ animalistic_human                           : num  79.2 75.6 73.7 43.8 42.1 69.3 70.4 55.9 64.4 73.2 ...
 $ still_twitchy                               : num  79.2 68.6 79.9 76.9 83.6 81.9 77.9 67.4 60.1 58.4 ...
 $ thick_thin                                  : num  78.8 79.6 52.8 35.2 69.2 60.6 73.3 81.4 66.1 48.8 ...
 $ repetitive_varied                           : num  21.3 44.5 40.9 43.4 74.1 18.4 40.1 68.4 47.3 42.1 ...
 $ rational_whimsical                          : num  21.7 72.3 54.4 86.8 93 27.4 67 78.7 69.6 70.9 ...
 $ egalitarian_racist                          : num  21.7 27.8 24.7 24.3 10.7 ...
 $ disreputable_prestigious                    : num  78.2 66.2 47 32.5 36.7 68.2 21.2 42.5 65.2 45.8 ...
 $ ignorant_knowledgeable                      : num  78.2 37.7 66.9 22.2 59.9 68.5 60.8 68.1 44.2 42.6 ...
 $ hard.work_natural.talent                    : num  21.9 47.5 41.8 69.8 71.2 29.2 55.8 67.5 65.8 57.3 ...
 $ androgynous_gendered                        : num  78.1 89.4 68.5 82.5 60.1 78.1 32.6 43.4 88.3 87.9 ...
 $ dispassionate_romantic                      : num  77.9 80.5 64.7 69.6 74.9 67.2 61.5 64.8 59.1 82.3 ...
 $ eloquent_unpolished                         : num  22.1 32.1 56.1 79.8 69 33.7 76.3 45.2 35 42.9 ...
 $ permanent_transient                         : num  22.2 56.1 39 59.6 71.1 31.9 68.5 79.7 57.2 70.6 ...
 $ intense_lighthearted                        : num  22.2 50.8 73.8 79.8 64.2 28.2 22.4 34.7 18.2 44.3 ...
 $ mischievous_well.behaved                    : num  77.8 34.2 30.6 15.8 20.3 71.4 13.3 19.4 17.6 38.2 ...
 $ adventurous_stick.in.the.mud                : num  77.7 37.4 59.7 14.4 8 ...
 $ obedient_rebellious                         : num  22.3 69.2 42.9 72.9 86.2 16.5 92.3 87.1 84.2 38.1 ...
 $ authoritarian_democratic                    : num  22.4 55.2 70 72.1 75.4 41.6 68 67.4 21.8 68.9 ...
 $ city.slicker_country.bumpkin                : num  22.7 9 22.4 18.4 42.6 18.8 26.5 20.2 16.8 24 ...
 $ traditional_unorthodox                      : num  22.8 52.8 54.9 67.2 90 23.1 85.7 90.2 74.5 62.6 ...
  [list output truncated]</code></pre>
</div>
</div>
<p>It seems like both data frames have a column containing an ID for the character. We can use that column for merging:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb52" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb52-1">characters_stats <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> characters <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb52-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">right_join</span>(psych_stats_long, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">join_by</span>(id <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> char_id))</span>
<span id="cb52-3"></span>
<span id="cb52-4"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">str</span>(characters_stats)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>'data.frame':   323596 obs. of  9 variables:
 $ id        : chr  "F2" "F2" "F2" "F2" ...
 $ name      : chr  "Monica Geller" "Monica Geller" "Monica Geller" "Monica Geller" ...
 $ uni_id    : chr  "F" "F" "F" "F" ...
 $ uni_name  : chr  "Friends" "Friends" "Friends" "Friends" ...
 $ notability: num  79.7 79.7 79.7 79.7 79.7 79.7 79.7 79.7 79.7 79.7 ...
 $ link      : chr  "https://openpsychometrics.org/tests/characters/stats/F/2" "https://openpsychometrics.org/tests/characters/stats/F/2" "https://openpsychometrics.org/tests/characters/stats/F/2" "https://openpsychometrics.org/tests/characters/stats/F/2" ...
 $ image_link: chr  "https://openpsychometrics.org/tests/characters/test-resources/pics/F/2.jpg" "https://openpsychometrics.org/tests/characters/test-resources/pics/F/2.jpg" "https://openpsychometrics.org/tests/characters/test-resources/pics/F/2.jpg" "https://openpsychometrics.org/tests/characters/test-resources/pics/F/2.jpg" ...
 $ question  : chr  "messy_neat" "disorganized_self.disciplined" "diligent_lazy" "on.time_tardy" ...
 $ rating    : num  95.7 95.2 6.1 6.2 6.4 ...</code></pre>
</div>
</div>
</div>
</div>
</div>
<ol start="3" type="1">
<li>Remove all columns from your merged data frame that start with <code>"uni"</code>. Don’t overwrite your old data, this is just for exercise and won’t be worked with further on.</li>
</ol>
<div class="callout callout-style-default callout-tip callout-titled">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-7-contents" aria-controls="callout-7" aria-expanded="false" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Hint
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-7" class="callout-7-contents callout-collapse collapse">
<div class="callout-body-container callout-body">
<p>Take a look at the examples in <code>?select</code> to see how you can select all columns but those fulfilling a certain condition.</p>
</div>
</div>
</div>
<div class="callout callout-style-default callout-caution callout-titled">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-8-contents" aria-controls="callout-8" aria-expanded="false" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Caution
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-8" class="callout-8-contents callout-collapse collapse">
<div class="callout-body-container callout-body">
<div class="cell">
<div class="sourceCode cell-code" id="cb54" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb54-1">characters_stats <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb54-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">select</span>(<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">starts_with</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"uni"</span>)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb54-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">str</span>()</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>'data.frame':   323596 obs. of  7 variables:
 $ id        : chr  "F2" "F2" "F2" "F2" ...
 $ name      : chr  "Monica Geller" "Monica Geller" "Monica Geller" "Monica Geller" ...
 $ notability: num  79.7 79.7 79.7 79.7 79.7 79.7 79.7 79.7 79.7 79.7 ...
 $ link      : chr  "https://openpsychometrics.org/tests/characters/stats/F/2" "https://openpsychometrics.org/tests/characters/stats/F/2" "https://openpsychometrics.org/tests/characters/stats/F/2" "https://openpsychometrics.org/tests/characters/stats/F/2" ...
 $ image_link: chr  "https://openpsychometrics.org/tests/characters/test-resources/pics/F/2.jpg" "https://openpsychometrics.org/tests/characters/test-resources/pics/F/2.jpg" "https://openpsychometrics.org/tests/characters/test-resources/pics/F/2.jpg" "https://openpsychometrics.org/tests/characters/test-resources/pics/F/2.jpg" ...
 $ question  : chr  "messy_neat" "disorganized_self.disciplined" "diligent_lazy" "on.time_tardy" ...
 $ rating    : num  95.7 95.2 6.1 6.2 6.4 ...</code></pre>
</div>
</div>
</div>
</div>
</div>
<ol start="4" type="1">
<li>Calculate the mean rating of all characters by show and question, so you get the mean rating of all characters in a show on each item.</li>
</ol>
<div class="callout callout-style-default callout-tip callout-titled">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-9-contents" aria-controls="callout-9" aria-expanded="false" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Hint
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-9" class="callout-9-contents callout-collapse collapse">
<div class="callout-body-container callout-body">
<p>Use <code>group_by()</code> and <code>summarise()</code>.</p>
</div>
</div>
</div>
<div class="callout callout-style-default callout-caution callout-titled">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-10-contents" aria-controls="callout-10" aria-expanded="false" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Caution
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-10" class="callout-10-contents callout-collapse collapse">
<div class="callout-body-container callout-body">
<div class="cell">
<div class="sourceCode cell-code" id="cb56" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb56-1">characters_summary <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> characters_stats <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb56-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">group_by</span>(uni_name, question) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb56-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">summarise</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">mean_rating =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mean</span>(rating, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">na.rm =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>))</span></code></pre></div>
<div class="cell-output cell-output-stderr">
<pre><code>`summarise()` has grouped output by 'uni_name'. You can override using the
`.groups` argument.</code></pre>
</div>
</div>
</div>
</div>
</div>
<ol start="5" type="1">
<li>Choose two of your favorite shows. Build a data frame that has two mean_rating columns, one for each show.</li>
</ol>
<div class="callout callout-style-default callout-tip callout-titled">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-11-contents" aria-controls="callout-11" aria-expanded="false" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Hint
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-11" class="callout-11-contents callout-collapse collapse">
<div class="callout-body-container callout-body">
<p>You can get an overview of the used shows with <code>unique(characters_stats$uni_name)</code> First, filter your two shows from the <code>characters_stats</code> data.frame.<br>
Second, reshape this data.frame into long format.</p>
</div>
</div>
</div>
<div class="callout callout-style-default callout-caution callout-titled">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-12-contents" aria-controls="callout-12" aria-expanded="false" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Caution
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-12" class="callout-12-contents callout-collapse collapse">
<div class="callout-body-container callout-body">
<div class="cell">
<div class="sourceCode cell-code" id="cb58" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb58-1">compare_shows <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> characters_summary <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb58-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">filter</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">str_detect</span>(uni_name, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Friends|How I Met Your Mother"</span> ))) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb58-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">pivot_wider</span>(</span>
<span id="cb58-4">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">names_from =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"uni_name"</span>,</span>
<span id="cb58-5">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">values_from =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"mean_rating"</span>)</span>
<span id="cb58-6"></span>
<span id="cb58-7">compare_shows</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 364 × 3
   question               Friends `How I Met Your Mother`
   &lt;chr&gt;                    &lt;dbl&gt;                   &lt;dbl&gt;
 1 ADHD_OCD                  40.8                    46.6
 2 Coke_Pepsi                49.2                    48.1
 3 English_German            26.6                    31.3
 4 French_Russian            30.7                    38.7
 5 Greek_Roman               44.0                    47.9
 6 Italian_Swedish           39.2                    44.5
 7 abstract_concrete         46.0                    43.6
 8 accepting_judgemental     52.0                    53.4
 9 accommodating_stubborn    63.1                    63.6
10 active_slothful           40.6                    37.0
# ℹ 354 more rows</code></pre>
</div>
</div>
<p>Now we could look at specific questions. For example the How I Met Your Mother characters seem to be rated a bit more slothful than the Friends characters.</p>
</div>
</div>
</div>
<ol start="6" type="1">
<li>Now, add a column containing the difference in rating between both shows for each question to your new comparison data.frame. Then, sort the rows by descending size of difference between the ratings. So the row with the highest difference in mean rating between your two shows should be on top.</li>
</ol>
<div class="callout callout-style-default callout-tip callout-titled">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-13-contents" aria-controls="callout-13" aria-expanded="false" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Hint
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-13" class="callout-13-contents callout-collapse collapse">
<div class="callout-body-container callout-body">
<p>To work with columns within <code>mutate()</code> you could for example use <code>.$column_name</code>.</p>
</div>
</div>
</div>
<div class="callout callout-style-default callout-caution callout-titled">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-14-contents" aria-controls="callout-14" aria-expanded="false" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Caution
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-14" class="callout-14-contents callout-collapse collapse">
<div class="callout-body-container callout-body">
<div class="cell">
<div class="sourceCode cell-code" id="cb60" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb60-1">compare_shows <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb60-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mutate</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">diff_shows =</span> .<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>Friends <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> .<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"How I Met Your Mother"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb60-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">arrange</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">desc</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">abs</span>(diff_shows)))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 364 × 4
   question                            Friends How I Met Your Mothe…¹ diff_shows
   &lt;chr&gt;                                 &lt;dbl&gt;                  &lt;dbl&gt;      &lt;dbl&gt;
 1 cat.person_dog.person                  46.4                   65.1      -18.6
 2 musical_off.key                        61.5                   44.8       16.7
 3 nonpolitical_political                 40.2                   54.7      -14.5
 4 gamer_non.gamer                        58.6                   44.8       13.8
 5 focused.on.the.future_focused.on.t…    55.0                   41.8       13.2
 6 gatherer_hunter                        38.8                   51.2      -12.5
 7 captain_first.mate                     57.2                   44.9       12.3
 8 flower.child_goth                      21.5                   33.6      -12.1
 9 perceptive_unobservant                 48.2                   36.4       11.7
10 dunce_genius                           46.4                   57.9      -11.4
# ℹ 354 more rows
# ℹ abbreviated name: ¹​`How I Met Your Mother`</code></pre>
</div>
</div>
<p><code>desc()</code> means descending, so we go from the largest value to the smallest.<br>
<code>abs()</code> means absolute, so we get the absolute value instead of negative values in some cases.</p>
</div>
</div>
</div>


</section>


<div id="quarto-appendix" class="default"><section id="footnotes" class="footnotes footnotes-end-of-document"><h2 class="anchored quarto-appendix-heading">Footnotes</h2>

<ol>
<li id="fn1"><p>Image by <a href="https://www.bing.com/images/create/data-wrangling/1-65fd4161357e424ab4710052a455ae76?id=%2bsYYE%2fjAx45kPemp84oShA%3d%3d&amp;view=detailv2&amp;idpp=genimg&amp;idpclose=1&amp;thId=OIG1.63cnYyWZaAlWJaaaluAw&amp;FORM=SYDBIC">Bing Copilot</a>↩︎</p></li>
</ol>
</section></div> ]]></description>
  <category>R</category>
  <category>tidyverse</category>
  <category>R-SIG</category>
  <category>tutorial</category>
  <category>data manipulation</category>
  <guid>https://iqb-research.github.io/IQB-Methods/docs/r_sig/24_03_25_tidyverse_wrangling/</guid>
  <pubDate>Mon, 25 Mar 2024 00:00:00 GMT</pubDate>
  <media:content url="https://iqb-research.github.io/IQB-Methods/docs/r_sig/24_03_25_tidyverse_wrangling/data_wrangling.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Data sets</title>
  <dc:creator>Nicklas Hafiz</dc:creator>
  <link>https://iqb-research.github.io/IQB-Methods/docs/r_sig/24_03_22_datasets/</link>
  <description><![CDATA[ 




<p>We will use two data sets for some time in the R SIG now. One for the theory, and one for you to work on in the exercises.</p>
<section id="theory-olympic-athletes" class="level2" data-number="1">
<h2 data-number="1" class="anchored" data-anchor-id="theory-olympic-athletes"><span class="header-section-number">1</span> Theory: Olympic athletes</h2>
<p><img src="https://iqb-research.github.io/IQB-Methods/docs/r_sig/24_03_22_datasets/olympics.jpg" class="img-fluid"><sup>1</sup></p>
<p>For the theory part of the workshop, we will mainly work with the <a href="https://www.kaggle.com/datasets/heesoo37/120-years-of-olympic-history-athletes-and-results"><code>athletes</code></a> data set. It contains the Olympic athletes from 1896 to 2016, along with some basic stats, their sport and country, and the medals they won.</p>
<div class="callout callout-style-default callout-caution no-icon callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon no-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Goal
</div>
</div>
<div class="callout-body-container callout-body">
<p>Our goal for the theory part of this workshop is to find the best country in each sport (operationalized by the number of gold medal winners from this country).</p>
</div>
</div>
</section>
<section id="exercises-fictional-characters" class="level2" data-number="2">
<h2 data-number="2" class="anchored" data-anchor-id="exercises-fictional-characters"><span class="header-section-number">2</span> Exercises: Fictional characters</h2>
<p><img src="https://iqb-research.github.io/IQB-Methods/docs/r_sig/24_03_22_datasets/friends.jpg" class="img-fluid"><sup>2</sup></p>
<p>Over the course of this workshop, you can work on exercises to put the theoretical knowledge you acquired in the chapters to use. Most of these exercises will use the <a href="https://openpsychometrics.org/tests/characters/documentation/"><code>characters</code></a> data set, which contains psychometric ratings for different fictional characters, rated by a large number of people on a personality scale developed by the author of the questionnaire.</p>
<p>You will load the data, prepare it for analyses and also plot it in the end.</p>
<div class="callout callout-style-default callout-caution no-icon callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon no-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Goal
</div>
</div>
<div class="callout-body-container callout-body">
<p>The goal for the exercise part of this workshop is to build a character profile for a fictional universe of your choosing.</p>
</div>
</div>
<div class="callout callout-style-default callout-tip callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Tip
</div>
</div>
<div class="callout-body-container callout-body">
<p>We have looked at how to download these data sets in the <a href="https://nickhaf.github.io/r_tutorial/qmd/workflow/workflow_exercise.html#exercise-2-download-data">this exercise</a>.</p>
</div>
</div>


</section>


<div id="quarto-appendix" class="default"><section id="footnotes" class="footnotes footnotes-end-of-document"><h2 class="anchored quarto-appendix-heading">Footnotes</h2>

<ol>
<li id="fn1"><p>Image by <a href="https://unsplash.com/de/@floschmaezz?utm_source=unsplash&amp;utm_medium=referral&amp;utm_content=creditCopyText">Florian Schmetz</a> on <a href="https://unsplash.com/de/fotos/fbCtFV3FkfE?utm_source=unsplash&amp;utm_medium=referral&amp;utm_content=creditCopyText">Unsplash</a>.↩︎</p></li>
<li id="fn2"><p>Image by <a href="https://unsplash.com/de/@lgtts?utm_source=unsplash&amp;utm_medium=referral&amp;utm_content=creditCopyText">Ilse Orsen</a> on <a href="https://unsplash.com/de/fotos/fwPHQB4kGzA?utm_source=unsplash&amp;utm_medium=referral&amp;utm_content=creditCopyText">Unsplash</a>.↩︎</p></li>
</ol>
</section></div> ]]></description>
  <category>R</category>
  <category>tidyverse</category>
  <category>R-SIG</category>
  <category>data sets</category>
  <guid>https://iqb-research.github.io/IQB-Methods/docs/r_sig/24_03_22_datasets/</guid>
  <pubDate>Fri, 22 Mar 2024 00:00:00 GMT</pubDate>
  <media:content url="https://iqb-research.github.io/IQB-Methods/docs/r_sig/24_03_22_datasets/olympics.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Introduction to the tidyverse</title>
  <dc:creator>Nicklas Hafiz</dc:creator>
  <link>https://iqb-research.github.io/IQB-Methods/docs/r_sig/24_01_26_tidyverse_intro/</link>
  <description><![CDATA[ 




<p><img src="https://iqb-research.github.io/IQB-Methods/docs/r_sig/24_01_26_tidyverse_intro/preview_image.jpg" class="img-fluid"><sup>1</sup></p>
<div class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(tidyverse)</span></code></pre></div>
</div>
<section id="introduction" class="level2" data-number="1">
<h2 data-number="1" class="anchored" data-anchor-id="introduction"><span class="header-section-number">1</span> Introduction</h2>
<p><em>Tidy datasets are easy to manipulate, model and visualize, and have a specific structure: each variable is a column, each observation is a row, and each type of observational unit is a table.</em> (<a href="https://www.jstatsoft.org/article/view/v059i10">Wickham, 2014</a>).</p>
<p>The <code>tidyverse</code> is composed of multiple packages, all following a common philosophy, and facilitating many aspects of coding in R, for example data wrangling and plotting. It is not really necessary to learn the <code>tidyverse</code> syntax in order to be proficient in R. However, I find it easier to understand and write Code in, at least in most cases. In the end, it is a question of preference what you want to learn and use. Most code will probably be composed from <code>base R</code> functions and <code>tidyverse</code> functions.</p>
<p>You can find an overview of the included packages at the offical <a href="https://www.tidyverse.org/packages/">tidyverse documentation</a>.<br>
A more thorough introduction into the <code>tidyverse</code> can be found <a href="https://jhudatascience.org/tidyversecourse/index.html">here</a>.</p>
</section>
<section id="some-tidyverse-features" class="level2" data-number="2">
<h2 data-number="2" class="anchored" data-anchor-id="some-tidyverse-features"><span class="header-section-number">2</span> Some tidyverse features</h2>
<section id="tibbles" class="level3" data-number="2.1">
<h3 data-number="2.1" class="anchored" data-anchor-id="tibbles"><span class="header-section-number">2.1</span> Tibbles</h3>
<p>A special type of data frame are the so called <code>tibbles</code>. Tibbles are a modern version of data frames and the standard data frame type of the <code>tidyverse</code>, as they have some advantageous characteristics (e.g., note the more informative printing of the data frame). So don’t be confused if you run into them, in general they behave like data frames. Take a look at the <a href="https://iqb-research.github.io/IQB-Methods/posts/r_sig/24_01_26_tidyverse_intro/#exercise">Exercises</a>, or at a more thorough <a href="https://cran.r-project.org/web/packages/tibble/vignettes/tibble.html">Example</a> if you want to learn more.</p>
</section>
<section id="the-pipe-operator" class="level3" data-number="2.2">
<h3 data-number="2.2" class="anchored" data-anchor-id="the-pipe-operator"><span class="header-section-number">2.2</span> The Pipe Operator</h3>
<p><code>tidyverse</code> code is often written using the pipe operator <code>%&gt;%</code> (read as ‘<em>then do</em>’), which makes it easy to connect multiple function calls.</p>
<p>Some notes on the pipe syntax, also see <a href="https://iqb-research.github.io/IQB-Methods/posts/r_sig/24_01_26_tidyverse_intro/#exercise">Exercises</a>:</p>
<ol type="1">
<li>If we don’t have any additional arguments we want to put into the function, we can just write the function name without any brackets.</li>
<li>The pipe operator will give the result of the last function as input into the next function.</li>
<li>If we want to clearly state which of the function arguments should receive the input, we can write a <code>.</code>, which can be read as <em>output of the previous function call</em>.</li>
</ol>
</section>
</section>
<section id="workstation-organization" class="level2" data-number="3">
<h2 data-number="3" class="anchored" data-anchor-id="workstation-organization"><span class="header-section-number">3</span> Workstation organization</h2>
<section id="rstudio-projects" class="level3" data-number="3.1">
<h3 data-number="3.1" class="anchored" data-anchor-id="rstudio-projects"><span class="header-section-number">3.1</span> RStudio Projects</h3>
<p>Over time, it will become increasingly hard to organize all your files, working directories and workspaces in a sensible manner. A reasonable big project will consist of multiple script files, data, output and plots. To keep everything toghether, <a href="https://support.posit.co/hc/en-us/articles/200526207-Using-RStudio-Projects">RStudio Projects</a> can be used (highly recommended). Therefore, when starting a new project in R, the first thing you should do is to create a RStudio project.</p>
<p>You can create a new RStudio project by clicking on <code>File - New Project</code> in the RStudio window. You can either create a totally new directory, or choose an already existing folder for the project.</p>
</section>
<section id="code-organization" class="level3" data-number="3.2">
<h3 data-number="3.2" class="anchored" data-anchor-id="code-organization"><span class="header-section-number">3.2</span> Code organization</h3>
<p>Within your project folder, I would suggest that you create subfolders to save your Scripts, data, outputs … in. For example, you could create a folder named R, where all your R Scripts will go. You can do the same for data, plots etc. This will help you to structure your working directory and make it easier to find specific files.</p>
</section>
<section id="absolute-paths-vs.-relative-paths" class="level3" data-number="3.3">
<h3 data-number="3.3" class="anchored" data-anchor-id="absolute-paths-vs.-relative-paths"><span class="header-section-number">3.3</span> Absolute paths vs.&nbsp;relative paths</h3>
<p>I can head to a specific file by using the full path (<strong>absolute path</strong>): <code>"C:/Users/hafiznij/Documents/GitHub/IQB-Methods/posts/r_sig/24_01_26_tidyverse_intro/raw_data/winners.rda"</code>. This approach has some disadvantages: it will only work on <strong>my</strong> notebook. If I want to continue my project on another device, I will have to change the path. The same goes for other people who want to work with my project. So, to keep these paths more reproducable, we should always use <strong>relative paths</strong>: <code>"./raw_data/winners.rda"</code>. This will always work independently of the device I am working on, as long as I am in the correct <strong>working directory</strong>.</p>
<div class="callout callout-style-default callout-tip callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Network drives
</div>
</div>
<div class="callout-body-container callout-body">
<p>One exception might be paths to files on the IQB network drives, like <code>T:</code> … Because these are always the same for every one, absolute paths will work just fine for everything lying on here.</p>
</div>
</div>
<p>The working directory is the path R is currently working in. I can obtain it by typing:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb2-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">getwd</span>()</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "/home/runner/work/IQB-Methods/IQB-Methods/docs/r_sig/24_01_26_tidyverse_intro"</code></pre>
</div>
</div>
<p>Luckily, RStudio projects set the working directory automatically, so we don’t really have to deal with that.</p>
<p>Now take a look at the working directory and the relative path I used for loading the <code>winners.rda</code>. Notice something? Correct, both paths combined equal the <strong>absolute path</strong> to the file. So by splitting it up, we obtain a more reproducible path, that works independently of where the current working directory is.</p>
<div class="callout callout-style-default callout-tip callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
The <code>here</code> package
</div>
</div>
<div class="callout-body-container callout-body">
<p>Another great way to deal with the path confusion is to use the <code>here</code> package. It can build the paths relative to the directory where your R Studio project is saved in. For example, <code>"./raw_data/winners.rda"</code> becomes <code>here::here("raw_data", "winners.rda")</code>. This is not incredibly important right now, especially if you have all your files in the same folder. But it can become very valuable with increasing project complexity and file structure, so look into it if you want to get a head start! I also I have to use it sometimes during the tutorial because of the way I have organized my project, so don’t be confused! It is just another way to build file paths. Look <a href="https://here.r-lib.org/">here</a> (:D) if you want to learn more about the package.</p>
</div>
</div>
</section>
</section>
<section id="exercise" class="level2" data-number="4">
<h2 data-number="4" class="anchored" data-anchor-id="exercise"><span class="header-section-number">4</span> Exercise</h2>
<ol start="0" type="1">
<li><p>Create a new RStudio project. Create the folders <code>R</code>, <code>data</code> and <code>plots</code>. Create a new R-Script which lies in your <code>R</code> folder.</p></li>
<li><p>Write the following code using the pipe-operator from the <code>tidyverse</code>:</p></li>
</ol>
<div class="cell">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb4-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sum</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">seq</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">from =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">to =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mean</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">45</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">na.rm =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">by =</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.1</span>))</span></code></pre></div>
</div>
<div class="callout callout-style-default callout-caution callout-titled">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-3-contents" aria-controls="callout-3" aria-expanded="false" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Solution
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-3" class="callout-3-contents callout-collapse collapse">
<div class="callout-body-container callout-body">
<div class="cell">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb5-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(tidyverse)</span>
<span id="cb5-2"></span>
<span id="cb5-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">45</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb5-4">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mean</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">na.rm =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb5-5">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">seq</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">from =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">to =</span> ., <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">by =</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.1</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb5-6">  sum</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] 26313</code></pre>
</div>
</div>
<p>Much nicer to read, right?</p>
<ol type="1">
<li>If we don’t have any additional arguments we want to put into the function, we can just write the function name without any brackets, like we do at the end with <code>sum</code>.</li>
<li>The pipe operator will give the result of the last function as input into the next function. That’s why we don’t have to specify the vector within the <code>mean()</code> function.</li>
<li>If we want to clearly state which of the function arguments should receive the input, we can write a <code>.</code>, which can be read as <em>output of the previous function call</em>. That’s what we do in the <code>seq()</code> function. It calculates a sequence from <code>1</code> to the mean of <code>c(45:100)</code>.</li>
</ol>
</div>
</div>
</div>
<ol start="2" type="1">
<li>Install and load the <code>palmerpenguins</code> package.</li>
</ol>
<div class="callout callout-style-default callout-caution callout-titled">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-4-contents" aria-controls="callout-4" aria-expanded="false" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Solution
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-4" class="callout-4-contents callout-collapse collapse">
<div class="callout-body-container callout-body">
<div class="cell">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb7-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># install.packages("palmerpenguins")</span></span>
<span id="cb7-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(palmerpenguins)</span></code></pre></div>
</div>
</div>
</div>
</div>
<ol start="3" type="1">
<li>Transform the <code>penguins</code>-tibble (available after loading the package) into a <code>data.frame</code>.</li>
</ol>
<div class="callout callout-style-default callout-caution callout-titled">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-5-contents" aria-controls="callout-5" aria-expanded="false" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Solution
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-5" class="callout-5-contents callout-collapse collapse">
<div class="callout-body-container callout-body">
<div class="cell">
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb8-1">penguins_frame <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">as.data.frame</span>(penguins)</span></code></pre></div>
</div>
</div>
</div>
</div>
<ol start="4" type="1">
<li>Compare how both objects (tibble and data.frame) are printed into the console. Which differences can you see?</li>
</ol>
<div class="callout callout-style-default callout-caution callout-titled">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-6-contents" aria-controls="callout-6" aria-expanded="false" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Solution
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-6" class="callout-6-contents callout-collapse collapse">
<div class="callout-body-container callout-body">
<div class="cell">
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb9-1">penguins</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 344 × 8
   species island    bill_length_mm bill_depth_mm flipper_length_mm body_mass_g
   &lt;fct&gt;   &lt;fct&gt;              &lt;dbl&gt;         &lt;dbl&gt;             &lt;int&gt;       &lt;int&gt;
 1 Adelie  Torgersen           39.1          18.7               181        3750
 2 Adelie  Torgersen           39.5          17.4               186        3800
 3 Adelie  Torgersen           40.3          18                 195        3250
 4 Adelie  Torgersen           NA            NA                  NA          NA
 5 Adelie  Torgersen           36.7          19.3               193        3450
 6 Adelie  Torgersen           39.3          20.6               190        3650
 7 Adelie  Torgersen           38.9          17.8               181        3625
 8 Adelie  Torgersen           39.2          19.6               195        4675
 9 Adelie  Torgersen           34.1          18.1               193        3475
10 Adelie  Torgersen           42            20.2               190        4250
# ℹ 334 more rows
# ℹ 2 more variables: sex &lt;fct&gt;, year &lt;int&gt;</code></pre>
</div>
</div>
<div class="cell">
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb11-1">penguins_frame</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>      species    island bill_length_mm bill_depth_mm flipper_length_mm
1      Adelie Torgersen           39.1          18.7               181
2      Adelie Torgersen           39.5          17.4               186
3      Adelie Torgersen           40.3          18.0               195
4      Adelie Torgersen             NA            NA                NA
5      Adelie Torgersen           36.7          19.3               193
6      Adelie Torgersen           39.3          20.6               190
7      Adelie Torgersen           38.9          17.8               181
8      Adelie Torgersen           39.2          19.6               195
9      Adelie Torgersen           34.1          18.1               193
10     Adelie Torgersen           42.0          20.2               190
11     Adelie Torgersen           37.8          17.1               186
12     Adelie Torgersen           37.8          17.3               180
13     Adelie Torgersen           41.1          17.6               182
14     Adelie Torgersen           38.6          21.2               191
15     Adelie Torgersen           34.6          21.1               198
16     Adelie Torgersen           36.6          17.8               185
17     Adelie Torgersen           38.7          19.0               195
18     Adelie Torgersen           42.5          20.7               197
19     Adelie Torgersen           34.4          18.4               184
20     Adelie Torgersen           46.0          21.5               194
21     Adelie    Biscoe           37.8          18.3               174
22     Adelie    Biscoe           37.7          18.7               180
23     Adelie    Biscoe           35.9          19.2               189
24     Adelie    Biscoe           38.2          18.1               185
25     Adelie    Biscoe           38.8          17.2               180
26     Adelie    Biscoe           35.3          18.9               187
27     Adelie    Biscoe           40.6          18.6               183
28     Adelie    Biscoe           40.5          17.9               187
29     Adelie    Biscoe           37.9          18.6               172
30     Adelie    Biscoe           40.5          18.9               180
31     Adelie     Dream           39.5          16.7               178
32     Adelie     Dream           37.2          18.1               178
33     Adelie     Dream           39.5          17.8               188
34     Adelie     Dream           40.9          18.9               184
35     Adelie     Dream           36.4          17.0               195
36     Adelie     Dream           39.2          21.1               196
37     Adelie     Dream           38.8          20.0               190
38     Adelie     Dream           42.2          18.5               180
39     Adelie     Dream           37.6          19.3               181
40     Adelie     Dream           39.8          19.1               184
41     Adelie     Dream           36.5          18.0               182
42     Adelie     Dream           40.8          18.4               195
43     Adelie     Dream           36.0          18.5               186
44     Adelie     Dream           44.1          19.7               196
45     Adelie     Dream           37.0          16.9               185
46     Adelie     Dream           39.6          18.8               190
47     Adelie     Dream           41.1          19.0               182
48     Adelie     Dream           37.5          18.9               179
49     Adelie     Dream           36.0          17.9               190
50     Adelie     Dream           42.3          21.2               191
51     Adelie    Biscoe           39.6          17.7               186
52     Adelie    Biscoe           40.1          18.9               188
53     Adelie    Biscoe           35.0          17.9               190
54     Adelie    Biscoe           42.0          19.5               200
55     Adelie    Biscoe           34.5          18.1               187
56     Adelie    Biscoe           41.4          18.6               191
57     Adelie    Biscoe           39.0          17.5               186
58     Adelie    Biscoe           40.6          18.8               193
59     Adelie    Biscoe           36.5          16.6               181
60     Adelie    Biscoe           37.6          19.1               194
61     Adelie    Biscoe           35.7          16.9               185
62     Adelie    Biscoe           41.3          21.1               195
63     Adelie    Biscoe           37.6          17.0               185
64     Adelie    Biscoe           41.1          18.2               192
65     Adelie    Biscoe           36.4          17.1               184
66     Adelie    Biscoe           41.6          18.0               192
67     Adelie    Biscoe           35.5          16.2               195
68     Adelie    Biscoe           41.1          19.1               188
69     Adelie Torgersen           35.9          16.6               190
70     Adelie Torgersen           41.8          19.4               198
71     Adelie Torgersen           33.5          19.0               190
72     Adelie Torgersen           39.7          18.4               190
73     Adelie Torgersen           39.6          17.2               196
74     Adelie Torgersen           45.8          18.9               197
75     Adelie Torgersen           35.5          17.5               190
76     Adelie Torgersen           42.8          18.5               195
77     Adelie Torgersen           40.9          16.8               191
78     Adelie Torgersen           37.2          19.4               184
79     Adelie Torgersen           36.2          16.1               187
80     Adelie Torgersen           42.1          19.1               195
81     Adelie Torgersen           34.6          17.2               189
82     Adelie Torgersen           42.9          17.6               196
83     Adelie Torgersen           36.7          18.8               187
84     Adelie Torgersen           35.1          19.4               193
85     Adelie     Dream           37.3          17.8               191
86     Adelie     Dream           41.3          20.3               194
87     Adelie     Dream           36.3          19.5               190
88     Adelie     Dream           36.9          18.6               189
89     Adelie     Dream           38.3          19.2               189
90     Adelie     Dream           38.9          18.8               190
91     Adelie     Dream           35.7          18.0               202
92     Adelie     Dream           41.1          18.1               205
93     Adelie     Dream           34.0          17.1               185
94     Adelie     Dream           39.6          18.1               186
95     Adelie     Dream           36.2          17.3               187
96     Adelie     Dream           40.8          18.9               208
97     Adelie     Dream           38.1          18.6               190
98     Adelie     Dream           40.3          18.5               196
99     Adelie     Dream           33.1          16.1               178
100    Adelie     Dream           43.2          18.5               192
101    Adelie    Biscoe           35.0          17.9               192
102    Adelie    Biscoe           41.0          20.0               203
103    Adelie    Biscoe           37.7          16.0               183
104    Adelie    Biscoe           37.8          20.0               190
105    Adelie    Biscoe           37.9          18.6               193
106    Adelie    Biscoe           39.7          18.9               184
107    Adelie    Biscoe           38.6          17.2               199
108    Adelie    Biscoe           38.2          20.0               190
109    Adelie    Biscoe           38.1          17.0               181
110    Adelie    Biscoe           43.2          19.0               197
111    Adelie    Biscoe           38.1          16.5               198
112    Adelie    Biscoe           45.6          20.3               191
113    Adelie    Biscoe           39.7          17.7               193
114    Adelie    Biscoe           42.2          19.5               197
115    Adelie    Biscoe           39.6          20.7               191
116    Adelie    Biscoe           42.7          18.3               196
117    Adelie Torgersen           38.6          17.0               188
118    Adelie Torgersen           37.3          20.5               199
119    Adelie Torgersen           35.7          17.0               189
120    Adelie Torgersen           41.1          18.6               189
121    Adelie Torgersen           36.2          17.2               187
122    Adelie Torgersen           37.7          19.8               198
123    Adelie Torgersen           40.2          17.0               176
124    Adelie Torgersen           41.4          18.5               202
125    Adelie Torgersen           35.2          15.9               186
126    Adelie Torgersen           40.6          19.0               199
127    Adelie Torgersen           38.8          17.6               191
128    Adelie Torgersen           41.5          18.3               195
129    Adelie Torgersen           39.0          17.1               191
130    Adelie Torgersen           44.1          18.0               210
131    Adelie Torgersen           38.5          17.9               190
132    Adelie Torgersen           43.1          19.2               197
133    Adelie     Dream           36.8          18.5               193
134    Adelie     Dream           37.5          18.5               199
135    Adelie     Dream           38.1          17.6               187
136    Adelie     Dream           41.1          17.5               190
137    Adelie     Dream           35.6          17.5               191
138    Adelie     Dream           40.2          20.1               200
139    Adelie     Dream           37.0          16.5               185
140    Adelie     Dream           39.7          17.9               193
141    Adelie     Dream           40.2          17.1               193
142    Adelie     Dream           40.6          17.2               187
143    Adelie     Dream           32.1          15.5               188
144    Adelie     Dream           40.7          17.0               190
145    Adelie     Dream           37.3          16.8               192
146    Adelie     Dream           39.0          18.7               185
147    Adelie     Dream           39.2          18.6               190
148    Adelie     Dream           36.6          18.4               184
149    Adelie     Dream           36.0          17.8               195
150    Adelie     Dream           37.8          18.1               193
151    Adelie     Dream           36.0          17.1               187
152    Adelie     Dream           41.5          18.5               201
153    Gentoo    Biscoe           46.1          13.2               211
154    Gentoo    Biscoe           50.0          16.3               230
155    Gentoo    Biscoe           48.7          14.1               210
156    Gentoo    Biscoe           50.0          15.2               218
157    Gentoo    Biscoe           47.6          14.5               215
158    Gentoo    Biscoe           46.5          13.5               210
159    Gentoo    Biscoe           45.4          14.6               211
160    Gentoo    Biscoe           46.7          15.3               219
161    Gentoo    Biscoe           43.3          13.4               209
162    Gentoo    Biscoe           46.8          15.4               215
163    Gentoo    Biscoe           40.9          13.7               214
164    Gentoo    Biscoe           49.0          16.1               216
165    Gentoo    Biscoe           45.5          13.7               214
166    Gentoo    Biscoe           48.4          14.6               213
167    Gentoo    Biscoe           45.8          14.6               210
168    Gentoo    Biscoe           49.3          15.7               217
169    Gentoo    Biscoe           42.0          13.5               210
170    Gentoo    Biscoe           49.2          15.2               221
171    Gentoo    Biscoe           46.2          14.5               209
172    Gentoo    Biscoe           48.7          15.1               222
173    Gentoo    Biscoe           50.2          14.3               218
174    Gentoo    Biscoe           45.1          14.5               215
175    Gentoo    Biscoe           46.5          14.5               213
176    Gentoo    Biscoe           46.3          15.8               215
177    Gentoo    Biscoe           42.9          13.1               215
178    Gentoo    Biscoe           46.1          15.1               215
179    Gentoo    Biscoe           44.5          14.3               216
180    Gentoo    Biscoe           47.8          15.0               215
181    Gentoo    Biscoe           48.2          14.3               210
182    Gentoo    Biscoe           50.0          15.3               220
183    Gentoo    Biscoe           47.3          15.3               222
184    Gentoo    Biscoe           42.8          14.2               209
185    Gentoo    Biscoe           45.1          14.5               207
186    Gentoo    Biscoe           59.6          17.0               230
187    Gentoo    Biscoe           49.1          14.8               220
188    Gentoo    Biscoe           48.4          16.3               220
189    Gentoo    Biscoe           42.6          13.7               213
190    Gentoo    Biscoe           44.4          17.3               219
191    Gentoo    Biscoe           44.0          13.6               208
192    Gentoo    Biscoe           48.7          15.7               208
193    Gentoo    Biscoe           42.7          13.7               208
194    Gentoo    Biscoe           49.6          16.0               225
195    Gentoo    Biscoe           45.3          13.7               210
196    Gentoo    Biscoe           49.6          15.0               216
197    Gentoo    Biscoe           50.5          15.9               222
198    Gentoo    Biscoe           43.6          13.9               217
199    Gentoo    Biscoe           45.5          13.9               210
200    Gentoo    Biscoe           50.5          15.9               225
201    Gentoo    Biscoe           44.9          13.3               213
202    Gentoo    Biscoe           45.2          15.8               215
203    Gentoo    Biscoe           46.6          14.2               210
204    Gentoo    Biscoe           48.5          14.1               220
205    Gentoo    Biscoe           45.1          14.4               210
206    Gentoo    Biscoe           50.1          15.0               225
207    Gentoo    Biscoe           46.5          14.4               217
208    Gentoo    Biscoe           45.0          15.4               220
209    Gentoo    Biscoe           43.8          13.9               208
210    Gentoo    Biscoe           45.5          15.0               220
211    Gentoo    Biscoe           43.2          14.5               208
212    Gentoo    Biscoe           50.4          15.3               224
213    Gentoo    Biscoe           45.3          13.8               208
214    Gentoo    Biscoe           46.2          14.9               221
215    Gentoo    Biscoe           45.7          13.9               214
216    Gentoo    Biscoe           54.3          15.7               231
217    Gentoo    Biscoe           45.8          14.2               219
218    Gentoo    Biscoe           49.8          16.8               230
219    Gentoo    Biscoe           46.2          14.4               214
220    Gentoo    Biscoe           49.5          16.2               229
221    Gentoo    Biscoe           43.5          14.2               220
222    Gentoo    Biscoe           50.7          15.0               223
223    Gentoo    Biscoe           47.7          15.0               216
224    Gentoo    Biscoe           46.4          15.6               221
225    Gentoo    Biscoe           48.2          15.6               221
226    Gentoo    Biscoe           46.5          14.8               217
227    Gentoo    Biscoe           46.4          15.0               216
228    Gentoo    Biscoe           48.6          16.0               230
229    Gentoo    Biscoe           47.5          14.2               209
230    Gentoo    Biscoe           51.1          16.3               220
231    Gentoo    Biscoe           45.2          13.8               215
232    Gentoo    Biscoe           45.2          16.4               223
233    Gentoo    Biscoe           49.1          14.5               212
234    Gentoo    Biscoe           52.5          15.6               221
235    Gentoo    Biscoe           47.4          14.6               212
236    Gentoo    Biscoe           50.0          15.9               224
237    Gentoo    Biscoe           44.9          13.8               212
238    Gentoo    Biscoe           50.8          17.3               228
239    Gentoo    Biscoe           43.4          14.4               218
240    Gentoo    Biscoe           51.3          14.2               218
241    Gentoo    Biscoe           47.5          14.0               212
242    Gentoo    Biscoe           52.1          17.0               230
243    Gentoo    Biscoe           47.5          15.0               218
244    Gentoo    Biscoe           52.2          17.1               228
245    Gentoo    Biscoe           45.5          14.5               212
246    Gentoo    Biscoe           49.5          16.1               224
247    Gentoo    Biscoe           44.5          14.7               214
248    Gentoo    Biscoe           50.8          15.7               226
249    Gentoo    Biscoe           49.4          15.8               216
250    Gentoo    Biscoe           46.9          14.6               222
251    Gentoo    Biscoe           48.4          14.4               203
252    Gentoo    Biscoe           51.1          16.5               225
253    Gentoo    Biscoe           48.5          15.0               219
254    Gentoo    Biscoe           55.9          17.0               228
255    Gentoo    Biscoe           47.2          15.5               215
256    Gentoo    Biscoe           49.1          15.0               228
257    Gentoo    Biscoe           47.3          13.8               216
258    Gentoo    Biscoe           46.8          16.1               215
259    Gentoo    Biscoe           41.7          14.7               210
260    Gentoo    Biscoe           53.4          15.8               219
261    Gentoo    Biscoe           43.3          14.0               208
262    Gentoo    Biscoe           48.1          15.1               209
263    Gentoo    Biscoe           50.5          15.2               216
264    Gentoo    Biscoe           49.8          15.9               229
265    Gentoo    Biscoe           43.5          15.2               213
266    Gentoo    Biscoe           51.5          16.3               230
267    Gentoo    Biscoe           46.2          14.1               217
268    Gentoo    Biscoe           55.1          16.0               230
269    Gentoo    Biscoe           44.5          15.7               217
270    Gentoo    Biscoe           48.8          16.2               222
271    Gentoo    Biscoe           47.2          13.7               214
272    Gentoo    Biscoe             NA            NA                NA
273    Gentoo    Biscoe           46.8          14.3               215
274    Gentoo    Biscoe           50.4          15.7               222
275    Gentoo    Biscoe           45.2          14.8               212
276    Gentoo    Biscoe           49.9          16.1               213
277 Chinstrap     Dream           46.5          17.9               192
278 Chinstrap     Dream           50.0          19.5               196
279 Chinstrap     Dream           51.3          19.2               193
280 Chinstrap     Dream           45.4          18.7               188
281 Chinstrap     Dream           52.7          19.8               197
282 Chinstrap     Dream           45.2          17.8               198
283 Chinstrap     Dream           46.1          18.2               178
284 Chinstrap     Dream           51.3          18.2               197
285 Chinstrap     Dream           46.0          18.9               195
286 Chinstrap     Dream           51.3          19.9               198
287 Chinstrap     Dream           46.6          17.8               193
288 Chinstrap     Dream           51.7          20.3               194
289 Chinstrap     Dream           47.0          17.3               185
290 Chinstrap     Dream           52.0          18.1               201
291 Chinstrap     Dream           45.9          17.1               190
292 Chinstrap     Dream           50.5          19.6               201
293 Chinstrap     Dream           50.3          20.0               197
294 Chinstrap     Dream           58.0          17.8               181
295 Chinstrap     Dream           46.4          18.6               190
296 Chinstrap     Dream           49.2          18.2               195
297 Chinstrap     Dream           42.4          17.3               181
298 Chinstrap     Dream           48.5          17.5               191
299 Chinstrap     Dream           43.2          16.6               187
300 Chinstrap     Dream           50.6          19.4               193
301 Chinstrap     Dream           46.7          17.9               195
302 Chinstrap     Dream           52.0          19.0               197
303 Chinstrap     Dream           50.5          18.4               200
304 Chinstrap     Dream           49.5          19.0               200
305 Chinstrap     Dream           46.4          17.8               191
306 Chinstrap     Dream           52.8          20.0               205
307 Chinstrap     Dream           40.9          16.6               187
308 Chinstrap     Dream           54.2          20.8               201
309 Chinstrap     Dream           42.5          16.7               187
310 Chinstrap     Dream           51.0          18.8               203
311 Chinstrap     Dream           49.7          18.6               195
312 Chinstrap     Dream           47.5          16.8               199
313 Chinstrap     Dream           47.6          18.3               195
314 Chinstrap     Dream           52.0          20.7               210
315 Chinstrap     Dream           46.9          16.6               192
316 Chinstrap     Dream           53.5          19.9               205
317 Chinstrap     Dream           49.0          19.5               210
318 Chinstrap     Dream           46.2          17.5               187
319 Chinstrap     Dream           50.9          19.1               196
320 Chinstrap     Dream           45.5          17.0               196
321 Chinstrap     Dream           50.9          17.9               196
322 Chinstrap     Dream           50.8          18.5               201
323 Chinstrap     Dream           50.1          17.9               190
324 Chinstrap     Dream           49.0          19.6               212
325 Chinstrap     Dream           51.5          18.7               187
326 Chinstrap     Dream           49.8          17.3               198
327 Chinstrap     Dream           48.1          16.4               199
328 Chinstrap     Dream           51.4          19.0               201
329 Chinstrap     Dream           45.7          17.3               193
330 Chinstrap     Dream           50.7          19.7               203
331 Chinstrap     Dream           42.5          17.3               187
332 Chinstrap     Dream           52.2          18.8               197
333 Chinstrap     Dream           45.2          16.6               191
334 Chinstrap     Dream           49.3          19.9               203
335 Chinstrap     Dream           50.2          18.8               202
336 Chinstrap     Dream           45.6          19.4               194
337 Chinstrap     Dream           51.9          19.5               206
338 Chinstrap     Dream           46.8          16.5               189
339 Chinstrap     Dream           45.7          17.0               195
340 Chinstrap     Dream           55.8          19.8               207
341 Chinstrap     Dream           43.5          18.1               202
342 Chinstrap     Dream           49.6          18.2               193
343 Chinstrap     Dream           50.8          19.0               210
344 Chinstrap     Dream           50.2          18.7               198
    body_mass_g    sex year
1          3750   male 2007
2          3800 female 2007
3          3250 female 2007
4            NA   &lt;NA&gt; 2007
5          3450 female 2007
6          3650   male 2007
7          3625 female 2007
8          4675   male 2007
9          3475   &lt;NA&gt; 2007
10         4250   &lt;NA&gt; 2007
11         3300   &lt;NA&gt; 2007
12         3700   &lt;NA&gt; 2007
13         3200 female 2007
14         3800   male 2007
15         4400   male 2007
16         3700 female 2007
17         3450 female 2007
18         4500   male 2007
19         3325 female 2007
20         4200   male 2007
21         3400 female 2007
22         3600   male 2007
23         3800 female 2007
24         3950   male 2007
25         3800   male 2007
26         3800 female 2007
27         3550   male 2007
28         3200 female 2007
29         3150 female 2007
30         3950   male 2007
31         3250 female 2007
32         3900   male 2007
33         3300 female 2007
34         3900   male 2007
35         3325 female 2007
36         4150   male 2007
37         3950   male 2007
38         3550 female 2007
39         3300 female 2007
40         4650   male 2007
41         3150 female 2007
42         3900   male 2007
43         3100 female 2007
44         4400   male 2007
45         3000 female 2007
46         4600   male 2007
47         3425   male 2007
48         2975   &lt;NA&gt; 2007
49         3450 female 2007
50         4150   male 2007
51         3500 female 2008
52         4300   male 2008
53         3450 female 2008
54         4050   male 2008
55         2900 female 2008
56         3700   male 2008
57         3550 female 2008
58         3800   male 2008
59         2850 female 2008
60         3750   male 2008
61         3150 female 2008
62         4400   male 2008
63         3600 female 2008
64         4050   male 2008
65         2850 female 2008
66         3950   male 2008
67         3350 female 2008
68         4100   male 2008
69         3050 female 2008
70         4450   male 2008
71         3600 female 2008
72         3900   male 2008
73         3550 female 2008
74         4150   male 2008
75         3700 female 2008
76         4250   male 2008
77         3700 female 2008
78         3900   male 2008
79         3550 female 2008
80         4000   male 2008
81         3200 female 2008
82         4700   male 2008
83         3800 female 2008
84         4200   male 2008
85         3350 female 2008
86         3550   male 2008
87         3800   male 2008
88         3500 female 2008
89         3950   male 2008
90         3600 female 2008
91         3550 female 2008
92         4300   male 2008
93         3400 female 2008
94         4450   male 2008
95         3300 female 2008
96         4300   male 2008
97         3700 female 2008
98         4350   male 2008
99         2900 female 2008
100        4100   male 2008
101        3725 female 2009
102        4725   male 2009
103        3075 female 2009
104        4250   male 2009
105        2925 female 2009
106        3550   male 2009
107        3750 female 2009
108        3900   male 2009
109        3175 female 2009
110        4775   male 2009
111        3825 female 2009
112        4600   male 2009
113        3200 female 2009
114        4275   male 2009
115        3900 female 2009
116        4075   male 2009
117        2900 female 2009
118        3775   male 2009
119        3350 female 2009
120        3325   male 2009
121        3150 female 2009
122        3500   male 2009
123        3450 female 2009
124        3875   male 2009
125        3050 female 2009
126        4000   male 2009
127        3275 female 2009
128        4300   male 2009
129        3050 female 2009
130        4000   male 2009
131        3325 female 2009
132        3500   male 2009
133        3500 female 2009
134        4475   male 2009
135        3425 female 2009
136        3900   male 2009
137        3175 female 2009
138        3975   male 2009
139        3400 female 2009
140        4250   male 2009
141        3400 female 2009
142        3475   male 2009
143        3050 female 2009
144        3725   male 2009
145        3000 female 2009
146        3650   male 2009
147        4250   male 2009
148        3475 female 2009
149        3450 female 2009
150        3750   male 2009
151        3700 female 2009
152        4000   male 2009
153        4500 female 2007
154        5700   male 2007
155        4450 female 2007
156        5700   male 2007
157        5400   male 2007
158        4550 female 2007
159        4800 female 2007
160        5200   male 2007
161        4400 female 2007
162        5150   male 2007
163        4650 female 2007
164        5550   male 2007
165        4650 female 2007
166        5850   male 2007
167        4200 female 2007
168        5850   male 2007
169        4150 female 2007
170        6300   male 2007
171        4800 female 2007
172        5350   male 2007
173        5700   male 2007
174        5000 female 2007
175        4400 female 2007
176        5050   male 2007
177        5000 female 2007
178        5100   male 2007
179        4100   &lt;NA&gt; 2007
180        5650   male 2007
181        4600 female 2007
182        5550   male 2007
183        5250   male 2007
184        4700 female 2007
185        5050 female 2007
186        6050   male 2007
187        5150 female 2008
188        5400   male 2008
189        4950 female 2008
190        5250   male 2008
191        4350 female 2008
192        5350   male 2008
193        3950 female 2008
194        5700   male 2008
195        4300 female 2008
196        4750   male 2008
197        5550   male 2008
198        4900 female 2008
199        4200 female 2008
200        5400   male 2008
201        5100 female 2008
202        5300   male 2008
203        4850 female 2008
204        5300   male 2008
205        4400 female 2008
206        5000   male 2008
207        4900 female 2008
208        5050   male 2008
209        4300 female 2008
210        5000   male 2008
211        4450 female 2008
212        5550   male 2008
213        4200 female 2008
214        5300   male 2008
215        4400 female 2008
216        5650   male 2008
217        4700 female 2008
218        5700   male 2008
219        4650   &lt;NA&gt; 2008
220        5800   male 2008
221        4700 female 2008
222        5550   male 2008
223        4750 female 2008
224        5000   male 2008
225        5100   male 2008
226        5200 female 2008
227        4700 female 2008
228        5800   male 2008
229        4600 female 2008
230        6000   male 2008
231        4750 female 2008
232        5950   male 2008
233        4625 female 2009
234        5450   male 2009
235        4725 female 2009
236        5350   male 2009
237        4750 female 2009
238        5600   male 2009
239        4600 female 2009
240        5300   male 2009
241        4875 female 2009
242        5550   male 2009
243        4950 female 2009
244        5400   male 2009
245        4750 female 2009
246        5650   male 2009
247        4850 female 2009
248        5200   male 2009
249        4925   male 2009
250        4875 female 2009
251        4625 female 2009
252        5250   male 2009
253        4850 female 2009
254        5600   male 2009
255        4975 female 2009
256        5500   male 2009
257        4725   &lt;NA&gt; 2009
258        5500   male 2009
259        4700 female 2009
260        5500   male 2009
261        4575 female 2009
262        5500   male 2009
263        5000 female 2009
264        5950   male 2009
265        4650 female 2009
266        5500   male 2009
267        4375 female 2009
268        5850   male 2009
269        4875   &lt;NA&gt; 2009
270        6000   male 2009
271        4925 female 2009
272          NA   &lt;NA&gt; 2009
273        4850 female 2009
274        5750   male 2009
275        5200 female 2009
276        5400   male 2009
277        3500 female 2007
278        3900   male 2007
279        3650   male 2007
280        3525 female 2007
281        3725   male 2007
282        3950 female 2007
283        3250 female 2007
284        3750   male 2007
285        4150 female 2007
286        3700   male 2007
287        3800 female 2007
288        3775   male 2007
289        3700 female 2007
290        4050   male 2007
291        3575 female 2007
292        4050   male 2007
293        3300   male 2007
294        3700 female 2007
295        3450 female 2007
296        4400   male 2007
297        3600 female 2007
298        3400   male 2007
299        2900 female 2007
300        3800   male 2007
301        3300 female 2007
302        4150   male 2007
303        3400 female 2008
304        3800   male 2008
305        3700 female 2008
306        4550   male 2008
307        3200 female 2008
308        4300   male 2008
309        3350 female 2008
310        4100   male 2008
311        3600   male 2008
312        3900 female 2008
313        3850 female 2008
314        4800   male 2008
315        2700 female 2008
316        4500   male 2008
317        3950   male 2008
318        3650 female 2008
319        3550   male 2008
320        3500 female 2008
321        3675 female 2009
322        4450   male 2009
323        3400 female 2009
324        4300   male 2009
325        3250   male 2009
326        3675 female 2009
327        3325 female 2009
328        3950   male 2009
329        3600 female 2009
330        4050   male 2009
331        3350 female 2009
332        3450   male 2009
333        3250 female 2009
334        4050   male 2009
335        3800   male 2009
336        3525 female 2009
337        3950   male 2009
338        3650 female 2009
339        3650 female 2009
340        4000   male 2009
341        3400 female 2009
342        3775   male 2009
343        4100   male 2009
344        3775 female 2009</code></pre>
</div>
</div>
<ul>
<li><code>tibbles</code> only print 10 rows by default, data.frames a lot more.</li>
<li><code>tibbles</code> only print as many columns as possible in one row, which looks a lot cleaner.</li>
<li>On top, the <code>tibble</code> shows us how many rows and columns there are in our data.</li>
<li><code>NAs</code> are printed in red in <code>tibbles</code> (not in this output, but try it yourself).</li>
<li>The data-type of each column is printed on top of the column in <code>tibbles</code>.</li>
</ul>
</div>
</div>
</div>
<ol start="5" type="1">
<li>Save your penguins <code>data.frame</code> and your penguins <code>tibble</code> as <code>.RDS</code> files in a dedicated <code>data</code> folder in your R-project. Use relative paths!</li>
</ol>
<div class="callout callout-style-default callout-caution callout-titled">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-7-contents" aria-controls="callout-7" aria-expanded="false" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Solution
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-7" class="callout-7-contents callout-collapse collapse">
<div class="callout-body-container callout-body">
<div class="cell">
<div class="sourceCode cell-code" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb13-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">saveRDS</span>(penguins, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">file =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"./data/penguins.RDS"</span>)</span>
<span id="cb13-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">saveRDS</span>(penguins_frame, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">file =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"./data/penguins_frame.RDS"</span>)</span></code></pre></div>
</div>
</div>
</div>
</div>
<ol start="6" type="1">
<li>Load your penguins <code>data.frame</code> and your penguins <code>tibble</code> into R. Use the <code>here</code> package.</li>
</ol>
<div class="callout callout-style-default callout-caution callout-titled">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-8-contents" aria-controls="callout-8" aria-expanded="false" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Solution
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-8" class="callout-8-contents callout-collapse collapse">
<div class="callout-body-container callout-body">
<div class="cell">
<div class="sourceCode cell-code" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb14-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(here)</span>
<span id="cb14-2"></span>
<span id="cb14-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">readRDS</span>(here<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">here</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"data"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"penguins.RDS"</span>))</span>
<span id="cb14-4"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">readRDS</span>(here<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">here</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"data"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"penguins_frame.RDS"</span>))</span></code></pre></div>
</div>
</div>
</div>
</div>


</section>


<div id="quarto-appendix" class="default"><section id="footnotes" class="footnotes footnotes-end-of-document"><h2 class="anchored quarto-appendix-heading">Footnotes</h2>

<ol>
<li id="fn1"><p>Image by <a href="https://unsplash.com/de/@barnimages?utm_content=creditCopyText&amp;utm_medium=referral&amp;utm_source=unsplash">Barn Images</a> on <a href="https://unsplash.com/de/fotos/verschiedene-handwerkzeuge-im-werkzeugregal-t5YUoHW6zRo?utm_content=creditCopyText&amp;utm_medium=referral&amp;utm_source=unsplash">Unsplash</a>.↩︎</p></li>
</ol>
</section></div> ]]></description>
  <category>R</category>
  <category>tidyverse</category>
  <category>R-SIG</category>
  <category>intro</category>
  <guid>https://iqb-research.github.io/IQB-Methods/docs/r_sig/24_01_26_tidyverse_intro/</guid>
  <pubDate>Mon, 26 Feb 2024 00:00:00 GMT</pubDate>
  <media:content url="https://iqb-research.github.io/IQB-Methods/docs/r_sig/24_01_26_tidyverse_intro/preview_image.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Case_when() function</title>
  <dc:creator>Nicklas Hafiz</dc:creator>
  <link>https://iqb-research.github.io/IQB-Methods/docs/r_sig/23_12_18_case_when/</link>
  <description><![CDATA[ 




<p><img src="https://iqb-research.github.io/IQB-Methods/docs/r_sig/23_12_18_case_when/case_when.jpg" class="img-fluid"><sup>1</sup></p>
<p>The <code>case_when()</code> function from the <code>dplyr</code> package of the <code>tidyverse</code> is a useful function for combining multiple <code>ifelse()</code> statements.</p>
<section id="how-to-use-it" class="level2">
<h2 class="anchored" data-anchor-id="how-to-use-it">How to use it</h2>
<p>Let’s take a look at a little example. Let’s consider a very simple data frame containing only a column of different countries:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(dplyr)</span></code></pre></div>
<div class="cell-output cell-output-stderr">
<pre><code>
Attaching package: 'dplyr'</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code>The following objects are masked from 'package:stats':

    filter, lag</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code>The following objects are masked from 'package:base':

    intersect, setdiff, setequal, union</code></pre>
</div>
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb5-1">df <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">data.frame</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">country =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rep</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Deu"</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>), <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Mexico"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Peru"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Ghana"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"China"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Spanien"</span>))</span></code></pre></div>
</div>
<p>Now, let’s suppose we want to add a second column containing the continent of the country. We can either use nested <code>ifelse()</code> statements, which makes the coed quite hard to read:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb6-1">df<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>continent <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ifelse</span>(df<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>country <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%in%</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Deu"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Spanien"</span>), </span>
<span id="cb6-2">                       <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">yes =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Europe"</span>, </span>
<span id="cb6-3">                       <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">no =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ifelse</span>(</span>
<span id="cb6-4">                         df<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>country <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Mexico"</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|</span> df<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>country <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Peru"</span>, </span>
<span id="cb6-5">                         <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">yes =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"America"</span>,</span>
<span id="cb6-6">                         <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">no =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ifelse</span>(</span>
<span id="cb6-7">                           df<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>country <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Ghana"</span>, </span>
<span id="cb6-8">                           <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">yes =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Africa"</span>,</span>
<span id="cb6-9">                           <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">no =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Asia"</span></span>
<span id="cb6-10">                       )</span>
<span id="cb6-11">                       ))</span>
<span id="cb6-12"></span>
<span id="cb6-13">df</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>  country continent
1     Deu    Europe
2     Deu    Europe
3     Deu    Europe
4     Deu    Europe
5  Mexico   America
6    Peru   America
7   Ghana    Africa
8   China      Asia
9 Spanien    Europe</code></pre>
</div>
</div>
<p><code>case_when()</code> has a slightly different syntax, but is not nested, which makes it easier to read. Condition and output are separated by <code>~</code>. So if the condition on the left side is met in a row, the function returns the value on the right side of <code>~</code>:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb8-1">df_2 <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> df <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb8-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mutate</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">continent =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">case_when</span>(country <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%in%</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Deu"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Spanien"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Europe"</span>, </span>
<span id="cb8-3">                               country <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%in%</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Mexico"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Peru"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"America"</span>,</span>
<span id="cb8-4">                               country <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Ghana"</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Africa"</span>, </span>
<span id="cb8-5">                               <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Another continent"</span></span>
<span id="cb8-6">                                 )</span>
<span id="cb8-7">         )</span>
<span id="cb8-8">df_2</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>  country         continent
1     Deu            Europe
2     Deu            Europe
3     Deu            Europe
4     Deu            Europe
5  Mexico           America
6    Peru           America
7   Ghana            Africa
8   China Another continent
9 Spanien            Europe</code></pre>
</div>
</div>
<p>We wrap this statement into a mutate function to automatically create the new column continent from the output of <code>case_when</code>. The <code>TRUE</code> in the last row catches all conditions we haven’t dealt with further above. So all rows which haven’t met any of the above conditions will get the label “Another continent”.</p>
</section>
<section id="evaluation-order" class="level2">
<h2 class="anchored" data-anchor-id="evaluation-order">Evaluation order</h2>
<p><code>case_when()</code> goes from the top to the bottom. So if a row has met a statement, it is not considered further down. That’s why it makes sense to go from the most specific statements to the less specific ones. Otherwise the least specific ones might overwrite everything in the beginning:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb10-1">df_3 <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> df <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb10-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mutate</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">continent =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">case_when</span>(country <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%in%</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(df<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>country) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Other country"</span>, </span>
<span id="cb10-3">                               country <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%in%</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Mexico"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Peru"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"America"</span>,</span>
<span id="cb10-4">                               country <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Ghana"</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Africa"</span>, </span>
<span id="cb10-5">                               <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Another continent"</span></span>
<span id="cb10-6">                                 )</span>
<span id="cb10-7">         )</span>
<span id="cb10-8"></span>
<span id="cb10-9">df_3  </span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>  country     continent
1     Deu Other country
2     Deu Other country
3     Deu Other country
4     Deu Other country
5  Mexico Other country
6    Peru Other country
7   Ghana Other country
8   China Other country
9 Spanien Other country</code></pre>
</div>
</div>
<p>Because our first statement already covers all rows, the rest is obsolete. This top-down working also makes the <code>TRUE</code> condition in our last line possible, because only those rows that haven’t been used yet will come this far, and all of them are caught (because <code>TRUE</code> always is true).</p>


</section>


<div id="quarto-appendix" class="default"><section id="footnotes" class="footnotes footnotes-end-of-document"><h2 class="anchored quarto-appendix-heading">Footnotes</h2>

<ol>
<li id="fn1"><p>Image by <a href="https://unsplash.com/de/@skyreplacementpack?utm_content=creditCopyText&amp;utm_medium=referral&amp;utm_source=unsplash">Sky Replacement Pack</a> on <a href="https://unsplash.com/de/fotos/eine-grune-aurora-am-himmel-x--iIUgWLDs">Unsplash</a>.↩︎</p></li>
</ol>
</section></div> ]]></description>
  <category>R</category>
  <category>tidyverse</category>
  <category>data manipulation</category>
  <category>R-SIG</category>
  <category>tutorial</category>
  <guid>https://iqb-research.github.io/IQB-Methods/docs/r_sig/23_12_18_case_when/</guid>
  <pubDate>Mon, 18 Dec 2023 00:00:00 GMT</pubDate>
  <media:content url="https://iqb-research.github.io/IQB-Methods/docs/r_sig/23_12_18_case_when/case_when.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Reproducibility with renv</title>
  <dc:creator>Nicklas Hafiz</dc:creator>
  <link>https://iqb-research.github.io/IQB-Methods/docs/r_sig/23_11_06_renv/</link>
  <description><![CDATA[ 




<p><img src="https://iqb-research.github.io/IQB-Methods/docs/r_sig/23_11_06_renv/renv.jpg" class="img-fluid"><sup>1</sup></p>
<section id="motivation" class="level2">
<h2 class="anchored" data-anchor-id="motivation">Motivation</h2>
<p>Package versions will change over time. The same goes for R versions. As a consequence, they might work different in the future, which can make it difficult to reproduce your scripts. Therefore it is considered good practice to note down the package and R-versions you use. The package <a href="https://rstudio.github.io/renv/articles/renv.html">renv</a> can help you with that. Look <a href="https://rstudio.github.io/renv/articles/renv.html#getting-started">here</a> for the official getting started page.</p>
</section>
<section id="workflow" class="level2">
<h2 class="anchored" data-anchor-id="workflow">Workflow</h2>
<p>First, create an RStudio Project in the working directory that should be made reproducible (if you haven’t already).<br>
If another R-version should be used in your project, switch to that version. On Windows, you can simply install multiple versions of R and switch between them in RStudio by going to <code>Tools - Global Options - General</code>. Maybe you will have to install <code>renv</code> for this version again.</p>
<p>Then, initialize the project:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># install.packages(renv)</span></span>
<span id="cb1-2">renv<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">init</span>()</span></code></pre></div>
</div>
<p>This will create the basic infrastructure for the usage of <code>renv</code> mainly will do two things:</p>
<ol type="1">
<li>Create a project specific package library in the folder <code>renv</code> in your working directory, which contains all the packages currently used by the project. This means different projects can use different package versions, and even different R-Versions. Don’t be confused, the <code>renv</code> folder can get quite big and isn’t uploaded to GitHub by default.</li>
<li>A <code>.lock</code> file, where the R version and the package versions get documented. From this <code>.lock</code> file we can restore the used packages.</li>
</ol>
<p>By the way, it doesn’t matter if you do this in the beginning of your project, in between or at the end. <code>renv::init()</code> will automatically setup the project with all the packages you have used in the project.</p>
<p>The rest of your workflow is pretty similar to what you are used to: If you need a new package for you project, you install it like you normally would. You can also use <code>renv::install()</code> which has some additional features compared to <code>install.packages())</code>. For example, you can install specific package versions: <code>renv::install("dplyr@1.1.1")</code>. No matter which one you use: The package will be installed into a global cache, and a link to that package will be put into your project specific library. Then you load your package like you normally would with <code>library()</code>.</p>
<div class="callout callout-style-default callout-caution callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Caution
</div>
</div>
<div class="callout-body-container callout-body">
<p>In case you are using a <code>renv</code> project not locally but on the IQB-drive, the links won’t work, and <code>renv</code> will have to download and install the packages newly into your directory.</p>
</div>
</div>
<p>The next step is to write the package into your <code>.lock</code> file:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb2-1">renv<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">snapshot</span>()</span></code></pre></div>
</div>
<p>This will update the <code>.lock</code> file with your new package.</p>
<p>If on the other hand you want to restore the packages from the <code>.lock</code> file, use:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb3-1">renv<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">restore</span>()</span></code></pre></div>
</div>
<p>This will install all packages that are not already in your project specific library with the package version that is documented in the lock file into your project specific library.</p>
<p>You can update your dependencies to the latest version using:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb4-1">renv<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">update</span>()</span></code></pre></div>
</div>
</section>
<section id="package-versions" class="level2">
<h2 class="anchored" data-anchor-id="package-versions">Package Versions</h2>
<p>If you want to install specific package versions, you can use</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb5-1">renv<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">intit</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">bare =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>)</span></code></pre></div>
</div>
<p>in the beginning. This sets up the <code>renv</code> project without trying to find the used dependencies. Thus, you can install the specific versions manually afterward:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb6-1">renv<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">install</span>(packagename<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">@</span>version<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>number)</span></code></pre></div>
</div>
<p>For example:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb7-1">renv<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">install</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"tidyselect@1.1.2"</span>)</span></code></pre></div>
</div>
<p>Local packages or packages from GitHub can be installed as well (see <a href="https://rstudio.github.io/renv/reference/install.html">here</a>).</p>
<p><a href="https://packagemanager.posit.co/client/#/">Posit Public Package Manager</a> contains the CRAN history of CRAN packages back to 2014. Package version historys can be found here easily, for example, when a script was finished on 06.05.22, we can look up which package version was the current one on that day.</p>


</section>


<div id="quarto-appendix" class="default"><section id="footnotes" class="footnotes footnotes-end-of-document"><h2 class="anchored quarto-appendix-heading">Footnotes</h2>

<ol>
<li id="fn1"><p>Image by <a href="https://unsplash.com/de/@nagaranbasaran?utm_content=creditCopyText&amp;utm_medium=referral&amp;utm_source=unsplash">Nagara Oyodo</a> on <a href="https://unsplash.com/de/fotos/grune-pflanze-auf-grauem-fels-kE0o9syjDZQ">Unsplash</a>.↩︎</p></li>
</ol>
</section></div> ]]></description>
  <category>R</category>
  <category>renv</category>
  <category>R-SIG</category>
  <category>workflow</category>
  <category>tutorial</category>
  <guid>https://iqb-research.github.io/IQB-Methods/docs/r_sig/23_11_06_renv/</guid>
  <pubDate>Mon, 23 Oct 2023 00:00:00 GMT</pubDate>
  <media:content url="https://iqb-research.github.io/IQB-Methods/docs/r_sig/23_11_06_renv/renv.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Cleaner Scripts</title>
  <dc:creator>Nicklas Hafiz</dc:creator>
  <link>https://iqb-research.github.io/IQB-Methods/docs/r_sig/23_10_09_cleaner/</link>
  <description><![CDATA[ 




<p><img src="https://iqb-research.github.io/IQB-Methods/docs/r_sig/23_10_09_cleaner/cleaner_scripts.jpg" class="img-fluid"><sup>1</sup></p>
<section id="code-conventionsstyle-guides" class="level2">
<h2 class="anchored" data-anchor-id="code-conventionsstyle-guides">Code conventions/Style Guides</h2>
<p>For general code styling, multiple style guides exist:</p>
<ul>
<li><a href="https://style.tidyverse.org/">Tidyverse Style Guide</a></li>
<li><a href="https://google.github.io/styleguide/Rguide.html">Google R Style Guide</a></li>
<li><a href="https://iqb-research.github.io/IQB-Methods/docs/discussions/code_conventions.html">Code Konventionen Methodenteam IQB</a></li>
</ul>
</section>
<section id="some-general-things-we-can-look-at-when-refactoring-code" class="level2">
<h2 class="anchored" data-anchor-id="some-general-things-we-can-look-at-when-refactoring-code">Some general things we can look at when refactoring code</h2>
<div class="callout callout-style-default callout-note callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Note
</div>
</div>
<div class="callout-body-container callout-body">
<p><strong>Refactoring</strong> is the process of making many small improvements to code without altering the code’s output/result.</p>
</div>
</div>
<section id="markdown-vs.-quarto-vs.-r-skripte" class="level3">
<h3 class="anchored" data-anchor-id="markdown-vs.-quarto-vs.-r-skripte">Markdown vs.&nbsp;Quarto vs.&nbsp;R-Skripte</h3>
<p>Markdown has more dependencies, so I would now use <strong>.R</strong> files if I don’t need the markdown features. In general however, I would highly recommend to work with Quarto, some use cases can be found in our <a href="https://iqb-research.github.io/IQB-Methods/docs/r_sig/24_07_15_quarto_1/">Quarto-Tutorial</a>.<br>
Quarto is just the newer R-Markdown, with more features and bringing the R-Markdown magic to new programming languages.</p>
</section>
<section id="load-data" class="level3">
<h3 class="anchored" data-anchor-id="load-data">Load data</h3>
<p>It should always be clear which data is loaded and why. Paths should work, so keep that in mind when dependent folders are moved.</p>
</section>
<section id="write-packages-on-top-of-the-script." class="level3">
<h3 class="anchored" data-anchor-id="write-packages-on-top-of-the-script.">Write packages on top of the script.</h3>
<p>At the very minimum, write down version number (use <code>sessionInfo()</code>).<br>
This way, it is kind of reproducable which packages you used for the script.<br>
<strong>Much much better</strong> and definitily recommended: using <a href="https://iqb-research.github.io/IQB-Methods/docs/r_sig/23_11_06_renv/">renv</a> or <a href="https://github.com/aaronpeikert/repro">repro</a> for your R-project.</p>
</section>
<section id="duplications" class="level3">
<h3 class="anchored" data-anchor-id="duplications">Duplications</h3>
<p>Duplication should be avoided.<br>
They make the code less readable and more error-prone. The most important tools to avoid duplication in R are:</p>
<section id="functions" class="level4">
<h4 class="anchored" data-anchor-id="functions">Functions</h4>
<p>Every time we do something more than once/twice, we should write that into a <a href="https://nickhaf.github.io/r_tutorial/qmd/functions/functions.html#how-to-write-a-function">function</a> This has several advantages:</p>
<ol type="1">
<li>We can give the function a name that conveys to the user what happens in the function. This makes the code more readable.<br>
</li>
<li>We can easily make changes to the function <strong>once</strong> and don’t have to update it every time the action is performed.</li>
</ol>
<p>When the cursor is in the function name, we can press <code>F2</code> to quickly jump to the function definition.<br>
We can put our functions into another file</p>
</section>
<section id="loops" class="level4">
<h4 class="anchored" data-anchor-id="loops">Loops</h4>
<p><a href="https://iqb-research.github.io/IQB-Methods/docs/r_sig/23_03_20_forloops/">Loops</a> and <a href="https://iqb-research.github.io/IQB-Methods/docs/r_sig/23_07_31_apply/">apply-functions</a> help us to repeat actions multiple times.</p>
</section>
</section>
<section id="compartmentalization" class="level3">
<h3 class="anchored" data-anchor-id="compartmentalization">Compartmentalization</h3>
<p>It makes sense to split big scripts into multiple smaller ones.<br>
This also increases readability and makes it easier to get an overview of what happens in a project. For example, we could put our self-defined functions into a <code>functions.R</code> script and load it into our main script with <code>source("functions.R")</code></p>
</section>
<section id="version-control" class="level3">
<h3 class="anchored" data-anchor-id="version-control">Version Control</h3>
<p>Use Version Control for your code. A great option is <a href="https://iqb-research.github.io/IQB-Methods/docs/git/github_workshop/github_intro_slides.html#/title-slide">Git and in addition GitHub</a>.</p>


</section>
</section>


<div id="quarto-appendix" class="default"><section id="footnotes" class="footnotes footnotes-end-of-document"><h2 class="anchored quarto-appendix-heading">Footnotes</h2>

<ol>
<li id="fn1"><p>Image by <a href="https://unsplash.com/de/@markusspiske?utm_content=creditCopyText&amp;utm_medium=referral&amp;utm_source=unsplash">Markus Spiske</a> on <a href="https://unsplash.com/de/fotos/nahaufnahme-des-eingeschalteten-computermonitors-4T5MTKMrjZg">Unsplash</a>.↩︎</p></li>
</ol>
</section></div> ]]></description>
  <category>R</category>
  <category>R-SIG</category>
  <category>best practice</category>
  <guid>https://iqb-research.github.io/IQB-Methods/docs/r_sig/23_10_09_cleaner/</guid>
  <pubDate>Mon, 09 Oct 2023 00:00:00 GMT</pubDate>
  <media:content url="https://iqb-research.github.io/IQB-Methods/docs/r_sig/23_10_09_cleaner/cleaner_scripts.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>The apply family</title>
  <dc:creator>Nicklas Hafiz</dc:creator>
  <link>https://iqb-research.github.io/IQB-Methods/docs/r_sig/23_07_31_apply/</link>
  <description><![CDATA[ 




<p><img src="https://iqb-research.github.io/IQB-Methods/docs/r_sig/23_07_31_apply/apply_family.jpg" class="img-fluid"><sup>1</sup></p>
<p>I can highly recommend the according chapter in <a href="https://r4ds.had.co.nz/iteration.html#iteration">R for Data Science</a> in case you want to dive deeper.</p>
<section id="for-loops" class="level2">
<h2 class="anchored" data-anchor-id="for-loops">For-loops</h2>
<p>In the <a href="../../../docs/r_sig/23_03_20_forloops/index.html">last SIG</a> we talked about <a href="https://nickhaf.github.io/r_tutorial/qmd/loops/loops.html">for-loops</a>.<br>
While for is definitely the most flexible of the looping options, we suggest you avoid it wherever you can, for the following two reasons:</p>
<ul>
<li><ol type="1">
<li>It is not very expressive, i.e.&nbsp;takes a lot of code to do what you want.</li>
</ol></li>
<li><ol start="2" type="1">
<li>It permits you to write horrible code.</li>
</ol></li>
</ul>
<p>Let’s consider this example:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1">example_list <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">list</span>(</span>
<span id="cb1-2">  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"vec_1"</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>),</span>
<span id="cb1-3">  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"vec_2"</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">400</span>),</span>
<span id="cb1-4">  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"vec_3"</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">80</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">97</span>, <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NA</span>)</span>
<span id="cb1-5">)</span>
<span id="cb1-6"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">str</span>(example_list)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>List of 3
 $ vec_1: int [1:10] 1 2 3 4 5 6 7 8 9 10
 $ vec_2: int [1:301] 100 101 102 103 104 105 106 107 108 109 ...
 $ vec_3: int [1:19] 80 81 82 83 84 85 86 87 88 89 ...</code></pre>
</div>
</div>
<p>Here we have a list consisting of three vectors. Our goal is to sum them an output the result into a new vector. We could use a for-loop to do that:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb3-1">vec_sum <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>()</span>
<span id="cb3-2"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span>(i <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">length</span>(example_list)){</span>
<span id="cb3-3">  vec_sum[i] <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sum</span>(example_list[[i]], <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">na.rm =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>)</span>
<span id="cb3-4">}</span>
<span id="cb3-5">vec_sum</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1]    55 75250  1593</code></pre>
</div>
</div>
<p>Okay, that doesn’t look that complicated. But still, we need to define an empty vector at the beginning so we can save our sums, we need to iterate from <code>1:length(example_list)</code>, and manually select the <img src="https://latex.codecogs.com/png.latex?i%5E%7Bth%7D"> from the input list. That is not very expressive, and can be solved a lot easier. Enter, the apply-family:</p>
</section>
<section id="the-apply-family" class="level2">
<h2 class="anchored" data-anchor-id="the-apply-family">The apply-family</h2>
<p>The apply-functions <em>apply</em> a function to a vector, list, matrix … and also always return a vector, list matrix …, depending on the specific function. Let’s rewrite our for-loop with <code>sapply()</code>:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb5-1">vec_sum <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sapply</span>(example_list, sum)</span>
<span id="cb5-2">vec_sum</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>vec_1 vec_2 vec_3 
   55 75250    NA </code></pre>
</div>
</div>
<p>A lot less code and easier to understand! We just go over every list element and calculate its sum.</p>
<p>If we want to add another function argument, we can do that as well:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb7-1">vec_sum <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sapply</span>(example_list, sum, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">na.rm =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>)</span>
<span id="cb7-2">vec_sum</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>vec_1 vec_2 vec_3 
   55 75250  1593 </code></pre>
</div>
</div>
<p>We can also <a href="https://nickhaf.github.io/r_tutorial/qmd/functions/functions.html">define our own function</a>:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb9-1">vec_sum <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sapply</span>(example_list, <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(x){</span>
<span id="cb9-2">  res_sum <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sum</span>(x, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">na.rm =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>)</span>
<span id="cb9-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(res_sum)</span>
<span id="cb9-4">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">return</span>(res_sum)</span>
<span id="cb9-5">})</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] 55
[1] 75250
[1] 1593</code></pre>
</div>
</div>
<p>Here we calculate the sum of object <code>x</code>, and then print it.</p>
<p>Finally, which makes for even nicer code, we can define the function externally, to give it a concise name:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb11-1">print_sum <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(vec){</span>
<span id="cb11-2">  res_sum <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sum</span>(vec, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">na.rm =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>)</span>
<span id="cb11-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(res_sum)</span>
<span id="cb11-4">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">return</span>(res_sum)</span>
<span id="cb11-5">}</span>
<span id="cb11-6"></span>
<span id="cb11-7">vec_sum <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sapply</span>(example_list, print_sum)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] 55
[1] 75250
[1] 1593</code></pre>
</div>
<div class="sourceCode cell-code" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb13-1">vec_sum</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>vec_1 vec_2 vec_3 
   55 75250  1593 </code></pre>
</div>
</div>
<p>Depending of the output we want, we can choose different apply-functions:</p>
<section id="sapply" class="level3">
<h3 class="anchored" data-anchor-id="sapply">sapply()</h3>
<p><code>sapply()</code> simplifies the result, so, e.g., it will return a vector if possible:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb15-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sapply</span>(example_list, print_sum)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] 55
[1] 75250
[1] 1593</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>vec_1 vec_2 vec_3 
   55 75250  1593 </code></pre>
</div>
</div>
</section>
<section id="vapply" class="level3">
<h3 class="anchored" data-anchor-id="vapply">vapply()</h3>
<p>Similar to <code>sapply()</code>, but we can pre-specify a return value, so it might be safer to use:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb18" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb18-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">vapply</span>(example_list, print_sum, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">integer</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] 55
[1] 75250
[1] 1593</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>vec_1 vec_2 vec_3 
   55 75250  1593 </code></pre>
</div>
</div>
<p>Because the result is an integer vector, we don’t get an error, but if we write this:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb21" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb21-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">vapply</span>(example_list, print_sum, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">character</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] 55</code></pre>
</div>
<div class="cell-output cell-output-error">
<pre><code>Error in vapply(example_list, print_sum, character(1)): values must be type 'character',
 but FUN(X[[1]]) result is type 'integer'</code></pre>
</div>
</div>
<p>The function returns an error, because its output is an integer, and not a character vector.</p>
</section>
<section id="lapply" class="level3">
<h3 class="anchored">lapply()</h3>
<p>Returns a list:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb24" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb24-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">lapply</span>(example_list, print_sum)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] 55
[1] 75250
[1] 1593</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>$vec_1
[1] 55

$vec_2
[1] 75250

$vec_3
[1] 1593</code></pre>
</div>
</div>
<div class="callout callout-style-default callout-note callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Exercises
</div>
</div>
<div class="callout-body-container callout-body">
<p>Work with the <code>iris</code> data.frame (it is already included in Base R):</p>
<section id="exercise-1" class="level3">
<h3 class="anchored" data-anchor-id="exercise-1">Exercise 1</h3>
<p>Write a for-loop to determine the median of each column, if it is numeric. If not, return the column class with <code>class()</code>. Save the results in a character vector, so every element should be converted to character before saving it in the vector.</p>
<div class="callout callout-style-default callout-caution callout-titled">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-1-contents" aria-controls="callout-1" aria-expanded="false" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Caution
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-1" class="callout-1-contents callout-collapse collapse">
<div class="callout-body-container callout-body">
<div class="cell">
<div class="sourceCode cell-code" id="cb27" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb27-1">vec_median <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>()</span>
<span id="cb27-2"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span>(i <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ncol</span>(iris)){</span>
<span id="cb27-3">  <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">is.numeric</span>(iris[, i])){</span>
<span id="cb27-4">    vec_median[i] <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">as.character</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">median</span>(iris[, i], <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">na.rm =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>))</span>
<span id="cb27-5">  } <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">else</span>{</span>
<span id="cb27-6">    vec_median[i] <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">class</span>(iris[, i])</span>
<span id="cb27-7">  }</span>
<span id="cb27-8">}</span>
<span id="cb27-9"></span>
<span id="cb27-10">vec_median</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "5.8"    "3"      "4.35"   "1.3"    "factor"</code></pre>
</div>
</div>
</div>
</div>
</div>
</section>
<section id="exercise-2" class="level2">
<h2 class="anchored" data-anchor-id="exercise-2">Exercise 2</h2>
<ol type="1">
<li>Define the body of the for loop as its own <a href="https://nickhaf.github.io/r_tutorial/qmd/functions/functions.html">function</a>. This function should take a vector, and, if this vector is numeric, output the median as a character, otherwise the class of the vector.</li>
</ol>
<div class="callout callout-style-default callout-caution callout-titled">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-2-contents" aria-controls="callout-2" aria-expanded="false" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Caution
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-2" class="callout-2-contents callout-collapse collapse">
<div class="callout-body-container callout-body">
<div class="cell">
<div class="sourceCode cell-code" id="cb29" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb29-1">check_median <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(vec){</span>
<span id="cb29-2">  <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">is.numeric</span>(vec)){</span>
<span id="cb29-3">    result <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">median</span>(vec, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">na.rm =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>)</span>
<span id="cb29-4">  } <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">else</span>{</span>
<span id="cb29-5">    result <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">class</span>(vec)</span>
<span id="cb29-6">  }</span>
<span id="cb29-7">  <span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## Convert to character, so our function always returns the correct type</span></span>
<span id="cb29-8">  result <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">as.character</span>(result)</span>
<span id="cb29-9">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">return</span>(result)</span>
<span id="cb29-10">}</span>
<span id="cb29-11"></span>
<span id="cb29-12"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## Check it:</span></span>
<span id="cb29-13"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">check_median</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1000</span>))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "550"</code></pre>
</div>
<div class="sourceCode cell-code" id="cb31" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb31-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">check_median</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"a"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"b"</span>))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "character"</code></pre>
</div>
</div>
</div>
</div>
</div>
<ol start="2" type="1">
<li>Use it in the for-loop.</li>
</ol>
<div class="callout callout-style-default callout-caution callout-titled">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-3-contents" aria-controls="callout-3" aria-expanded="false" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Caution
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-3" class="callout-3-contents callout-collapse collapse">
<div class="callout-body-container callout-body">
<div class="cell">
<div class="sourceCode cell-code" id="cb33" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb33-1">vec_median <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>()</span>
<span id="cb33-2"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span>(i <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ncol</span>(iris)){</span>
<span id="cb33-3">  vec_median[i] <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">check_median</span>(iris[, i])</span>
<span id="cb33-4">}</span>
<span id="cb33-5"></span>
<span id="cb33-6">vec_median</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "5.8"    "3"      "4.35"   "1.3"    "factor"</code></pre>
</div>
</div>
</div>
</div>
</div>
</section>
<section id="exercise-3" class="level2">
<h2 class="anchored" data-anchor-id="exercise-3">Exercise 3</h2>
<p>Rewrite the for-loop from Exercise 1 with functions from the apply-family, so it returns the following objects. Define the function that gets applied on every input element externally, so we have cleaner code.</p>
<ol type="1">
<li>A vector.</li>
</ol>
<div class="callout callout-style-default callout-caution callout-titled">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-4-contents" aria-controls="callout-4" aria-expanded="false" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Caution
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-4" class="callout-4-contents callout-collapse collapse">
<div class="callout-body-container callout-body">
<div class="cell">
<div class="sourceCode cell-code" id="cb35" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb35-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sapply</span>(iris, check_median)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Sepal.Length  Sepal.Width Petal.Length  Petal.Width      Species 
       "5.8"          "3"       "4.35"        "1.3"     "factor" </code></pre>
</div>
</div>
<p>Or, even better:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb37" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb37-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">vapply</span>(iris, check_median, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">character</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Sepal.Length  Sepal.Width Petal.Length  Petal.Width      Species 
       "5.8"          "3"       "4.35"        "1.3"     "factor" </code></pre>
</div>
</div>
<p>Wow, that’s pretty nice, we condensed our function to half a line by defining the function somewhere else, and not using a for-loop!</p>
</div>
</div>
</div>
<ol start="2" type="1">
<li>A list.</li>
</ol>
<div class="callout callout-style-default callout-caution callout-titled">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-5-contents" aria-controls="callout-5" aria-expanded="false" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Caution
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-5" class="callout-5-contents callout-collapse collapse">
<div class="callout-body-container callout-body">
<div class="cell">
<div class="sourceCode cell-code" id="cb39" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb39-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">lapply</span>(iris, check_median)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>$Sepal.Length
[1] "5.8"

$Sepal.Width
[1] "3"

$Petal.Length
[1] "4.35"

$Petal.Width
[1] "1.3"

$Species
[1] "factor"</code></pre>
</div>
</div>
</div>
</div>
</div>
</section>
</div>
</div>


</section>
</section>


<div id="quarto-appendix" class="default"><section id="footnotes" class="footnotes footnotes-end-of-document"><h2 class="anchored quarto-appendix-heading">Footnotes</h2>

<ol>
<li id="fn1"><p>Image by <a href="https://unsplash.com/de/@kierinsightarchives">Kier in Sight Archives</a> on <a href="https://unsplash.com/de/fotos/black-and-white-heart-skizze-4bhhwmsYl-c">Unsplash</a>.↩︎</p></li>
</ol>
</section></div> ]]></description>
  <category>R</category>
  <category>R-SIG</category>
  <category>loops</category>
  <category>tutorial</category>
  <guid>https://iqb-research.github.io/IQB-Methods/docs/r_sig/23_07_31_apply/</guid>
  <pubDate>Mon, 31 Jul 2023 00:00:00 GMT</pubDate>
  <media:content url="https://iqb-research.github.io/IQB-Methods/docs/r_sig/23_07_31_apply/apply_family.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>for-loops</title>
  <dc:creator>Nicklas Hafiz</dc:creator>
  <link>https://iqb-research.github.io/IQB-Methods/docs/r_sig/23_03_20_forloops/</link>
  <description><![CDATA[ 




<p><img src="https://iqb-research.github.io/IQB-Methods/docs/r_sig/23_03_20_forloops/preview_image.jpg" class="img-fluid"><sup>1</sup></p>
<section id="for-loops" class="level2">
<h2 class="anchored" data-anchor-id="for-loops">For-loops</h2>
<p>In this session we talked about for-loops. Take a look <a href="https://nickhaf.github.io/r_tutorial/qmd/loops/loops.html">here</a> for the corresponding chapter in a workshop I’ve designed.</p>


</section>


<div id="quarto-appendix" class="default"><section id="footnotes" class="footnotes footnotes-end-of-document"><h2 class="anchored quarto-appendix-heading">Footnotes</h2>

<ol>
<li id="fn1"><p>Image by <a href="https://unsplash.com/de/@tine999?utm_source=unsplash&amp;utm_medium=referral&amp;utm_content=creditCopyText">Tine Ivanic</a> on <a href="https://unsplash.com/de/fotos/u2d0BPZFXOY?utm_source=unsplash&amp;utm_medium=referral&amp;utm_content=creditCopyText">Unsplash</a>.↩︎</p></li>
</ol>
</section></div> ]]></description>
  <category>R</category>
  <category>R-SIG</category>
  <category>loops</category>
  <category>intro</category>
  <category>tutorial</category>
  <guid>https://iqb-research.github.io/IQB-Methods/docs/r_sig/23_03_20_forloops/</guid>
  <pubDate>Mon, 20 Mar 2023 00:00:00 GMT</pubDate>
  <media:content url="https://iqb-research.github.io/IQB-Methods/docs/r_sig/23_03_20_forloops/preview_image.jpg" medium="image" type="image/jpeg"/>
</item>
</channel>
</rss>
