---
title: "Einführung in Github"
title-slide-attributes:
  data-background-image: ./images/github.jpg
  data-background-size: cover
  data-background-opacity: "0"
author: "Nicklas Hafiz"
format: 
  letterbox-revealjs:
    theme: styles.scss
lang: de
categories: [github, tutorial]
---

HTML Slides bereitstellen, und PDF Export erklären (evtl. auf learn)

# Motivation
 
 - Cloud Speicherung
 - Version Control
 - Ordnung
 - Kollaboration

##
Open Science

## {background-image="images/pc.jpg" background-size="1225px"}

::: {.absolute left="2.5%" top="2.5%" style="padding: 0.5em 0.5em; background-color: rgba(255, 255, 255, 0); backdrop-filter: blur(0px); box-shadow: 0 0 0rem 0 rgba(255, 255, 255, 0); color:#F8F8F8;"}

Alles liegt \
Online.

:::



## Nachvollziehbarkeit/Version Control

\
\

[Wer hat was, wann, warum geändert?]{.highlight}


## Nachvollziehbarkeit/Version Control

- Dokumentation eng verzahnt mit Code/Text. 
- Alle Arbeitsschritte sind nachvollziehbar.
- Jeder Projektstand ist wiederherstellbar. 


## Dateibenennung


## Kollaboration

- Gemeinsames Arbeiten an Projekten
- Viele Open Source Projekte auf GitHub
- Gleichzeitiges Arbeiten an Dateien, Organisation über Issues ...


## Verwandte Probleme, die mit Git nicht mehr auftreten

- Überschreiben von Datein.
- Mit der falschen `final-v10_commented_NH_03.docx` weiterarbeiten. 
- (Etwas in Datei X ändern, aber die Änderung in allen abhängingen Datein vergessen (hier hilft uns vor allem [Quarto](https://iqb-research.github.io/IQB-Methods/docs/r_sig/24_07_15_quarto_1/) auch ungemein)). 



## Git
:::: {.columns} 
::: {.column width="50%"}
- Version Control System
- Entwickelt von Linus Torvalds
- Erlaubt das Tracken von (Plain Text) files: 
    - Code
    - Präsentationen
    - Manuskripte 
    - Webseiten
    - ... 
:::
::: {.column widht="40%"}
![](./images/torvalds.jpg){.image-right}
:::
::::

## GitHub
- 

## Workflow {.center}

```{mermaid}
flowchart TD
    A["Repository online"] -- clone --> B("Repository lokal")
    B -- bearbeiten --> C("Repository lokal")
    C -- stage/commit --> D["Änderungen lokal"]
    D -- push --> A
```


## Editoren
- Terminal
- GitHub Desktop
- RStudio
- Viele mehr ...

## Terminal
![](./images/terminal.png)

Ansonsten Windows Powershell/Linux Terminal öffnen, Pfad setzen (z.B. `cd C:\Users\hafiznij\Documents\GitHub\IQB-Methods`) und dann von dort aus arbeiten. 


## Visuelle Editoren

:::: {.columns} 
::: {.column width="50%"}
### Github Desktop

![](./images/github_desktop.PNG)

:::
::: {.column width="50%"}
### RStudio Integration 

![](./images/rstudio.png)

:::
:::

## RStudio Setup
`Tools - Global Options`

![](./images/rstudio_config.png)


## {background-image="images/babyfeet.jpg" background-size="1225px"}

::: {.absolute right="1.5%" top="1.5%" style="padding: 0.5em 0.5em; background-color: rgba(255, 255, 255, 0); backdrop-filter: blur(0px); box-shadow: 0 0 0rem 0 rgba(255, 255, 255, 0); color:#F8F8F8;"}

Erste Schritte.

:::

## Konfigurieren von Git
Einmal, in einem Terminal (z.B. das in RStudio, oder Windows Powershell):

```
git config --global user.name 'Your Name'
git config --global user.email 'your@email.com'
```

:::{.callout-caution}
## Übung
Tu das bitte einmal für deinen GitHub-Username und deine GitHub-email. Checke dann noch einmal ob das geklappt hat:

```
git config --global user.name
git config --global user.email
```
:::


## Eigenes Repository erstellen


:::{.columns}

::: {.column width="50%"}
![](./images/new_repo.png)
:::
::: {.column width="50%"}
:::{.callout-warning}
## Übung
Erstelle dein erstes eigenes Repository. 
:::

:::
:::



## Clone

```
git clone url
```

["Herunterladen"]{.highlight} des Repositories auf den eigenen Rechner.

:::{.columns}

::: {.column width="50%"}
![](./images/clone.png)

:::

::: {.column width="50%"}
:::{.callout-warning}
## Übung
Clone das gerade erstellte Repository.
:::
:::
:::

## Lokales Arbeiten
Änderungen im Repository werden lokal auf dem eigenen Rechner vorgenommen. 

:::{.callout-important}
Arbeiten auf Netzlaufwerk evtl. fehlerbehaftet?
:::

:::{.callout-warning}
## Übung
Erstelle eine .txt Datei in deinem lokalen Repository-Ordner. Schreibe in die Datei `Hello World!` und speichere sie ab.
:::

## Stage

```
git add filename
```
```
git add .
```

[Auswählen]{.highlight} der Datein, die zum Commit hinzugefügt werden sollen. 

:::{.columns}

::: {.column width="50%"}

![GitHub Desktop](./images/stage.png)

:::

::: {.column width="50%}

:::{.callout-warning}
## Übung
Stage deine gerade bearbeitete Datei. 
:::

:::

:::


## Commit

```
git commit -m "useful commit message"
```

[Speichern]{.highlight} der Änderungen, mit kurzer Beschreibung was gemacht wurde ([Commit Message]{.highlight}). 

:::{.columns}

::: {.column width="50%"}

![](./images/commit.png)

:::

::: {.column width="50%}
![](./images/rstudio_commit.png)

:::
:::

## 

:::{.columns}

::: {.column width="50%"}
![](./images/commit_message.jpg)
:::
::: {.column width="50%"}

:::{.callout-warning}
## Übung
Commite deine gerade gestagte Datei mit einer kurzen, prägnanten Commit Message. 
:::
:::
:::


## Push
```
git push
```



[Hochladen]{.highlight} der Commits in das Online-Repository. 


:::{.columns}
::: {.column width="50%"}

![](./images/push.png)

:::

::: {.column width="50%}

:::{.callout-warning}
## Übung 
Pushe deinen Commit. Schaue dann im Online-Repository nach, ob die geänderte Datei dort auch erscheint.
:::
:::
:::



# Das wars auch schon!

# Na gut, noch nicht ganz. Wir können den Worklow erweitern:

## .gitignore


# Kollaboratives Arbeiten

## Branches

![](./images/branches.PNG)

## Pull Requests/Merge
![](./images/branch_pullrequest.PNG)

## Mehrere Leute
- Jede*r arbeitet auf eigenen branches. 
- Regelmäßiges mergen: Entweder in main, oder von main pullen und dann in den eigenen branch mergen:

```
git checkout dmgr2      # gets you "on branch dmgr2"
git fetch origin        # gets you up to date with origin
git merge origin/master
```


## Issues

## Verlinken von Issues und Pull Requests
Jeder Issue und jede Pull-Request hat eine ID. Diese kann genutzt werden, um alles untereinander zu verlinken. 

## Reviews

## Review auf neuem Branch updaten


## Übung: Kollaboratives Arbeiten

:::{.callout-caution}
## Übung
Einige dich mit der Person neben dir, wer wen zum zu Beginn erstellten Repository einlädt. Tut das dann, sodass ihr eines eurer Repositories zu zweit oder zu dritt bearbeiten könnt.  
:::

:::{.callout-tip}
Gehe oben in der Kopfzeile des Repos auf `Settings` und dann in der Seitenleiste links auf `Collaborators and teams`. Hier kannst du jetzt den GitHub-Username einer Person zum Repository hinzufügen. 
:::

## Übung: Clonen
:::{.callout-caution}
## Übung 
Clone das Repository (wenn noch nicht geschehen). 
:::


## Übung: Issues
:::{.callout-caution}
## Übung 1
Erstellt euch gegenseitig einen Issue, den die andere Person dann bearbeiten soll. Das kann so etwas sein wie "Add two numbers" o.ä. Wichtig ist, dass aus der Beschreibung klar wird, was getan werden soll. Assignt die andere Person zu diesem Issue. 
:::


:::{.callout-caution}
## Übung 2
Erstelle einen eigenen Branch, auf dem du den dir zugewiesenen Issue in der nächsten Übung bearbeiten wirst. 

:::

## Übung: Issues
:::{.callout-caution}
## Übung 3
Bearbeite jetzt den dir assignten Issue **ersteinmal in einer neuen R-Datei**. Erstellt euch also eine neue R-Datei im Repository Ordner und löst den Issue darin. 
:::

:::{.callout-caution}
## Übung 4
Jetzt kommt der spannende Part: stage, committe und pushe deine Änderungen. 

:::{.callout-tip}
Wenn du in die Commit-Message `closes #Issuenumber` schreibst, wird der Issue automatisch geschlossen, sobald die Pull-Request gemerged wird. 
:::

:::



## Übung: Pull-Requests
:::{.callout-caution}
## Übung 5
Erstelle eine Pull-Request, und Assigne die andere Person als Reviewer. 
:::

:::{.callout-caution}
## Übung 5
Reviewe die dir assignte Pull-Request. Verlange mind. eine kleine Änderung. 
:::

:::{.callout-caution}
## Übung 6
Arbeite die Änderung, die von dir verlangt wurde, ein und pushe erneut. Nutze dafür einfach den selben Branch, den du vorher für deine Pull-Request verwendet hast. Dadurch wird sie automatisch geupdated. Verlange ein erneutes Review. 
:::

:::{.callout-caution}
## Übung 7
Reviewe die Pull-Request der anderen Person erneut. Approve diesmal. 
:::

:::{.callout-caution}
## Übung 8
Merge deine Pull-Request
:::

## 
:::{.callout-caution}
## Übung 
Schaue dir die Commit-History an und browse das Repository zu einem beliebigen Commit. 
:::


## Merge Conflicts


## Übung


## Im Blick behalten 

:::{.callout-important}
Denkt daran, dass alles was ihr in GitHub hochladet, auch im Internet landet. Zwar kann man Repositories auf privat stellen, aber Daten oder ähnliches wie konkrete BT-Ergebnisse, die noch nicht veröffentlich wurden, sollte eher auf den Laufwerken belassen.   
:::


## Vokabelliste (in ungefährere Reihenfolge vom typischen Workflow)
- Repository/Repo:
- clone:
- stage: 
- commit:
- pull:
- push:
- merge:


# Use Git!

## Bildquellen
- GitHub: Foto von <a href="https://unsplash.com/de/@synkevych?utm_content=creditCopyText&utm_medium=referral&utm_source=unsplash">Roman Synkevych</a> auf <a href="https://unsplash.com/de/fotos/blau-schwarzes-pinguin-pluschtier-UT8LMo-wlyk?utm_content=creditCopyText&utm_medium=referral&utm_source=unsplash">Unsplash</a>
- PC: Foto von <a href="https://unsplash.com/de/@shots_of_aspartame?utm_content=creditCopyText&utm_medium=referral&utm_source=unsplash">Julia Joppien</a> auf <a href="https://unsplash.com/de/fotos/zerbrochener-monitor-auf-dem-boden-XFUqd0u5U7w?utm_content=creditCopyText&utm_medium=referral&utm_source=unsplash">Unsplash</a>
- Torvalds: https://commons.wikimedia.org/wiki/File:LinuxCon_Europe_Linus_Torvalds_03_(cropped).jpg
- Babyfeet: Foto von <a href="https://unsplash.com/de/@omarlopez1?utm_content=creditCopyText&utm_medium=referral&utm_source=unsplash">Omar Lopez</a> auf <a href="https://unsplash.com/de/fotos/person-die-babyfusse-halt-vTknj2OxDVg?utm_content=creditCopyText&utm_medium=referral&utm_source=unsplash">Unsplash</a>
- Commit message: https://raw.githubusercontent.com/denitdao/o-rly-collection/refs/heads/main/public/book_covers/useless-git-commit-message.jpg

