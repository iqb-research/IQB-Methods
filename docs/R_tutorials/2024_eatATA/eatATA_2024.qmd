---
title: "eatATA - Automatisierte Blockbesetzung"
description: "Einführungsslides vom eatATA Workshop von Nov. 2024"
author: "Benjamin Becker"
date: "2024-11-5"
title-slide-attributes:
  data-background-image: eatATA.png
  data-background-size: 15%
  data-background-repeat: no-repeat
  data-background-position: 95% 5%
bibliography: references_dissertation.bib
csl: apa.csl
format: 
  revealjs:
    logo: eatATA.png
    footer: "Automatisierte Blockbesetzung"
    toc: false
    theme: default
    css: logo.css
editor: source
execute:
  echo: true
categories: [eatATA, tutorial, slides, intro]
image: eatATA.png
---

## Automatisierte Blockbesetzung

**Blockbesetzung**

Zuordnung von Items zu Blöcken aus einem Itempool unter Berücksichtigung von Testspezifikationen

**Automatisiert**

Nicht händisch, sondern unter Verwendung von Optimierungsalgorithmen

## Vorstellungsrunde

30 Sekunden pro Person:

-   Name
-   Projekt
-   Habt ihr schon mal selbst eine Blockbesetzung umgesetzt?
-   Wenn ja, händisch oder mit eatATA?

## Agenda

1.  Hintergrund: Wofür?
2.  Grundlagen: Mathematical Programming
3.  Theorie: Automated Test Assembly/Automatisierte Blockbesetzung
4.  Praxis: eatATA

# Wofür?

## Begrifflichkeiten {.smaller}

-   **Item**\
    → Eine Frage (kleinste Einheit)
-   **Aufgabe/Unit**\
    → Set von Items mit gemeinsamem Stimulus
-   **Block/Cluster**\
    → Zusammenstellung von Aufgaben, meist als fixer Kontext, ca. 20 Minuten
-   **Testform/Testheft**\
    → Zusammenstellung von Blöcken, eine Person bearbeitet eine Testform

```{R}
#| echo: false
#| eval: true
library(eatATA)

```

## Parallele Testformen {.smaller}

**Wieso?**

-   **Low-stakes Assessments**\
    → Breite inhaltliche Abdeckung\
    → Messgenauigkeit auf Gruppenebene

-   **High-stakes Assessments**\
    → Abschreiben/Betrugsversuche verhindern\
    → Weitergabe Testinhalte verhindern

-   **Pilotierungen**\
    → Testung großer Itemzahlen

## Block vs. Testform {.smaller}

**Anforderungen Blockbesetzung**

-   Parallelität (inhaltlich, Formate, ...)

**Anforderungen Testformen**

-   Parallelität
-   Linking

## Parallele Blöcke {.smaller}

**Hinsichtlich?**

-   Inhaltliche Bereiche
-   Aufgabenformate
-   Schwierigkeit/Testinformation
-   Zeitaufwand/Speededness
-   ...

**zusätzlich**

-   Itemunverträglichkeiten

## Blockbesetzung {.smaller}

**Häufig händisch (via Excel), aber:**

-   viele Items
-   viele Constraints\
    → z.B. viele Unverträglichkeiten
-   hoher Aufwand/kognitiver Load!

# Mathematical Programming

## Definition

**Synonyme**

-   Mathematical Optimization/Mathematical Programming

**Relevante Subklasse**

-   Mixed Integer (Linear) Programming (MIP/MILP)

**Grundidee:**

Maximierungs- oder Minimierungsproblem, wobei Lösungsraum durch (Ung-)Gleichungen eingeschränkt werden kann

## Zentrale Konzepte

**Branch and Bound Algorithmen**

-   Grundidee: Probieren aller möglichen Lösungen ("Brute Forcing")
-   Effiziente Reduktion des Lösungsraumes
-   Kombinieren von Constraints

## Zentrale Konzepte

-   Decision Variables
-   Constraints
-   Objective Function

## Beispiel: Variiertes Rucksackproblem {.smaller}

-   Anstellungsoptionen StuMis, Docs, Postdocs
-   Maximal 8 Büroplätze
-   Maximale Kosten 120\$: StuMis (5\$), Docs (18\$), Postdocs (25\$)
-   Es braucht von jeder Statusgruppe mindestens 2 Personen
-   Publikationen: StuMis (1), Docs (2), Postdocs (3)
-   Anzahl der Publikationen maximieren

**Frage:** Welche Kombination aus Personen soll eingestellt werden?

## Beispiel: Variiertes Rucksackproblem {.smaller}

**Decision Variables:**

-   Anstellungsoptionen **S**tuMis, **D**ocs, **P**ostdocs

**Constraints:**

-   Maximal 8 Büroplätze $$
    S + D + P \leq 8 
    $$
-   Maximale Kosten 120\$: StuMis (5\$), Docs (18\$), Postdocs (25\$) $$
    5S + 18D + 25P \leq 120
    $$

## Beispiel: Variiertes Rucksackproblem {.smaller}

**Decision Variables:**

-   Anstellungsoptionen **S**tuMis, **D**ocs, **P**ostdocs

**Constraints:**

-   Es braucht von jeder Statusgruppe mindestens 2 Personen $$
    S \geq 2  
    $$ $$
    D \geq 2
    $$ $$
    P \geq 2 
    $$

## Beispiel: Variiertes Rucksackproblem {.smaller}

**Decision Variables:**

-   Anstellungsoptionen **S**tuMis, **D**ocs, **P**ostdocs

**Objective Function:**

-   Publikationen: StuMis (1), Docs (2), Postdocs (3)
-   Anzahl der Publikationen maximieren $$
    Maximiere \quad  1S + 2D + 3P 
    $$

## Solver {.smaller}

**Open Source**

-   GLPK
-   lpSolve
-   Symphony
-   ...

**Kommerziell**

-   Gurobi
-   CPLEX
-   ...

## Übung

-   Versucht das vorgestellte Beispiel händisch zu lösen!

## Lösung mithilfe von Rglpk

```{r}
#| echo: true
#| eval: false

# Define objective function
obj <- c(1, 2, 3)
max <- TRUE

# Define constraints
mat <- matrix(c(1, 5, 1, 0, 0, 1, 18, 0, 1, 0, 1, 25, 0, 0, 1), nrow = 5)
dir <- c("<=", "<=", ">=", ">=", ">=")
rhs <- c(8, 120, 2, 2, 2)

# Define problem type (MIP)
types <- c("I", "I", "I")

# Call solver
Rglpk::Rglpk_solve_LP(obj, mat, dir, rhs, 
               types = types, max = max, 
               control = list("verbose" = TRUE, "canonicalize_status" = FALSE))
```

## Lösung mithilfe von Rglpk

```{r}
#| echo: false
#| eval: true

obj <- c(1, 2, 3)
mat <- matrix(c(1, 5, 1, 0, 0, 1, 18, 0, 1, 0, 1, 25, 0, 0, 1), nrow = 5)
dir <- c("<=", "<=", ">=", ">=", ">=")
rhs <- c(8, 120, 2, 2, 2)
types <- c("I", "I", "I")
max <- TRUE

Rglpk::Rglpk_solve_LP(obj, mat, dir, rhs, 
               types = types, max = max, 
               control = list("verbose" = TRUE, "canonicalize_status" = FALSE))
```

# Automatisierte Blockbesetzung

## Automatisierte Blockbesetzung

```{r}
#| echo: false
knitr::include_graphics("Graphs/vanderLinden_cover.JPG")
```

## Automatisierte Blockbesetzung

Verwendet Konzepte der Mathematical Optimization (Mixed Integer Programming) zur Blockbesetzung [@vanderLinden.2005; @Kuhn.2015]

**Zentrale Konzepte**

-   Decision Variables (0/1, Item x Block)
-   Constraints (Testspezifikationen)
-   Objective Function (wichtigste relative Testspezifikation)

## Minimalbeispiel: Item Pool

-   30 Items
-   Item Formate (MC, offen, Zuordnung)
-   Durchschnittliche Antwortzeiten
-   Schwierigkeitsparameter (1PL-Modell)

## Minimalbeispiel: Item Pool

```{r}
#| echo: false
# LaTeX table generated using xtable package in R.
library(knitr)
kable(items_mini[1:5, ],
      caption = "Erste fünf Items des simulierten Itempools.")
```

## Minimalbeispiel: Spezifikationen

**Spezifikationen**

-   1 Block
-   Minimale durchschnittliche Blockzeit
-   Exakt 10 Items im Block
-   4 MC-Items, 3 offene Items, 3 Zuordnungsitems

## Minimalbeispiel: Decision Variables {.smaller}

**Decision Variables**

-   Matrix mit
    -   Spalten = Anzahl Items (+ 1)
    -   Zeilen = Anzahl Blöcke
-   30 Items, 1 Block $$
      i_{1, b1}, i_{2, b1}, i_{3, b1}, \ldots, i_{30, b1}
    $$

## Minimalbeispiel: Objective Function {.smaller}

**Objective Function**

-   'Relative Testspezifikation'
-   so viel/wenig/nah wie möglich (an) ...
-   Wichtig: Exakt eine Testspezifikation muss hierfür ausgewählt werden
-   Min/Max/Minimax/Maximin
-   Minimale Blockzeit $$
    minimiere \quad  27.79i_{1, b1} + 15.45i_{2, b1} + \ldots + 19.50i_{30, b1} 
    $$

## Minimalbeispiel: Constraints {.smaller}

**Constraints**

-   Alle anderen Testspezifikationen
-   Genau 10 Items pro Block $$
    i_{1, b1} + i_{2, b1} + \ldots + i_{30, b1} = 10 
    $$
-   4 MC Items, 3 offene Items, 3 Zuordnungsitems $$
      1i_{1, b1} + 1i_{2, b1} + \ldots + 0i_{30, b1} = 4 
    $$ $$
      0i_{1, b1} + 0i_{2, b1} + \ldots + 0i_{30, b1} = 3 
    $$ $$
      0i_{1, b1} + 0i_{2, b1} + \ldots + 1i_{30, b1} = 3 
    $$

## Übung {.smaller}

Notiert die Decision Variables, Objective Function und Constraints für folgendes ATA-Problem:

-   2 Blöcke
-   beide Blöcke bzgl. Testzeit so nah wie möglich an 450 Sekunden
-   jedes Item darf maximal nur in einem Block vorkommen
-   pro Block müssen alle 3 Itemformate mindestens 3 mal verwendet werden

## Lösung {.smaller}

-   Decision Variables für 2 Blöcke und Item-Pool aus 30 Items

$$
    i_{1, b1}, i_{2, b1}, i_{3, b1}, \ldots, i_{30, b1}
$$ $$
    i_{1, b2}, i_{2, b2}, i_{3, b2}, \ldots, i_{30, b2}
$$

## Lösung {.smaller}

-   beide Blöcke bzgl. Testzeit so nah wie möglich an 450 Sekunden
-   Maximin-Ansatz

$$
  27.79i_{1, b1} + 15.45i_{2, b1} + \ldots + 19.50i_{30, b1} - y <= 450
$$ $$
  27.79i_{1, b1} + 15.45i_{2, b1} + \ldots + 19.50i_{30, b1} + y >= 450
$$ $$
  27.79i_{1, b2} + 15.45i_{2, b2} + \ldots + 19.50i_{30, b2} - y <= 450
$$ $$
  27.79i_{1, b2} + 15.45i_{2, b2} + \ldots + 19.50i_{30, b2} + y >= 450
$$ $$
 minimiere \quad y
$$

## Lösung {.smaller}

-   jedes Item darf maximal nur in einem Block vorkommen

$$
    i_{1, b1} + i_{1, b2} <= 1 
$$ $$
    i_{2, b1} + i_{2, b2} <= 1 
$$ $$
    \ldots 
$$

## Lösung {.smaller}

-   jedes Itemformat sollte mindestens 3 Mal pro Block vorkommen

$$
    1i_{1, b1} + 1i_{2, b1} + \ldots + 0i_{30, b1} >= 3 
$$ $$
    1i_{1, b2} + 1i_{2, b2} + \ldots + 0i_{30, b2} >= 3 
$$ $$
    \ldots
$$

# Umsetzung in eatATA

## eatATA

Entwickelt basierend auf Feedback von:

-   Pauline Kohrt (ehemals VERA 3 Math)
-   Simone Dubiel (ehemals VERA 8 German)
-   Karoline Sachse (BT/Methoden)

Paketautoren:

-   [Dries Debeer (Ghent University)](https://research.ugent.be/web/person/dries-debeer-0/en)
-   Benjamin Becker (IQB)

## eatATA: Resources I

Vignettes available on [CRAN](https://CRAN.R-project.org/package=eatATA)

![](Graphs/eatATA_cran.JPG)

## eatATA: Resources II

or on [pkgdown](https://beckerbenj.github.io/eatATA/)

![](Graphs/eatATA_pkgdown.JPG)

## eatATA: Resources III

eatATA Tutorial Paper [@eatATA]

![](Graphs/psych_paper.PNG)

## Code: Objective Function

Minimiere durchschnittliche Blockzeit

```{r}
Btime <- minObjective(
	nForms = 1, 
	itemValues = items_mini$time,
	itemIDs = items_mini$item
)
```

## Code: Constraint 1

Anzahl Items im Block

```{r}
Blength <- itemsPerFormConstraint(
	nForms = 1, 
	operator = "=",
	targetValue = 10,
	itemIDs = items_mini$item
)
```

## Code: Constraint 2

Itemformate

```{r}
Bcat <- itemCategoryConstraint(
  nForms = 1, 
  as.factor(items_mini$format),
  targetValues = c(4, 3, 3),
  itemIDs = items_mini$item)
```

## Code: Solver Call

Solver Call

```{r}
solver_out <- useSolver(
	list(Btime, Blength, Bcat),
	solver = "GLPK"
)
```

## Code: Inspect Solution

Zusammengestellten Block inspizieren

```{r}
inspectSolution(
	solver_out, 
	items = items_mini, 
	idCol = "item"
)
```

## Code: Append Solution

Blockbesetzung zu Itempool hinzufügen

```{r}
item_mini_out <- appendSolution(
	solver_out, 
	items = items_mini, 
	idCol = "item"
)
item_mini_out[1:10, ]
```

# Überblick Funktionalität

## Itempool vorbereiten {.smaller}

-   [`calculateIIF()`](https://beckerbenj.github.io/eatATA/reference/calculateIIF.html) - Berechnung Item-Informationsfunktion
-   [`calculatExpectedRT()`](https://beckerbenj.github.io/eatATA/reference/calculateIIF.html) - Berechnung erwarteter Antwortzeiten
-   [`dummiesToFactor()`](https://beckerbenj.github.io/eatATA/reference/dummiesToFactor.html) - Transformation von Dummy-Variablen in Faktoren
-   [`computeTargetValues()`](https://beckerbenj.github.io/eatATA/reference/computeTargetValues.html) - Berechnung von sinnvollen Zielwerten

## Objective Function {.smaller}

-   [`maxObjective()`](https://beckerbenj.github.io/eatATA/reference/maxObjective.html) - Maximieren
-   [`minObjective()`](https://beckerbenj.github.io/eatATA/reference/minObjective.html) - Minimieren
-   [`maximinObjective()`](https://beckerbenj.github.io/eatATA/reference/maximinObjective.html) - Maximieren eines Minimums
-   [`minimaxObjective()`](https://beckerbenj.github.io/eatATA/reference/minimaxObjective.html) - Minimieren eines Maximums
-   [`cappedMaximinObjective()`](https://beckerbenj.github.io/eatATA/reference/cappedMaximinObjective.html) - Capped Maximin

## Constraints {.smaller}

Itemverwendung

-   [`depletePoolConstraint()`](https://beckerbenj.github.io/eatATA/reference/depletePoolConstraint.html) - Erschöpfung des Itempools
-   [`itemUsageConstraint()`](https://beckerbenj.github.io/eatATA/reference/itemUsageConstraint.html) - Itemnutzung

Anzahl Items pro Form

-   [`itemsPerFormConstraint()`](https://beckerbenj.github.io/eatATA/reference/itemsPerFormConstraint.html) - Anzahl Items pro Form

## Constraints {.smaller}

Kategoriale Constraints

-   [`itemCategoryConstraint()`](https://beckerbenj.github.io/eatATA/reference/itemCategoryConstraint.html) - Kategoriale Constraints
-   [`itemCategoryDeviationConstraint()`](https://beckerbenj.github.io/eatATA/reference/itemCategoryDeviationConstraint.html) - Abweichung von Zielwert
-   [`itemCategoryMaxConstraint()`](https://beckerbenj.github.io/eatATA/reference/itemCategoryMaxConstraint.html) - Maximum
-   [`itemCategoryMinConstraint()`](https://beckerbenj.github.io/eatATA/reference/itemCategoryMinConstraint.html) - Minimum
-   [`itemCategoryRangeConstraint()`](https://beckerbenj.github.io/eatATA/reference/itemCategoryRangeConstraint.html) - Maximum und Minimum

## Constraints {.smaller}

Metrische Constraints

-   [`autoItemValuesMinMaxConstraint()`](https://beckerbenj.github.io/eatATA/reference/autoItemValuesMinMaxConstraint.html) - Automatische Min/Max-Berechnung
-   [`itemValuesConstraint()`](https://beckerbenj.github.io/eatATA/reference/itemValuesConstraint.html) - Metrische Constraints
-   [`itemValuesDeviationConstraint()`](https://beckerbenj.github.io/eatATA/reference/itemValuesDeviationConstraint.html) - Abweichung von Zielwert
-   [`itemValuesMaxConstraint()`](https://beckerbenj.github.io/eatATA/reference/itemValuesMaxConstraint.html) - Maximum
-   [`itemValuesMinConstraint()`](https://beckerbenj.github.io/eatATA/reference/itemValuesMinConstraint.html) - Minimum
-   [`itemValuesRangeConstraint()`](https://beckerbenj.github.io/eatATA/reference/itemValuesRangeConstraint.html) - Maximum und Minimum

## Constraints {.smaller}

Metrische Constraints über Testformen

-   [`acrossFormsConstraint()`](https://beckerbenj.github.io/eatATA/reference/acrossFormsConstraint.html) - Über Testformen

Iteminklusionen und -exklusionen

-   [`itemExclusionConstraint()`](https://beckerbenj.github.io/eatATA/reference/itemExclusionConstraint.html) - Itemexklusionen
-   [`itemInclusionConstraint()`](https://beckerbenj.github.io/eatATA/reference/itemInclusionConstraint.html) - Iteminklusionen

Vorbereitung von Iteminklusionen und -exklusionen

-   [`itemTuples()`](https://beckerbenj.github.io/eatATA/reference/itemTuples.html) - Vorbereitung von Iteminklusionen und -exklusionen
-   [`matrixExclusionTuples()`](https://beckerbenj.github.io/eatATA/reference/matrixExclusionTuples.html) - Vorbereitung von Itemexklusionen
-   [`stemInclusionTuples()`](https://beckerbenj.github.io/eatATA/reference/stemInclusionTuples.html) - Vorbereitung von Iteminklusionen

## Übung {.smaller}

Erstellt Blöcke mit folgenden Testspezifikationen mithilfe von `eatATA` (siehe auch letzte Übung):

-   2 Blöcke
-   beide Blöcke Testzeit so nah wie möglich an 450 Sekunden (via `minimaxObjective()` Funktion)
-   jedes Item darf maximal nur in einem Block vorkommen (via `itemUsageConstraint()` Funktion)
-   pro Block müssen alle 3 Itemformate mindestens 3 mal verwendet werden (via `itemCategoryMinConstraint()` Funktion)

Setzt für die Lösung des Problems dem Solver ein Zeitlimit von 10 Sekunden!

## Lösung

Siehe R-Syntax

## Praktische Tipps

-   ATA ist ein Skill für sich
-   Es gibt immer mehrere Wege zum Ziel
-   Pragmatisches Vorgehen:
    -   Häufig muss die Lösung nicht perfekt sein
    -   Der Weg zum Ziel ist irrelevant
-   Schrittweises Vorgehen [@Proietti.2020]
    -   Problem schrittweise aufbauen oder
    -   Problem schrittweise vereinfachen

## References

::: {#refs}
:::

# Danke für Eure Aufmerksamkeit!

# Appendix

## Item Inclusions

Gründe

-   Gemeinsamer Stimulus ('Aufgabe')
-   andere Gründe

Umsetzung

-   Aufgaben und nicht Items als Assembling Unit (e.g., VERA 3 Math)
-   explizite Item Inclusion (siehe eatATA Tutorial)

## Item Exclusions

Gründe

-   Item beinhaltet Info zu Lösung eines anderen Items
-   Items inhaltlich zu ähnlich
-   ...

Umsetzung

-   Explizite Item Exclusions

## Code: Item Inclusions (Input)

Input: Spalte mit Gruppierung

```{r}
incluTup <- stemInclusionTuples(
	items_lsa, 
	idCol = "item", 
	stemCol = "testlet"
)
```

Output: Inclusion Tuples

## Code: Item Inclusions (Constraints)

Erstellung von Inclusion Constraints

```{r}
incluCons <- itemInclusionConstraint(
	nForms = 8,  
	itemTuples = incluTup,
	itemIDs = items_lsa$item
)
```

## Code: Item Exclusions (Input)

Input: Spalte mit Exclusion-Listung

```{r}
exclusionTuples <- itemTuples(
	items_pilot, 
	idCol = "item",
	infoCol = "exclusions", 
	sepPattern = ", "
)
```

Output: Exclusion Tuples

## Code: Item Exclusions (Constraints)

Erstellung von Exclusion COnstraints

```{r}
#| eval: false

excl_constraints <- itemExclusionConstraint(
	nForms = nForms,
	itemTuples = exclusionTuples, 
	itemIDs = items_pilot$item
)
```
