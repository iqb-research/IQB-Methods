---
title: "The renv-Package"
description: "Tutorial on how to use the 'renv'-package in R to make the BT21 reproducible."
---

# Reproducibility

Project repo for reproducibility research. Currently, we are working on making the BT21 reproducible by using the `renv`-Package in R.

# renv

The `renv`-package is intended for simple project-local R dependency management. [Here](https://rstudio.github.io/renv/articles/renv.html) you'll find a more thorough introduction.

# Setup

1)  Create an RStudio Project in the working directory that should be made reproducible.
2)  If another R-version should be used, switch to that version. On Windows, you can simply install multiple versions of R and switch between them in RStudio by going to `Tools - Global Options - General`. Maybe you will have to install `renv` for this version again.
3)  Initialise the project using `renv::init()`. This creates the basic infrastructure for the usage of `renv`.

-   Dependencies should be discovered automatically. It can take a while, if you're doing this for the first time.
-   If you want to install specific package versions, you can use `renv::intit(bare = TRUE)`.
    -   This sets up the `renv` project without trying to find the used dependencies. Thus, you can install the specific versions manually afterwards.\
    -   The dependencies in the working directory can be obtained by `renv::dependencies()`.

4)  If you want specific package versions, you can use `renv::install(packagename/@version-number)`. Local packages or packages from GitHub can be installed as well (see [here](https://rstudio.github.io/renv/reference/install.html)).
5)  In the end, packages should be installed in `./renv/library`. A lockfile `./renv.lock` is created, where the R version and the package versions are noted.
6)  Now you can work with the project. If you update dependencies, for example when you install and/or load new packages, you can save the state of the project library to the lockfile using `renv::snapshot()`.
7)  If you want to restore the state of the project library as noted in the lockfile, use `renv::restore()`.

# Project usage

1)  For maximal reproducibility, check the lockfile for the R-version before working with `renv`. If another R-version is documented in the lockfile, you can change the R-version before reproducing an analysis, see 2).
2)  As the packages are directly installed into the project working directory, you should be able to simply work with the `renv`-project as saved by the last user without doing anything.

# Note on Package Versions

[MRAN](https://mran.microsoft.com/) can be used to get snapshots of R on any day back to 17.09.2014. Here, package versions on specific dates can be found, for example, when a script was finished on 06.05.22, the packages probably used can be obtained from here. Sometimes an error similar to this can occur:

`Error: install of package 'tidyselect' failed [error code 1]`

In this case it is possible to look up the package version on the respective date on MRAN and install this version manually. On 06.05.22, CRAN hosted Version `1.1.2` of `tidyselect`, so you install the version like so: `renv::install("tidyselect@1.1.2")`.
